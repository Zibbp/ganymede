{
    "swagger": "2.0",
    "info": {
        "description": "Authentication is handled using JWT tokens. The tokens are set as access-token and refresh-token cookies.\nFor information regarding which role is authorized for which endpoint, see the http handler https://github.com/Zibbp/ganymede/blob/main/internal/transport/http/handler.go.",
        "title": "Ganymede API",
        "contact": {
            "name": "Zibbp",
            "url": "https://github.com/zibbp/ganymede"
        },
        "license": {
            "name": "GPL-3.0"
        },
        "version": "1.0"
    },
    "host": "localhost:4000",
    "basePath": "/api/v1",
    "paths": {
        "/admin/info": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get ganymede info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get ganymede info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.InfoResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get ganymede stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get ganymede stats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.GetStatsResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/archive/channel": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Archive a twitch channel (creates channel in database and download profile image)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archive"
                ],
                "summary": "Archive a twitch channel",
                "parameters": [
                    {
                        "description": "Channel",
                        "name": "channel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ArchiveChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/archive/restart": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Restart a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archive"
                ],
                "summary": "Restart a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue ID",
                        "name": "queue_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.RestartTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/archive/vod": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Archive a twitch vod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archive"
                ],
                "summary": "Archive a twitch vod",
                "parameters": [
                    {
                        "description": "Vod",
                        "name": "vod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ArchiveVodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/archive.TwitchVodResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Change password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Change password",
                        "name": "change-password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login a user (sets access-token and refresh-token cookies). Access token lasts for 1 hour. Refresh token lasts for 1 month.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/callback": {
            "get": {
                "description": "OAuth callback for OAuth provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "OAuth callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/login": {
            "get": {
                "description": "Login a user with OAuth (sets access-token and refresh-token cookies)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user with OAuth",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/logout": {
            "get": {
                "description": "Logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/refresh": {
            "get": {
                "description": "Refresh access-token and refresh-token (sets access-token and refresh-token cookies)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access-token and refresh-token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access-token and refresh-token (sets access-token and refresh-token cookies)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access-token and refresh-token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a user (does not log in)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a user",
                "parameters": [
                    {
                        "description": "Register",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channel": {
            "get": {
                "description": "Returns all channels",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Get all channels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Channel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Create a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Create a channel",
                "parameters": [
                    {
                        "description": "Channel",
                        "name": "channel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channel/name/{name}": {
            "get": {
                "description": "Returns a channel by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Get a channel by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channel/{id}": {
            "get": {
                "description": "Returns a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Get a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Update a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Channel",
                        "name": "channel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channel"
                ],
                "summary": "Delete a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.Conf"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update config",
                "parameters": [
                    {
                        "description": "Config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateConfigRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/config/notification": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get notification config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get notification config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.Notification"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update notification config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update notification config",
                "parameters": [
                    {
                        "description": "Config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateNotificationRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/config/storage": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get storage template config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get storage template config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.StorageTemplate"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update storage template config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update storage template config",
                "parameters": [
                    {
                        "description": "Config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateStorageTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateStorageTemplateRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/exec/ffprobe": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get ffprobe data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exec"
                ],
                "summary": "Get ffprobe data",
                "parameters": [
                    {
                        "description": "GetFfprobeDataRequest",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.GetFfprobeDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get all watched channels",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Get all watched channels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Live"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Add watched channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Add watched channel",
                "parameters": [
                    {
                        "description": "Add watched channel",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddWatchedChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Live"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live/archive": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Adhoc archive a channel's live stream.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Archive a channel's live stream",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live/chat-convert": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Adhoc convert chat endpoint. This is what happens when a live stream chat is converted to a \"vod\" chat.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Convert chat",
                "parameters": [
                    {
                        "description": "Convert chat",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ConvertChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live/check": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Check watched channels if they are live. This is what runs every X seconds in the config.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Check watched channels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live/multiple": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "This is useful to add multiple channels at once if they all have the same settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Add multiple watched channels at once",
                "parameters": [
                    {
                        "description": "Add watched channel",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddMultipleWatchedChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Live"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update watched channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Update watched channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update watched channel",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateWatchedChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Live"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete watched channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Live"
                ],
                "summary": "Delete watched channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Live"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notification/test": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Test notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Test notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of notification to test",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playback": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get all playback progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playback"
                ],
                "summary": "Get all progress",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Playback"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playback/progress": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update playback progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playback"
                ],
                "summary": "Update progress",
                "parameters": [
                    {
                        "description": "progress",
                        "name": "progress",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateProgressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playback/progress/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get playback progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playback"
                ],
                "summary": "Get progress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "vod id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Playback"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playback/status": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update playback status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playback"
                ],
                "summary": "Update status",
                "parameters": [
                    {
                        "description": "status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playback/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete playback progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playback"
                ],
                "summary": "Delete progress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "vod id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playlist": {
            "get": {
                "description": "Get playlists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Get playlists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Playlist"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Create playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Create playlist",
                "parameters": [
                    {
                        "description": "playlist",
                        "name": "playlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreatePlaylistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Playlist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playlist/{id}": {
            "get": {
                "description": "Get playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Get playlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "playlist id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Playlist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Update playlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "playlist id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "playlist",
                        "name": "playlist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreatePlaylistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Playlist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Add vod to playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Add vod to playlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "playlist id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "vod",
                        "name": "vod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddVodToPlaylistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Delete playlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "playlist id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/playlist/{id}/vod": {
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete vod from playlist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playlist"
                ],
                "summary": "Delete vod from playlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "playlist id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "vod",
                        "name": "vod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddVodToPlaylistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/queue": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get queue items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Get queue items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get processing queue items",
                        "name": "processing",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Queue"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Create a queue item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Create a queue item",
                "parameters": [
                    {
                        "description": "Create queue item",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateQueueRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Queue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/queue/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get queue item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Get queue item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue item id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Queue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update queue item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Update queue item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue item id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update queue item",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateQueueRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Queue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete queue item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Delete queue item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue item id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/queue/{id}/tail": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Read queue log file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Read queue log file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue item id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Log type: video, video-convert, chat, chat-render, or chat-convert",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/task/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Start a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Start a task",
                "parameters": [
                    {
                        "description": "StartTaskRequest",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.StartTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/twitch/categories": {
            "get": {
                "description": "Get a list of twitch categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "twitch"
                ],
                "summary": "Get a list of twitch categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/twitch.Category"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/twitch/channel": {
            "get": {
                "description": "Get a twitch user/channel by name (uses twitch api)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "twitch"
                ],
                "summary": "Get a twitch channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Twitch user login name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/twitch.Channel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/twitch/gql/video": {
            "get": {
                "description": "Get a twitch video by id (uses twitch graphql api)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "twitch"
                ],
                "summary": "Get a twitch video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Twitch video id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/twitch.Video"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/twitch/vod": {
            "get": {
                "description": "Get a twitch vod by id (uses twitch api)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "twitch"
                ],
                "summary": "Get a twitch vod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Twitch vod id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/twitch.Vod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Get user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateChannelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod": {
            "get": {
                "description": "Get vods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "channel_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Vod"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Create a vod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Create a vod",
                "parameters": [
                    {
                        "description": "Create vod request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateVodRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Vod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/pagination": {
            "get": {
                "description": "Get vods pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vods pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "channel_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vod.Pagination"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/search": {
            "get": {
                "description": "Search vods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Search vods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Vod"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}": {
            "get": {
                "description": "Get a vod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get a vod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With channel",
                        "name": "with_channel",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Vod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Update a vod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Update a vod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vod",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateVodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Vod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyCookieAuth": []
                    }
                ],
                "description": "Delete a vod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Delete a vod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete files",
                        "name": "delete_files",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/chat": {
            "get": {
                "description": "Get vod chat comments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vod chat comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/chat.Comment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/chat/badges": {
            "get": {
                "description": "Get vod chat badges",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vod chat badges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/chat.GanymedeBadges"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/chat/emotes": {
            "get": {
                "description": "Get vod chat emotes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vod chat emotes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/chat.GanymedeEmotes"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/chat/seek": {
            "get": {
                "description": "Get N number of vod chat comments before the start time (used for seeking)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get number of vod chat comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/chat.Comment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/chat/userid": {
            "get": {
                "description": "Get user id from chat json file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get user id from chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vod/{id}/playlist": {
            "get": {
                "description": "Get vod playlists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vods"
                ],
                "summary": "Get vod playlists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/ent.Playlist"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.GetStatsResp": {
            "type": "object",
            "properties": {
                "channel_count": {
                    "type": "integer"
                },
                "vod_count": {
                    "type": "integer"
                }
            }
        },
        "admin.InfoResp": {
            "type": "object",
            "properties": {
                "build_time": {
                    "type": "string"
                },
                "git_hash": {
                    "type": "string"
                },
                "program_versions": {
                    "$ref": "#/definitions/admin.ProgramVersions"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "admin.ProgramVersions": {
            "type": "object",
            "properties": {
                "chat_downloader": {
                    "type": "string"
                },
                "ffmpeg": {
                    "type": "string"
                },
                "streamlink": {
                    "type": "string"
                },
                "twitch_downloader": {
                    "type": "string"
                }
            }
        },
        "archive.TwitchVodResponse": {
            "type": "object",
            "properties": {
                "queue": {
                    "$ref": "#/definitions/ent.Queue"
                },
                "vod": {
                    "$ref": "#/definitions/ent.Vod"
                }
            }
        },
        "chat.Comment": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "string"
                },
                "commenter": {
                    "$ref": "#/definitions/chat.Commenter"
                },
                "content_id": {
                    "type": "string"
                },
                "content_offset_seconds": {
                    "type": "number"
                },
                "content_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/chat.Message"
                },
                "more_replies": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "chat.Commenter": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "chat.EmoticonElement": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "begin": {
                    "type": "integer"
                },
                "end": {
                    "type": "integer"
                }
            }
        },
        "chat.Fragment": {
            "type": "object",
            "properties": {
                "emoticon": {
                    "$ref": "#/definitions/chat.FragmentEmoticon"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "chat.FragmentEmoticon": {
            "type": "object",
            "properties": {
                "emoticon_id": {
                    "type": "string"
                },
                "emoticon_set_id": {
                    "type": "string"
                }
            }
        },
        "chat.GanymedeBadge": {
            "type": "object",
            "properties": {
                "click_action": {
                    "type": "string"
                },
                "click_url": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image_url_1x": {
                    "type": "string"
                },
                "image_url_2x": {
                    "type": "string"
                },
                "image_url_4x": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chat.GanymedeBadges": {
            "type": "object",
            "properties": {
                "badges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.GanymedeBadge"
                    }
                }
            }
        },
        "chat.GanymedeEmote": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "chat.GanymedeEmotes": {
            "type": "object",
            "properties": {
                "emotes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.GanymedeEmote"
                    }
                }
            }
        },
        "chat.Message": {
            "type": "object",
            "properties": {
                "bits_spent": {
                    "type": "integer"
                },
                "body": {
                    "type": "string"
                },
                "emoticons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.EmoticonElement"
                    }
                },
                "fragments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.Fragment"
                    }
                },
                "is_action": {
                    "type": "boolean"
                },
                "user_badges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.UserBadge"
                    }
                },
                "user_color": {
                    "type": "string"
                },
                "user_notice_params": {
                    "$ref": "#/definitions/chat.UserNoticeParams"
                }
            }
        },
        "chat.UserBadge": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "version": {}
            }
        },
        "chat.UserNoticeParams": {
            "type": "object",
            "properties": {
                "msg_id": {}
            }
        },
        "config.Conf": {
            "type": "object",
            "properties": {
                "active_queue_items": {
                    "type": "integer"
                },
                "archive": {
                    "type": "object",
                    "properties": {
                        "save_as_hls": {
                            "type": "boolean"
                        }
                    }
                },
                "db_seeded": {
                    "type": "boolean"
                },
                "debug": {
                    "type": "boolean"
                },
                "live_check_interval_seconds": {
                    "type": "integer"
                },
                "notifications": {
                    "$ref": "#/definitions/config.Notification"
                },
                "oauth_enabled": {
                    "type": "boolean"
                },
                "parameters": {
                    "type": "object",
                    "properties": {
                        "chat_render": {
                            "type": "string"
                        },
                        "streamlink_live": {
                            "type": "string"
                        },
                        "twitch_token": {
                            "type": "string"
                        },
                        "video_convert": {
                            "type": "string"
                        }
                    }
                },
                "registration_enabled": {
                    "type": "boolean"
                },
                "storage_templates": {
                    "$ref": "#/definitions/config.StorageTemplate"
                }
            }
        },
        "config.Notification": {
            "type": "object",
            "properties": {
                "error_enabled": {
                    "type": "boolean"
                },
                "error_template": {
                    "type": "string"
                },
                "error_webhook_url": {
                    "type": "string"
                },
                "is_live_enabled": {
                    "type": "boolean"
                },
                "is_live_template": {
                    "type": "string"
                },
                "is_live_webhook_url": {
                    "type": "string"
                },
                "live_success_enabled": {
                    "type": "boolean"
                },
                "live_success_template": {
                    "type": "string"
                },
                "live_success_webhook_url": {
                    "type": "string"
                },
                "video_success_enabled": {
                    "type": "boolean"
                },
                "video_success_template": {
                    "type": "string"
                },
                "video_success_webhook_url": {
                    "type": "string"
                }
            }
        },
        "config.StorageTemplate": {
            "type": "object",
            "properties": {
                "file_template": {
                    "type": "string"
                },
                "folder_template": {
                    "type": "string"
                }
            }
        },
        "ent.Channel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "display_name": {
                    "description": "DisplayName holds the value of the \"display_name\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ChannelQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ChannelEdges"
                        }
                    ]
                },
                "ext_id": {
                    "description": "The external ID of the channel.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "image_path": {
                    "description": "ImagePath holds the value of the \"image_path\" field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.ChannelEdges": {
            "type": "object",
            "properties": {
                "live": {
                    "description": "Live holds the value of the live edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Live"
                    }
                },
                "vods": {
                    "description": "Vods holds the value of the vods edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Vod"
                    }
                }
            }
        },
        "ent.Live": {
            "type": "object",
            "properties": {
                "archive_chat": {
                    "description": "Whether the chat archive is enabled.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "download_archives": {
                    "description": "Download archives",
                    "type": "boolean"
                },
                "download_highlights": {
                    "description": "Download highlights",
                    "type": "boolean"
                },
                "download_sub_only": {
                    "description": "Download sub only VODs",
                    "type": "boolean"
                },
                "download_uploads": {
                    "description": "Download uploads",
                    "type": "boolean"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the LiveQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.LiveEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_live": {
                    "description": "Whether the channel is currently live.",
                    "type": "boolean"
                },
                "last_live": {
                    "description": "The time the channel last went live.",
                    "type": "string"
                },
                "render_chat": {
                    "description": "Whether the chat should be rendered.",
                    "type": "boolean"
                },
                "resolution": {
                    "description": "Resolution holds the value of the \"resolution\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "watch_live": {
                    "description": "Watch live streams",
                    "type": "boolean"
                },
                "watch_vod": {
                    "description": "Watch new VODs",
                    "type": "boolean"
                }
            }
        },
        "ent.LiveCategory": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the LiveCategoryQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.LiveCategoryEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.LiveCategoryEdges": {
            "type": "object",
            "properties": {
                "live": {
                    "description": "Live holds the value of the live edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Live"
                        }
                    ]
                }
            }
        },
        "ent.LiveEdges": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "Categories holds the value of the categories edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.LiveCategory"
                    }
                },
                "channel": {
                    "description": "Channel holds the value of the channel edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    ]
                }
            }
        },
        "ent.Playback": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "status": {
                    "description": "Status holds the value of the \"status\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.PlaybackStatus"
                        }
                    ]
                },
                "time": {
                    "description": "Time holds the value of the \"time\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                },
                "vod_id": {
                    "description": "VodID holds the value of the \"vod_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Playlist": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the PlaylistQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.PlaylistEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "thumbnail_path": {
                    "description": "ThumbnailPath holds the value of the \"thumbnail_path\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.PlaylistEdges": {
            "type": "object",
            "properties": {
                "vods": {
                    "description": "Vods holds the value of the vods edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Vod"
                    }
                }
            }
        },
        "ent.Queue": {
            "type": "object",
            "properties": {
                "chat_processing": {
                    "description": "ChatProcessing holds the value of the \"chat_processing\" field.",
                    "type": "boolean"
                },
                "chat_start": {
                    "description": "ChatStart holds the value of the \"chat_start\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the QueueQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.QueueEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "live_archive": {
                    "description": "LiveArchive holds the value of the \"live_archive\" field.",
                    "type": "boolean"
                },
                "on_hold": {
                    "description": "OnHold holds the value of the \"on_hold\" field.",
                    "type": "boolean"
                },
                "processing": {
                    "description": "Processing holds the value of the \"processing\" field.",
                    "type": "boolean"
                },
                "render_chat": {
                    "description": "RenderChat holds the value of the \"render_chat\" field.",
                    "type": "boolean"
                },
                "task_chat_convert": {
                    "description": "TaskChatConvert holds the value of the \"task_chat_convert\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_download": {
                    "description": "TaskChatDownload holds the value of the \"task_chat_download\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_move": {
                    "description": "TaskChatMove holds the value of the \"task_chat_move\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_render": {
                    "description": "TaskChatRender holds the value of the \"task_chat_render\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_convert": {
                    "description": "TaskVideoConvert holds the value of the \"task_video_convert\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_download": {
                    "description": "TaskVideoDownload holds the value of the \"task_video_download\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_move": {
                    "description": "TaskVideoMove holds the value of the \"task_video_move\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_create_folder": {
                    "description": "TaskVodCreateFolder holds the value of the \"task_vod_create_folder\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_download_thumbnail": {
                    "description": "TaskVodDownloadThumbnail holds the value of the \"task_vod_download_thumbnail\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_save_info": {
                    "description": "TaskVodSaveInfo holds the value of the \"task_vod_save_info\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "video_processing": {
                    "description": "VideoProcessing holds the value of the \"video_processing\" field.",
                    "type": "boolean"
                }
            }
        },
        "ent.QueueEdges": {
            "type": "object",
            "properties": {
                "vod": {
                    "description": "Vod holds the value of the vod edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Vod"
                        }
                    ]
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "oauth": {
                    "description": "Oauth holds the value of the \"oauth\" field.",
                    "type": "boolean"
                },
                "role": {
                    "description": "Role holds the value of the \"role\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.Role"
                        }
                    ]
                },
                "sub": {
                    "description": "Sub holds the value of the \"sub\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "username": {
                    "description": "Username holds the value of the \"username\" field.",
                    "type": "string"
                },
                "webhook": {
                    "description": "Webhook holds the value of the \"webhook\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Vod": {
            "type": "object",
            "properties": {
                "caption_path": {
                    "description": "CaptionPath holds the value of the \"caption_path\" field.",
                    "type": "string"
                },
                "chat_path": {
                    "description": "ChatPath holds the value of the \"chat_path\" field.",
                    "type": "string"
                },
                "chat_video_path": {
                    "description": "ChatVideoPath holds the value of the \"chat_video_path\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration holds the value of the \"duration\" field.",
                    "type": "integer"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the VodQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.VodEdges"
                        }
                    ]
                },
                "ext_id": {
                    "description": "ExtID holds the value of the \"ext_id\" field.",
                    "type": "string"
                },
                "file_name": {
                    "description": "FileName holds the value of the \"file_name\" field.",
                    "type": "string"
                },
                "folder_name": {
                    "description": "FolderName holds the value of the \"folder_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "info_path": {
                    "description": "InfoPath holds the value of the \"info_path\" field.",
                    "type": "string"
                },
                "platform": {
                    "description": "The platform the VOD is from, takes an enum.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.VideoPlatform"
                        }
                    ]
                },
                "processing": {
                    "description": "Whether the VOD is currently processing.",
                    "type": "boolean"
                },
                "resolution": {
                    "description": "Resolution holds the value of the \"resolution\" field.",
                    "type": "string"
                },
                "streamed_at": {
                    "description": "The time the VOD was streamed.",
                    "type": "string"
                },
                "thumbnail_path": {
                    "description": "ThumbnailPath holds the value of the \"thumbnail_path\" field.",
                    "type": "string"
                },
                "title": {
                    "description": "Title holds the value of the \"title\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of VOD, takes an enum.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.VodType"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "video_path": {
                    "description": "VideoPath holds the value of the \"video_path\" field.",
                    "type": "string"
                },
                "views": {
                    "description": "Views holds the value of the \"views\" field.",
                    "type": "integer"
                },
                "web_thumbnail_path": {
                    "description": "WebThumbnailPath holds the value of the \"web_thumbnail_path\" field.",
                    "type": "string"
                }
            }
        },
        "ent.VodEdges": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Channel holds the value of the channel edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Channel"
                        }
                    ]
                },
                "playlists": {
                    "description": "Playlists holds the value of the playlists edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Playlist"
                    }
                },
                "queue": {
                    "description": "Queue holds the value of the queue edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Queue"
                        }
                    ]
                }
            }
        },
        "http.AddMultipleWatchedChannelRequest": {
            "type": "object",
            "required": [
                "channel_id",
                "resolution"
            ],
            "properties": {
                "archive_chat": {
                    "type": "boolean"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "channel_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "download_archives": {
                    "type": "boolean"
                },
                "download_highlights": {
                    "type": "boolean"
                },
                "download_sub_only": {
                    "type": "boolean"
                },
                "download_uploads": {
                    "type": "boolean"
                },
                "render_chat": {
                    "type": "boolean"
                },
                "resolution": {
                    "type": "string",
                    "enum": [
                        "best",
                        "source",
                        "720p60",
                        "480p30",
                        "360p30",
                        "160p30"
                    ]
                },
                "watch_live": {
                    "type": "boolean"
                },
                "watch_vod": {
                    "type": "boolean"
                }
            }
        },
        "http.AddVodToPlaylistRequest": {
            "type": "object",
            "required": [
                "vod_id"
            ],
            "properties": {
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.AddWatchedChannelRequest": {
            "type": "object",
            "required": [
                "channel_id",
                "resolution"
            ],
            "properties": {
                "archive_chat": {
                    "type": "boolean"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "channel_id": {
                    "type": "string"
                },
                "download_archives": {
                    "type": "boolean"
                },
                "download_highlights": {
                    "type": "boolean"
                },
                "download_sub_only": {
                    "type": "boolean"
                },
                "download_uploads": {
                    "type": "boolean"
                },
                "render_chat": {
                    "type": "boolean"
                },
                "resolution": {
                    "type": "string",
                    "enum": [
                        "best",
                        "source",
                        "720p60",
                        "480p30",
                        "360p30",
                        "160p30"
                    ]
                },
                "watch_live": {
                    "type": "boolean"
                },
                "watch_vod": {
                    "type": "boolean"
                }
            }
        },
        "http.ArchiveChannelRequest": {
            "type": "object",
            "required": [
                "channel_name"
            ],
            "properties": {
                "channel_name": {
                    "type": "string"
                }
            }
        },
        "http.ArchiveVodRequest": {
            "type": "object",
            "required": [
                "quality",
                "vod_id"
            ],
            "properties": {
                "chat": {
                    "type": "boolean"
                },
                "quality": {
                    "enum": [
                        "best",
                        "source",
                        "720p60",
                        "480p30",
                        "360p30",
                        "160p30"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.VodQuality"
                        }
                    ]
                },
                "render_chat": {
                    "type": "boolean"
                },
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_new_password",
                "new_password",
                "old_password"
            ],
            "properties": {
                "confirm_new_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "http.ConvertChatRequest": {
            "type": "object",
            "required": [
                "channel_id",
                "channel_name",
                "chat_start",
                "file_name",
                "vod_external_id",
                "vod_id"
            ],
            "properties": {
                "channel_id": {
                    "type": "integer"
                },
                "channel_name": {
                    "type": "string"
                },
                "chat_start": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "vod_external_id": {
                    "type": "string"
                },
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.CreateChannelRequest": {
            "type": "object",
            "required": [
                "display_name",
                "image_path",
                "name"
            ],
            "properties": {
                "display_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "image_path": {
                    "type": "string",
                    "minLength": 3
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        },
        "http.CreatePlaylistRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.CreateQueueRequest": {
            "type": "object",
            "required": [
                "vod_id"
            ],
            "properties": {
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.CreateVodRequest": {
            "type": "object",
            "required": [
                "channel_id",
                "duration",
                "platform",
                "streamed_at",
                "title",
                "type",
                "video_path",
                "views",
                "web_thumbnail_path"
            ],
            "properties": {
                "caption_path": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "string"
                },
                "chat_path": {
                    "type": "string"
                },
                "chat_video_path": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "ext_id": {
                    "type": "string",
                    "minLength": 1
                },
                "id": {
                    "type": "string"
                },
                "info_path": {
                    "type": "string"
                },
                "platform": {
                    "enum": [
                        "twitch",
                        "youtube"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.VideoPlatform"
                        }
                    ]
                },
                "processing": {
                    "type": "boolean"
                },
                "resolution": {
                    "type": "string"
                },
                "streamed_at": {
                    "type": "string"
                },
                "thumbnail_path": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "minLength": 1
                },
                "type": {
                    "enum": [
                        "archive",
                        "live",
                        "highlight",
                        "upload",
                        "clip"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.VodType"
                        }
                    ]
                },
                "video_path": {
                    "type": "string",
                    "minLength": 1
                },
                "views": {
                    "type": "integer"
                },
                "web_thumbnail_path": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "http.GetFfprobeDataRequest": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string"
                }
            }
        },
        "http.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "http.RegisterRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "http.RestartTaskRequest": {
            "type": "object",
            "required": [
                "queue_id",
                "task"
            ],
            "properties": {
                "cont": {
                    "type": "boolean"
                },
                "queue_id": {
                    "type": "string"
                },
                "task": {
                    "type": "string",
                    "enum": [
                        "vod_create_folder",
                        "vod_download_thumbnail",
                        "vod_save_info",
                        "video_download",
                        "video_convert",
                        "video_move",
                        "chat_download",
                        "chat_convert",
                        "chat_render",
                        "chat_move"
                    ]
                }
            }
        },
        "http.StartTaskRequest": {
            "type": "object",
            "required": [
                "task"
            ],
            "properties": {
                "task": {
                    "type": "string",
                    "enum": [
                        "check_live",
                        "check_vod",
                        "get_jwks",
                        "twitch_auth",
                        "queue_hold_check",
                        "storage_migration"
                    ]
                }
            }
        },
        "http.UpdateChannelRequest": {
            "type": "object",
            "required": [
                "role",
                "username"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "editor",
                        "archiver",
                        "user"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        },
        "http.UpdateConfigRequest": {
            "type": "object",
            "properties": {
                "archive": {
                    "type": "object",
                    "properties": {
                        "save_as_hls": {
                            "type": "boolean"
                        }
                    }
                },
                "parameters": {
                    "type": "object",
                    "required": [
                        "chat_render",
                        "video_convert"
                    ],
                    "properties": {
                        "chat_render": {
                            "type": "string"
                        },
                        "streamlink_live": {
                            "type": "string"
                        },
                        "twitch_token": {
                            "type": "string"
                        },
                        "video_convert": {
                            "type": "string"
                        }
                    }
                },
                "registration_enabled": {
                    "type": "boolean"
                }
            }
        },
        "http.UpdateNotificationRequest": {
            "type": "object",
            "properties": {
                "error_enabled": {
                    "type": "boolean"
                },
                "error_template": {
                    "type": "string"
                },
                "error_webhook_url": {
                    "type": "string"
                },
                "is_live_enabled": {
                    "type": "boolean"
                },
                "is_live_template": {
                    "type": "string"
                },
                "is_live_webhook_url": {
                    "type": "string"
                },
                "live_success_enabled": {
                    "type": "boolean"
                },
                "live_success_template": {
                    "type": "string"
                },
                "live_success_webhook_url": {
                    "type": "string"
                },
                "video_success_enabled": {
                    "type": "boolean"
                },
                "video_success_template": {
                    "type": "string"
                },
                "video_success_webhook_url": {
                    "type": "string"
                }
            }
        },
        "http.UpdateProgressRequest": {
            "type": "object",
            "required": [
                "time",
                "vod_id"
            ],
            "properties": {
                "time": {
                    "type": "integer"
                },
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.UpdateQueueRequest": {
            "type": "object",
            "required": [
                "task_chat_convert",
                "task_chat_download",
                "task_chat_move",
                "task_chat_render",
                "task_video_convert",
                "task_video_download",
                "task_video_move",
                "task_vod_create_folder",
                "task_vod_download_thumbnail",
                "task_vod_save_info"
            ],
            "properties": {
                "chat_processing": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "live_archive": {
                    "type": "boolean"
                },
                "on_hold": {
                    "type": "boolean"
                },
                "processing": {
                    "type": "boolean"
                },
                "task_chat_convert": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_download": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_move": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_chat_render": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_convert": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_download": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_video_move": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_create_folder": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_download_thumbnail": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "task_vod_save_info": {
                    "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.TaskStatus"
                        }
                    ]
                },
                "video_processing": {
                    "type": "boolean"
                }
            }
        },
        "http.UpdateStatusRequest": {
            "type": "object",
            "required": [
                "status",
                "vod_id"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "in_progress",
                        "finished"
                    ]
                },
                "vod_id": {
                    "type": "string"
                }
            }
        },
        "http.UpdateStorageTemplateRequest": {
            "type": "object",
            "required": [
                "file_template",
                "folder_template"
            ],
            "properties": {
                "file_template": {
                    "type": "string"
                },
                "folder_template": {
                    "type": "string"
                }
            }
        },
        "http.UpdateWatchedChannelRequest": {
            "type": "object",
            "required": [
                "resolution"
            ],
            "properties": {
                "archive_chat": {
                    "type": "boolean"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "download_archives": {
                    "type": "boolean"
                },
                "download_highlights": {
                    "type": "boolean"
                },
                "download_sub_only": {
                    "type": "boolean"
                },
                "download_uploads": {
                    "type": "boolean"
                },
                "render_chat": {
                    "type": "boolean"
                },
                "resolution": {
                    "type": "string",
                    "enum": [
                        "best",
                        "source",
                        "720p60",
                        "480p30",
                        "360p30",
                        "160p30"
                    ]
                },
                "watch_live": {
                    "type": "boolean"
                },
                "watch_vod": {
                    "type": "boolean"
                }
            }
        },
        "twitch.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "twitch.Channel": {
            "type": "object",
            "properties": {
                "broadcaster_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "offline_image_url": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer"
                }
            }
        },
        "twitch.Video": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "muted_segments": {},
                "published_at": {
                    "type": "string"
                },
                "stream_id": {
                    "type": "string"
                },
                "thumbnail_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_login": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer"
                },
                "viewable": {
                    "type": "string"
                }
            }
        },
        "twitch.Vod": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "muted_segments": {},
                "published_at": {
                    "type": "string"
                },
                "stream_id": {
                    "type": "string"
                },
                "thumbnail_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_login": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer"
                },
                "viewable": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.PlaybackStatus": {
            "type": "string",
            "enum": [
                "in_progress",
                "finished"
            ],
            "x-enum-varnames": [
                "InProgress",
                "Finished"
            ]
        },
        "utils.Role": {
            "type": "string",
            "enum": [
                "admin",
                "editor",
                "archiver",
                "user"
            ],
            "x-enum-varnames": [
                "AdminRole",
                "EditorRole",
                "ArchiverRole",
                "UserRole"
            ]
        },
        "utils.TaskStatus": {
            "type": "string",
            "enum": [
                "success",
                "running",
                "pending",
                "failed"
            ],
            "x-enum-varnames": [
                "Success",
                "Running",
                "Pending",
                "Failed"
            ]
        },
        "utils.VideoPlatform": {
            "type": "string",
            "enum": [
                "twitch",
                "youtube"
            ],
            "x-enum-varnames": [
                "PlatformTwitch",
                "PlatformYoutube"
            ]
        },
        "utils.VodQuality": {
            "type": "string",
            "enum": [
                "best",
                "source",
                "720p60",
                "480p30",
                "360p30",
                "160p30"
            ],
            "x-enum-varnames": [
                "Best",
                "Source",
                "R720P60",
                "R480P30",
                "R360P30",
                "R160P30"
            ]
        },
        "utils.VodType": {
            "type": "string",
            "enum": [
                "archive",
                "live",
                "highlight",
                "upload",
                "clip"
            ],
            "x-enum-varnames": [
                "Archive",
                "Live",
                "Highlight",
                "Upload",
                "Clip"
            ]
        },
        "vod.Pagination": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Vod"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "pages": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyCookieAuth": {
            "type": "apiKey",
            "name": "access-token",
            "in": "cookie"
        }
    }
}