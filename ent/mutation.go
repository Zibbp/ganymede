// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/chapter"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livecategory"
	"github.com/zibbp/ganymede/ent/livetitleregex"
	"github.com/zibbp/ganymede/ent/mutedsegment"
	"github.com/zibbp/ganymede/ent/playback"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/twitchcategory"
	"github.com/zibbp/ganymede/ent/user"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChannel        = "Channel"
	TypeChapter        = "Chapter"
	TypeLive           = "Live"
	TypeLiveCategory   = "LiveCategory"
	TypeLiveTitleRegex = "LiveTitleRegex"
	TypeMutedSegment   = "MutedSegment"
	TypePlayback       = "Playback"
	TypePlaylist       = "Playlist"
	TypeQueue          = "Queue"
	TypeTwitchCategory = "TwitchCategory"
	TypeUser           = "User"
	TypeVod            = "Vod"
)

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	ext_id            *string
	name              *string
	display_name      *string
	image_path        *string
	retention         *bool
	retention_days    *int64
	addretention_days *int64
	updated_at        *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	vods              map[uuid.UUID]struct{}
	removedvods       map[uuid.UUID]struct{}
	clearedvods       bool
	live              map[uuid.UUID]struct{}
	removedlive       map[uuid.UUID]struct{}
	clearedlive       bool
	done              bool
	oldValue          func(context.Context) (*Channel, error)
	predicates        []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uuid.UUID) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChannelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChannelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Channel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExtID sets the "ext_id" field.
func (m *ChannelMutation) SetExtID(s string) {
	m.ext_id = &s
}

// ExtID returns the value of the "ext_id" field in the mutation.
func (m *ChannelMutation) ExtID() (r string, exists bool) {
	v := m.ext_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExtID returns the old "ext_id" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldExtID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtID: %w", err)
	}
	return oldValue.ExtID, nil
}

// ClearExtID clears the value of the "ext_id" field.
func (m *ChannelMutation) ClearExtID() {
	m.ext_id = nil
	m.clearedFields[channel.FieldExtID] = struct{}{}
}

// ExtIDCleared returns if the "ext_id" field was cleared in this mutation.
func (m *ChannelMutation) ExtIDCleared() bool {
	_, ok := m.clearedFields[channel.FieldExtID]
	return ok
}

// ResetExtID resets all changes to the "ext_id" field.
func (m *ChannelMutation) ResetExtID() {
	m.ext_id = nil
	delete(m.clearedFields, channel.FieldExtID)
}

// SetName sets the "name" field.
func (m *ChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChannelMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ChannelMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ChannelMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ChannelMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetImagePath sets the "image_path" field.
func (m *ChannelMutation) SetImagePath(s string) {
	m.image_path = &s
}

// ImagePath returns the value of the "image_path" field in the mutation.
func (m *ChannelMutation) ImagePath() (r string, exists bool) {
	v := m.image_path
	if v == nil {
		return
	}
	return *v, true
}

// OldImagePath returns the old "image_path" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldImagePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImagePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImagePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImagePath: %w", err)
	}
	return oldValue.ImagePath, nil
}

// ResetImagePath resets all changes to the "image_path" field.
func (m *ChannelMutation) ResetImagePath() {
	m.image_path = nil
}

// SetRetention sets the "retention" field.
func (m *ChannelMutation) SetRetention(b bool) {
	m.retention = &b
}

// Retention returns the value of the "retention" field in the mutation.
func (m *ChannelMutation) Retention() (r bool, exists bool) {
	v := m.retention
	if v == nil {
		return
	}
	return *v, true
}

// OldRetention returns the old "retention" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldRetention(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetention is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetention requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetention: %w", err)
	}
	return oldValue.Retention, nil
}

// ResetRetention resets all changes to the "retention" field.
func (m *ChannelMutation) ResetRetention() {
	m.retention = nil
}

// SetRetentionDays sets the "retention_days" field.
func (m *ChannelMutation) SetRetentionDays(i int64) {
	m.retention_days = &i
	m.addretention_days = nil
}

// RetentionDays returns the value of the "retention_days" field in the mutation.
func (m *ChannelMutation) RetentionDays() (r int64, exists bool) {
	v := m.retention_days
	if v == nil {
		return
	}
	return *v, true
}

// OldRetentionDays returns the old "retention_days" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldRetentionDays(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetentionDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetentionDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetentionDays: %w", err)
	}
	return oldValue.RetentionDays, nil
}

// AddRetentionDays adds i to the "retention_days" field.
func (m *ChannelMutation) AddRetentionDays(i int64) {
	if m.addretention_days != nil {
		*m.addretention_days += i
	} else {
		m.addretention_days = &i
	}
}

// AddedRetentionDays returns the value that was added to the "retention_days" field in this mutation.
func (m *ChannelMutation) AddedRetentionDays() (r int64, exists bool) {
	v := m.addretention_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearRetentionDays clears the value of the "retention_days" field.
func (m *ChannelMutation) ClearRetentionDays() {
	m.retention_days = nil
	m.addretention_days = nil
	m.clearedFields[channel.FieldRetentionDays] = struct{}{}
}

// RetentionDaysCleared returns if the "retention_days" field was cleared in this mutation.
func (m *ChannelMutation) RetentionDaysCleared() bool {
	_, ok := m.clearedFields[channel.FieldRetentionDays]
	return ok
}

// ResetRetentionDays resets all changes to the "retention_days" field.
func (m *ChannelMutation) ResetRetentionDays() {
	m.retention_days = nil
	m.addretention_days = nil
	delete(m.clearedFields, channel.FieldRetentionDays)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChannelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChannelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChannelMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChannelMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChannelMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChannelMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddVodIDs adds the "vods" edge to the Vod entity by ids.
func (m *ChannelMutation) AddVodIDs(ids ...uuid.UUID) {
	if m.vods == nil {
		m.vods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.vods[ids[i]] = struct{}{}
	}
}

// ClearVods clears the "vods" edge to the Vod entity.
func (m *ChannelMutation) ClearVods() {
	m.clearedvods = true
}

// VodsCleared reports if the "vods" edge to the Vod entity was cleared.
func (m *ChannelMutation) VodsCleared() bool {
	return m.clearedvods
}

// RemoveVodIDs removes the "vods" edge to the Vod entity by IDs.
func (m *ChannelMutation) RemoveVodIDs(ids ...uuid.UUID) {
	if m.removedvods == nil {
		m.removedvods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.vods, ids[i])
		m.removedvods[ids[i]] = struct{}{}
	}
}

// RemovedVods returns the removed IDs of the "vods" edge to the Vod entity.
func (m *ChannelMutation) RemovedVodsIDs() (ids []uuid.UUID) {
	for id := range m.removedvods {
		ids = append(ids, id)
	}
	return
}

// VodsIDs returns the "vods" edge IDs in the mutation.
func (m *ChannelMutation) VodsIDs() (ids []uuid.UUID) {
	for id := range m.vods {
		ids = append(ids, id)
	}
	return
}

// ResetVods resets all changes to the "vods" edge.
func (m *ChannelMutation) ResetVods() {
	m.vods = nil
	m.clearedvods = false
	m.removedvods = nil
}

// AddLiveIDs adds the "live" edge to the Live entity by ids.
func (m *ChannelMutation) AddLiveIDs(ids ...uuid.UUID) {
	if m.live == nil {
		m.live = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.live[ids[i]] = struct{}{}
	}
}

// ClearLive clears the "live" edge to the Live entity.
func (m *ChannelMutation) ClearLive() {
	m.clearedlive = true
}

// LiveCleared reports if the "live" edge to the Live entity was cleared.
func (m *ChannelMutation) LiveCleared() bool {
	return m.clearedlive
}

// RemoveLiveIDs removes the "live" edge to the Live entity by IDs.
func (m *ChannelMutation) RemoveLiveIDs(ids ...uuid.UUID) {
	if m.removedlive == nil {
		m.removedlive = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.live, ids[i])
		m.removedlive[ids[i]] = struct{}{}
	}
}

// RemovedLive returns the removed IDs of the "live" edge to the Live entity.
func (m *ChannelMutation) RemovedLiveIDs() (ids []uuid.UUID) {
	for id := range m.removedlive {
		ids = append(ids, id)
	}
	return
}

// LiveIDs returns the "live" edge IDs in the mutation.
func (m *ChannelMutation) LiveIDs() (ids []uuid.UUID) {
	for id := range m.live {
		ids = append(ids, id)
	}
	return
}

// ResetLive resets all changes to the "live" edge.
func (m *ChannelMutation) ResetLive() {
	m.live = nil
	m.clearedlive = false
	m.removedlive = nil
}

// Where appends a list predicates to the ChannelMutation builder.
func (m *ChannelMutation) Where(ps ...predicate.Channel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChannelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChannelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Channel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChannelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.ext_id != nil {
		fields = append(fields, channel.FieldExtID)
	}
	if m.name != nil {
		fields = append(fields, channel.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, channel.FieldDisplayName)
	}
	if m.image_path != nil {
		fields = append(fields, channel.FieldImagePath)
	}
	if m.retention != nil {
		fields = append(fields, channel.FieldRetention)
	}
	if m.retention_days != nil {
		fields = append(fields, channel.FieldRetentionDays)
	}
	if m.updated_at != nil {
		fields = append(fields, channel.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, channel.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldExtID:
		return m.ExtID()
	case channel.FieldName:
		return m.Name()
	case channel.FieldDisplayName:
		return m.DisplayName()
	case channel.FieldImagePath:
		return m.ImagePath()
	case channel.FieldRetention:
		return m.Retention()
	case channel.FieldRetentionDays:
		return m.RetentionDays()
	case channel.FieldUpdatedAt:
		return m.UpdatedAt()
	case channel.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldExtID:
		return m.OldExtID(ctx)
	case channel.FieldName:
		return m.OldName(ctx)
	case channel.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case channel.FieldImagePath:
		return m.OldImagePath(ctx)
	case channel.FieldRetention:
		return m.OldRetention(ctx)
	case channel.FieldRetentionDays:
		return m.OldRetentionDays(ctx)
	case channel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case channel.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldExtID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtID(v)
		return nil
	case channel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case channel.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case channel.FieldImagePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImagePath(v)
		return nil
	case channel.FieldRetention:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetention(v)
		return nil
	case channel.FieldRetentionDays:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetentionDays(v)
		return nil
	case channel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case channel.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	var fields []string
	if m.addretention_days != nil {
		fields = append(fields, channel.FieldRetentionDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldRetentionDays:
		return m.AddedRetentionDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case channel.FieldRetentionDays:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetentionDays(v)
		return nil
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(channel.FieldExtID) {
		fields = append(fields, channel.FieldExtID)
	}
	if m.FieldCleared(channel.FieldRetentionDays) {
		fields = append(fields, channel.FieldRetentionDays)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	switch name {
	case channel.FieldExtID:
		m.ClearExtID()
		return nil
	case channel.FieldRetentionDays:
		m.ClearRetentionDays()
		return nil
	}
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldExtID:
		m.ResetExtID()
		return nil
	case channel.FieldName:
		m.ResetName()
		return nil
	case channel.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case channel.FieldImagePath:
		m.ResetImagePath()
		return nil
	case channel.FieldRetention:
		m.ResetRetention()
		return nil
	case channel.FieldRetentionDays:
		m.ResetRetentionDays()
		return nil
	case channel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case channel.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.vods != nil {
		edges = append(edges, channel.EdgeVods)
	}
	if m.live != nil {
		edges = append(edges, channel.EdgeLive)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVods:
		ids := make([]ent.Value, 0, len(m.vods))
		for id := range m.vods {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeLive:
		ids := make([]ent.Value, 0, len(m.live))
		for id := range m.live {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvods != nil {
		edges = append(edges, channel.EdgeVods)
	}
	if m.removedlive != nil {
		edges = append(edges, channel.EdgeLive)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVods:
		ids := make([]ent.Value, 0, len(m.removedvods))
		for id := range m.removedvods {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeLive:
		ids := make([]ent.Value, 0, len(m.removedlive))
		for id := range m.removedlive {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvods {
		edges = append(edges, channel.EdgeVods)
	}
	if m.clearedlive {
		edges = append(edges, channel.EdgeLive)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeVods:
		return m.clearedvods
	case channel.EdgeLive:
		return m.clearedlive
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeVods:
		m.ResetVods()
		return nil
	case channel.EdgeLive:
		m.ResetLive()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// ChapterMutation represents an operation that mutates the Chapter nodes in the graph.
type ChapterMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_type         *string
	title         *string
	start         *int
	addstart      *int
	end           *int
	addend        *int
	clearedFields map[string]struct{}
	vod           *uuid.UUID
	clearedvod    bool
	done          bool
	oldValue      func(context.Context) (*Chapter, error)
	predicates    []predicate.Chapter
}

var _ ent.Mutation = (*ChapterMutation)(nil)

// chapterOption allows management of the mutation configuration using functional options.
type chapterOption func(*ChapterMutation)

// newChapterMutation creates new mutation for the Chapter entity.
func newChapterMutation(c config, op Op, opts ...chapterOption) *ChapterMutation {
	m := &ChapterMutation{
		config:        c,
		op:            op,
		typ:           TypeChapter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChapterID sets the ID field of the mutation.
func withChapterID(id uuid.UUID) chapterOption {
	return func(m *ChapterMutation) {
		var (
			err   error
			once  sync.Once
			value *Chapter
		)
		m.oldValue = func(ctx context.Context) (*Chapter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chapter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChapter sets the old Chapter of the mutation.
func withChapter(node *Chapter) chapterOption {
	return func(m *ChapterMutation) {
		m.oldValue = func(context.Context) (*Chapter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChapterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChapterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chapter entities.
func (m *ChapterMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChapterMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChapterMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chapter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *ChapterMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ChapterMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Chapter entity.
// If the Chapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChapterMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *ChapterMutation) ClearType() {
	m._type = nil
	m.clearedFields[chapter.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *ChapterMutation) TypeCleared() bool {
	_, ok := m.clearedFields[chapter.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *ChapterMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, chapter.FieldType)
}

// SetTitle sets the "title" field.
func (m *ChapterMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ChapterMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Chapter entity.
// If the Chapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChapterMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ChapterMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[chapter.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ChapterMutation) TitleCleared() bool {
	_, ok := m.clearedFields[chapter.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ChapterMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, chapter.FieldTitle)
}

// SetStart sets the "start" field.
func (m *ChapterMutation) SetStart(i int) {
	m.start = &i
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *ChapterMutation) Start() (r int, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Chapter entity.
// If the Chapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChapterMutation) OldStart(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds i to the "start" field.
func (m *ChapterMutation) AddStart(i int) {
	if m.addstart != nil {
		*m.addstart += i
	} else {
		m.addstart = &i
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *ChapterMutation) AddedStart() (r int, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ClearStart clears the value of the "start" field.
func (m *ChapterMutation) ClearStart() {
	m.start = nil
	m.addstart = nil
	m.clearedFields[chapter.FieldStart] = struct{}{}
}

// StartCleared returns if the "start" field was cleared in this mutation.
func (m *ChapterMutation) StartCleared() bool {
	_, ok := m.clearedFields[chapter.FieldStart]
	return ok
}

// ResetStart resets all changes to the "start" field.
func (m *ChapterMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
	delete(m.clearedFields, chapter.FieldStart)
}

// SetEnd sets the "end" field.
func (m *ChapterMutation) SetEnd(i int) {
	m.end = &i
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *ChapterMutation) End() (r int, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Chapter entity.
// If the Chapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChapterMutation) OldEnd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds i to the "end" field.
func (m *ChapterMutation) AddEnd(i int) {
	if m.addend != nil {
		*m.addend += i
	} else {
		m.addend = &i
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *ChapterMutation) AddedEnd() (r int, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ClearEnd clears the value of the "end" field.
func (m *ChapterMutation) ClearEnd() {
	m.end = nil
	m.addend = nil
	m.clearedFields[chapter.FieldEnd] = struct{}{}
}

// EndCleared returns if the "end" field was cleared in this mutation.
func (m *ChapterMutation) EndCleared() bool {
	_, ok := m.clearedFields[chapter.FieldEnd]
	return ok
}

// ResetEnd resets all changes to the "end" field.
func (m *ChapterMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
	delete(m.clearedFields, chapter.FieldEnd)
}

// SetVodID sets the "vod" edge to the Vod entity by id.
func (m *ChapterMutation) SetVodID(id uuid.UUID) {
	m.vod = &id
}

// ClearVod clears the "vod" edge to the Vod entity.
func (m *ChapterMutation) ClearVod() {
	m.clearedvod = true
}

// VodCleared reports if the "vod" edge to the Vod entity was cleared.
func (m *ChapterMutation) VodCleared() bool {
	return m.clearedvod
}

// VodID returns the "vod" edge ID in the mutation.
func (m *ChapterMutation) VodID() (id uuid.UUID, exists bool) {
	if m.vod != nil {
		return *m.vod, true
	}
	return
}

// VodIDs returns the "vod" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VodID instead. It exists only for internal usage by the builders.
func (m *ChapterMutation) VodIDs() (ids []uuid.UUID) {
	if id := m.vod; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVod resets all changes to the "vod" edge.
func (m *ChapterMutation) ResetVod() {
	m.vod = nil
	m.clearedvod = false
}

// Where appends a list predicates to the ChapterMutation builder.
func (m *ChapterMutation) Where(ps ...predicate.Chapter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChapterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChapterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chapter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChapterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChapterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chapter).
func (m *ChapterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChapterMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._type != nil {
		fields = append(fields, chapter.FieldType)
	}
	if m.title != nil {
		fields = append(fields, chapter.FieldTitle)
	}
	if m.start != nil {
		fields = append(fields, chapter.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, chapter.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChapterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chapter.FieldType:
		return m.GetType()
	case chapter.FieldTitle:
		return m.Title()
	case chapter.FieldStart:
		return m.Start()
	case chapter.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChapterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chapter.FieldType:
		return m.OldType(ctx)
	case chapter.FieldTitle:
		return m.OldTitle(ctx)
	case chapter.FieldStart:
		return m.OldStart(ctx)
	case chapter.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown Chapter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChapterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chapter.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case chapter.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case chapter.FieldStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case chapter.FieldEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Chapter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChapterMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, chapter.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, chapter.FieldEnd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChapterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chapter.FieldStart:
		return m.AddedStart()
	case chapter.FieldEnd:
		return m.AddedEnd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChapterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chapter.FieldStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case chapter.FieldEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Chapter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChapterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chapter.FieldType) {
		fields = append(fields, chapter.FieldType)
	}
	if m.FieldCleared(chapter.FieldTitle) {
		fields = append(fields, chapter.FieldTitle)
	}
	if m.FieldCleared(chapter.FieldStart) {
		fields = append(fields, chapter.FieldStart)
	}
	if m.FieldCleared(chapter.FieldEnd) {
		fields = append(fields, chapter.FieldEnd)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChapterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChapterMutation) ClearField(name string) error {
	switch name {
	case chapter.FieldType:
		m.ClearType()
		return nil
	case chapter.FieldTitle:
		m.ClearTitle()
		return nil
	case chapter.FieldStart:
		m.ClearStart()
		return nil
	case chapter.FieldEnd:
		m.ClearEnd()
		return nil
	}
	return fmt.Errorf("unknown Chapter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChapterMutation) ResetField(name string) error {
	switch name {
	case chapter.FieldType:
		m.ResetType()
		return nil
	case chapter.FieldTitle:
		m.ResetTitle()
		return nil
	case chapter.FieldStart:
		m.ResetStart()
		return nil
	case chapter.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown Chapter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChapterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vod != nil {
		edges = append(edges, chapter.EdgeVod)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChapterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chapter.EdgeVod:
		if id := m.vod; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChapterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChapterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChapterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvod {
		edges = append(edges, chapter.EdgeVod)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChapterMutation) EdgeCleared(name string) bool {
	switch name {
	case chapter.EdgeVod:
		return m.clearedvod
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChapterMutation) ClearEdge(name string) error {
	switch name {
	case chapter.EdgeVod:
		m.ClearVod()
		return nil
	}
	return fmt.Errorf("unknown Chapter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChapterMutation) ResetEdge(name string) error {
	switch name {
	case chapter.EdgeVod:
		m.ResetVod()
		return nil
	}
	return fmt.Errorf("unknown Chapter edge %s", name)
}

// LiveMutation represents an operation that mutates the Live nodes in the graph.
type LiveMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	watch_live          *bool
	watch_vod           *bool
	download_archives   *bool
	download_highlights *bool
	download_uploads    *bool
	download_sub_only   *bool
	is_live             *bool
	archive_chat        *bool
	resolution          *string
	last_live           *time.Time
	render_chat         *bool
	video_age           *int64
	addvideo_age        *int64
	updated_at          *time.Time
	created_at          *time.Time
	clearedFields       map[string]struct{}
	channel             *uuid.UUID
	clearedchannel      bool
	categories          map[uuid.UUID]struct{}
	removedcategories   map[uuid.UUID]struct{}
	clearedcategories   bool
	title_regex         map[uuid.UUID]struct{}
	removedtitle_regex  map[uuid.UUID]struct{}
	clearedtitle_regex  bool
	done                bool
	oldValue            func(context.Context) (*Live, error)
	predicates          []predicate.Live
}

var _ ent.Mutation = (*LiveMutation)(nil)

// liveOption allows management of the mutation configuration using functional options.
type liveOption func(*LiveMutation)

// newLiveMutation creates new mutation for the Live entity.
func newLiveMutation(c config, op Op, opts ...liveOption) *LiveMutation {
	m := &LiveMutation{
		config:        c,
		op:            op,
		typ:           TypeLive,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLiveID sets the ID field of the mutation.
func withLiveID(id uuid.UUID) liveOption {
	return func(m *LiveMutation) {
		var (
			err   error
			once  sync.Once
			value *Live
		)
		m.oldValue = func(ctx context.Context) (*Live, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Live.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLive sets the old Live of the mutation.
func withLive(node *Live) liveOption {
	return func(m *LiveMutation) {
		m.oldValue = func(context.Context) (*Live, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LiveMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LiveMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Live entities.
func (m *LiveMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LiveMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LiveMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Live.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWatchLive sets the "watch_live" field.
func (m *LiveMutation) SetWatchLive(b bool) {
	m.watch_live = &b
}

// WatchLive returns the value of the "watch_live" field in the mutation.
func (m *LiveMutation) WatchLive() (r bool, exists bool) {
	v := m.watch_live
	if v == nil {
		return
	}
	return *v, true
}

// OldWatchLive returns the old "watch_live" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldWatchLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWatchLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWatchLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatchLive: %w", err)
	}
	return oldValue.WatchLive, nil
}

// ResetWatchLive resets all changes to the "watch_live" field.
func (m *LiveMutation) ResetWatchLive() {
	m.watch_live = nil
}

// SetWatchVod sets the "watch_vod" field.
func (m *LiveMutation) SetWatchVod(b bool) {
	m.watch_vod = &b
}

// WatchVod returns the value of the "watch_vod" field in the mutation.
func (m *LiveMutation) WatchVod() (r bool, exists bool) {
	v := m.watch_vod
	if v == nil {
		return
	}
	return *v, true
}

// OldWatchVod returns the old "watch_vod" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldWatchVod(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWatchVod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWatchVod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatchVod: %w", err)
	}
	return oldValue.WatchVod, nil
}

// ResetWatchVod resets all changes to the "watch_vod" field.
func (m *LiveMutation) ResetWatchVod() {
	m.watch_vod = nil
}

// SetDownloadArchives sets the "download_archives" field.
func (m *LiveMutation) SetDownloadArchives(b bool) {
	m.download_archives = &b
}

// DownloadArchives returns the value of the "download_archives" field in the mutation.
func (m *LiveMutation) DownloadArchives() (r bool, exists bool) {
	v := m.download_archives
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadArchives returns the old "download_archives" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldDownloadArchives(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadArchives is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadArchives requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadArchives: %w", err)
	}
	return oldValue.DownloadArchives, nil
}

// ResetDownloadArchives resets all changes to the "download_archives" field.
func (m *LiveMutation) ResetDownloadArchives() {
	m.download_archives = nil
}

// SetDownloadHighlights sets the "download_highlights" field.
func (m *LiveMutation) SetDownloadHighlights(b bool) {
	m.download_highlights = &b
}

// DownloadHighlights returns the value of the "download_highlights" field in the mutation.
func (m *LiveMutation) DownloadHighlights() (r bool, exists bool) {
	v := m.download_highlights
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadHighlights returns the old "download_highlights" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldDownloadHighlights(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadHighlights is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadHighlights requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadHighlights: %w", err)
	}
	return oldValue.DownloadHighlights, nil
}

// ResetDownloadHighlights resets all changes to the "download_highlights" field.
func (m *LiveMutation) ResetDownloadHighlights() {
	m.download_highlights = nil
}

// SetDownloadUploads sets the "download_uploads" field.
func (m *LiveMutation) SetDownloadUploads(b bool) {
	m.download_uploads = &b
}

// DownloadUploads returns the value of the "download_uploads" field in the mutation.
func (m *LiveMutation) DownloadUploads() (r bool, exists bool) {
	v := m.download_uploads
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadUploads returns the old "download_uploads" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldDownloadUploads(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadUploads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadUploads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadUploads: %w", err)
	}
	return oldValue.DownloadUploads, nil
}

// ResetDownloadUploads resets all changes to the "download_uploads" field.
func (m *LiveMutation) ResetDownloadUploads() {
	m.download_uploads = nil
}

// SetDownloadSubOnly sets the "download_sub_only" field.
func (m *LiveMutation) SetDownloadSubOnly(b bool) {
	m.download_sub_only = &b
}

// DownloadSubOnly returns the value of the "download_sub_only" field in the mutation.
func (m *LiveMutation) DownloadSubOnly() (r bool, exists bool) {
	v := m.download_sub_only
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadSubOnly returns the old "download_sub_only" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldDownloadSubOnly(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadSubOnly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadSubOnly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadSubOnly: %w", err)
	}
	return oldValue.DownloadSubOnly, nil
}

// ResetDownloadSubOnly resets all changes to the "download_sub_only" field.
func (m *LiveMutation) ResetDownloadSubOnly() {
	m.download_sub_only = nil
}

// SetIsLive sets the "is_live" field.
func (m *LiveMutation) SetIsLive(b bool) {
	m.is_live = &b
}

// IsLive returns the value of the "is_live" field in the mutation.
func (m *LiveMutation) IsLive() (r bool, exists bool) {
	v := m.is_live
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLive returns the old "is_live" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldIsLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLive: %w", err)
	}
	return oldValue.IsLive, nil
}

// ResetIsLive resets all changes to the "is_live" field.
func (m *LiveMutation) ResetIsLive() {
	m.is_live = nil
}

// SetArchiveChat sets the "archive_chat" field.
func (m *LiveMutation) SetArchiveChat(b bool) {
	m.archive_chat = &b
}

// ArchiveChat returns the value of the "archive_chat" field in the mutation.
func (m *LiveMutation) ArchiveChat() (r bool, exists bool) {
	v := m.archive_chat
	if v == nil {
		return
	}
	return *v, true
}

// OldArchiveChat returns the old "archive_chat" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldArchiveChat(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchiveChat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchiveChat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchiveChat: %w", err)
	}
	return oldValue.ArchiveChat, nil
}

// ResetArchiveChat resets all changes to the "archive_chat" field.
func (m *LiveMutation) ResetArchiveChat() {
	m.archive_chat = nil
}

// SetResolution sets the "resolution" field.
func (m *LiveMutation) SetResolution(s string) {
	m.resolution = &s
}

// Resolution returns the value of the "resolution" field in the mutation.
func (m *LiveMutation) Resolution() (r string, exists bool) {
	v := m.resolution
	if v == nil {
		return
	}
	return *v, true
}

// OldResolution returns the old "resolution" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldResolution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolution: %w", err)
	}
	return oldValue.Resolution, nil
}

// ClearResolution clears the value of the "resolution" field.
func (m *LiveMutation) ClearResolution() {
	m.resolution = nil
	m.clearedFields[live.FieldResolution] = struct{}{}
}

// ResolutionCleared returns if the "resolution" field was cleared in this mutation.
func (m *LiveMutation) ResolutionCleared() bool {
	_, ok := m.clearedFields[live.FieldResolution]
	return ok
}

// ResetResolution resets all changes to the "resolution" field.
func (m *LiveMutation) ResetResolution() {
	m.resolution = nil
	delete(m.clearedFields, live.FieldResolution)
}

// SetLastLive sets the "last_live" field.
func (m *LiveMutation) SetLastLive(t time.Time) {
	m.last_live = &t
}

// LastLive returns the value of the "last_live" field in the mutation.
func (m *LiveMutation) LastLive() (r time.Time, exists bool) {
	v := m.last_live
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLive returns the old "last_live" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldLastLive(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLive: %w", err)
	}
	return oldValue.LastLive, nil
}

// ResetLastLive resets all changes to the "last_live" field.
func (m *LiveMutation) ResetLastLive() {
	m.last_live = nil
}

// SetRenderChat sets the "render_chat" field.
func (m *LiveMutation) SetRenderChat(b bool) {
	m.render_chat = &b
}

// RenderChat returns the value of the "render_chat" field in the mutation.
func (m *LiveMutation) RenderChat() (r bool, exists bool) {
	v := m.render_chat
	if v == nil {
		return
	}
	return *v, true
}

// OldRenderChat returns the old "render_chat" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldRenderChat(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenderChat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenderChat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenderChat: %w", err)
	}
	return oldValue.RenderChat, nil
}

// ResetRenderChat resets all changes to the "render_chat" field.
func (m *LiveMutation) ResetRenderChat() {
	m.render_chat = nil
}

// SetVideoAge sets the "video_age" field.
func (m *LiveMutation) SetVideoAge(i int64) {
	m.video_age = &i
	m.addvideo_age = nil
}

// VideoAge returns the value of the "video_age" field in the mutation.
func (m *LiveMutation) VideoAge() (r int64, exists bool) {
	v := m.video_age
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoAge returns the old "video_age" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldVideoAge(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoAge: %w", err)
	}
	return oldValue.VideoAge, nil
}

// AddVideoAge adds i to the "video_age" field.
func (m *LiveMutation) AddVideoAge(i int64) {
	if m.addvideo_age != nil {
		*m.addvideo_age += i
	} else {
		m.addvideo_age = &i
	}
}

// AddedVideoAge returns the value that was added to the "video_age" field in this mutation.
func (m *LiveMutation) AddedVideoAge() (r int64, exists bool) {
	v := m.addvideo_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetVideoAge resets all changes to the "video_age" field.
func (m *LiveMutation) ResetVideoAge() {
	m.video_age = nil
	m.addvideo_age = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LiveMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LiveMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LiveMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LiveMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LiveMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Live entity.
// If the Live object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LiveMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *LiveMutation) SetChannelID(id uuid.UUID) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *LiveMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *LiveMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *LiveMutation) ChannelID() (id uuid.UUID, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *LiveMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *LiveMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// AddCategoryIDs adds the "categories" edge to the LiveCategory entity by ids.
func (m *LiveMutation) AddCategoryIDs(ids ...uuid.UUID) {
	if m.categories == nil {
		m.categories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the LiveCategory entity.
func (m *LiveMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the LiveCategory entity was cleared.
func (m *LiveMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the LiveCategory entity by IDs.
func (m *LiveMutation) RemoveCategoryIDs(ids ...uuid.UUID) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the LiveCategory entity.
func (m *LiveMutation) RemovedCategoriesIDs() (ids []uuid.UUID) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *LiveMutation) CategoriesIDs() (ids []uuid.UUID) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *LiveMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// AddTitleRegexIDs adds the "title_regex" edge to the LiveTitleRegex entity by ids.
func (m *LiveMutation) AddTitleRegexIDs(ids ...uuid.UUID) {
	if m.title_regex == nil {
		m.title_regex = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.title_regex[ids[i]] = struct{}{}
	}
}

// ClearTitleRegex clears the "title_regex" edge to the LiveTitleRegex entity.
func (m *LiveMutation) ClearTitleRegex() {
	m.clearedtitle_regex = true
}

// TitleRegexCleared reports if the "title_regex" edge to the LiveTitleRegex entity was cleared.
func (m *LiveMutation) TitleRegexCleared() bool {
	return m.clearedtitle_regex
}

// RemoveTitleRegexIDs removes the "title_regex" edge to the LiveTitleRegex entity by IDs.
func (m *LiveMutation) RemoveTitleRegexIDs(ids ...uuid.UUID) {
	if m.removedtitle_regex == nil {
		m.removedtitle_regex = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.title_regex, ids[i])
		m.removedtitle_regex[ids[i]] = struct{}{}
	}
}

// RemovedTitleRegex returns the removed IDs of the "title_regex" edge to the LiveTitleRegex entity.
func (m *LiveMutation) RemovedTitleRegexIDs() (ids []uuid.UUID) {
	for id := range m.removedtitle_regex {
		ids = append(ids, id)
	}
	return
}

// TitleRegexIDs returns the "title_regex" edge IDs in the mutation.
func (m *LiveMutation) TitleRegexIDs() (ids []uuid.UUID) {
	for id := range m.title_regex {
		ids = append(ids, id)
	}
	return
}

// ResetTitleRegex resets all changes to the "title_regex" edge.
func (m *LiveMutation) ResetTitleRegex() {
	m.title_regex = nil
	m.clearedtitle_regex = false
	m.removedtitle_regex = nil
}

// Where appends a list predicates to the LiveMutation builder.
func (m *LiveMutation) Where(ps ...predicate.Live) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LiveMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LiveMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Live, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LiveMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LiveMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Live).
func (m *LiveMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LiveMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.watch_live != nil {
		fields = append(fields, live.FieldWatchLive)
	}
	if m.watch_vod != nil {
		fields = append(fields, live.FieldWatchVod)
	}
	if m.download_archives != nil {
		fields = append(fields, live.FieldDownloadArchives)
	}
	if m.download_highlights != nil {
		fields = append(fields, live.FieldDownloadHighlights)
	}
	if m.download_uploads != nil {
		fields = append(fields, live.FieldDownloadUploads)
	}
	if m.download_sub_only != nil {
		fields = append(fields, live.FieldDownloadSubOnly)
	}
	if m.is_live != nil {
		fields = append(fields, live.FieldIsLive)
	}
	if m.archive_chat != nil {
		fields = append(fields, live.FieldArchiveChat)
	}
	if m.resolution != nil {
		fields = append(fields, live.FieldResolution)
	}
	if m.last_live != nil {
		fields = append(fields, live.FieldLastLive)
	}
	if m.render_chat != nil {
		fields = append(fields, live.FieldRenderChat)
	}
	if m.video_age != nil {
		fields = append(fields, live.FieldVideoAge)
	}
	if m.updated_at != nil {
		fields = append(fields, live.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, live.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LiveMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case live.FieldWatchLive:
		return m.WatchLive()
	case live.FieldWatchVod:
		return m.WatchVod()
	case live.FieldDownloadArchives:
		return m.DownloadArchives()
	case live.FieldDownloadHighlights:
		return m.DownloadHighlights()
	case live.FieldDownloadUploads:
		return m.DownloadUploads()
	case live.FieldDownloadSubOnly:
		return m.DownloadSubOnly()
	case live.FieldIsLive:
		return m.IsLive()
	case live.FieldArchiveChat:
		return m.ArchiveChat()
	case live.FieldResolution:
		return m.Resolution()
	case live.FieldLastLive:
		return m.LastLive()
	case live.FieldRenderChat:
		return m.RenderChat()
	case live.FieldVideoAge:
		return m.VideoAge()
	case live.FieldUpdatedAt:
		return m.UpdatedAt()
	case live.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LiveMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case live.FieldWatchLive:
		return m.OldWatchLive(ctx)
	case live.FieldWatchVod:
		return m.OldWatchVod(ctx)
	case live.FieldDownloadArchives:
		return m.OldDownloadArchives(ctx)
	case live.FieldDownloadHighlights:
		return m.OldDownloadHighlights(ctx)
	case live.FieldDownloadUploads:
		return m.OldDownloadUploads(ctx)
	case live.FieldDownloadSubOnly:
		return m.OldDownloadSubOnly(ctx)
	case live.FieldIsLive:
		return m.OldIsLive(ctx)
	case live.FieldArchiveChat:
		return m.OldArchiveChat(ctx)
	case live.FieldResolution:
		return m.OldResolution(ctx)
	case live.FieldLastLive:
		return m.OldLastLive(ctx)
	case live.FieldRenderChat:
		return m.OldRenderChat(ctx)
	case live.FieldVideoAge:
		return m.OldVideoAge(ctx)
	case live.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case live.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Live field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveMutation) SetField(name string, value ent.Value) error {
	switch name {
	case live.FieldWatchLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatchLive(v)
		return nil
	case live.FieldWatchVod:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatchVod(v)
		return nil
	case live.FieldDownloadArchives:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadArchives(v)
		return nil
	case live.FieldDownloadHighlights:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadHighlights(v)
		return nil
	case live.FieldDownloadUploads:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadUploads(v)
		return nil
	case live.FieldDownloadSubOnly:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadSubOnly(v)
		return nil
	case live.FieldIsLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLive(v)
		return nil
	case live.FieldArchiveChat:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchiveChat(v)
		return nil
	case live.FieldResolution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolution(v)
		return nil
	case live.FieldLastLive:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLive(v)
		return nil
	case live.FieldRenderChat:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenderChat(v)
		return nil
	case live.FieldVideoAge:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoAge(v)
		return nil
	case live.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case live.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Live field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LiveMutation) AddedFields() []string {
	var fields []string
	if m.addvideo_age != nil {
		fields = append(fields, live.FieldVideoAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LiveMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case live.FieldVideoAge:
		return m.AddedVideoAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveMutation) AddField(name string, value ent.Value) error {
	switch name {
	case live.FieldVideoAge:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVideoAge(v)
		return nil
	}
	return fmt.Errorf("unknown Live numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LiveMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(live.FieldResolution) {
		fields = append(fields, live.FieldResolution)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LiveMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LiveMutation) ClearField(name string) error {
	switch name {
	case live.FieldResolution:
		m.ClearResolution()
		return nil
	}
	return fmt.Errorf("unknown Live nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LiveMutation) ResetField(name string) error {
	switch name {
	case live.FieldWatchLive:
		m.ResetWatchLive()
		return nil
	case live.FieldWatchVod:
		m.ResetWatchVod()
		return nil
	case live.FieldDownloadArchives:
		m.ResetDownloadArchives()
		return nil
	case live.FieldDownloadHighlights:
		m.ResetDownloadHighlights()
		return nil
	case live.FieldDownloadUploads:
		m.ResetDownloadUploads()
		return nil
	case live.FieldDownloadSubOnly:
		m.ResetDownloadSubOnly()
		return nil
	case live.FieldIsLive:
		m.ResetIsLive()
		return nil
	case live.FieldArchiveChat:
		m.ResetArchiveChat()
		return nil
	case live.FieldResolution:
		m.ResetResolution()
		return nil
	case live.FieldLastLive:
		m.ResetLastLive()
		return nil
	case live.FieldRenderChat:
		m.ResetRenderChat()
		return nil
	case live.FieldVideoAge:
		m.ResetVideoAge()
		return nil
	case live.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case live.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Live field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LiveMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.channel != nil {
		edges = append(edges, live.EdgeChannel)
	}
	if m.categories != nil {
		edges = append(edges, live.EdgeCategories)
	}
	if m.title_regex != nil {
		edges = append(edges, live.EdgeTitleRegex)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LiveMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case live.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case live.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case live.EdgeTitleRegex:
		ids := make([]ent.Value, 0, len(m.title_regex))
		for id := range m.title_regex {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LiveMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcategories != nil {
		edges = append(edges, live.EdgeCategories)
	}
	if m.removedtitle_regex != nil {
		edges = append(edges, live.EdgeTitleRegex)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LiveMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case live.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	case live.EdgeTitleRegex:
		ids := make([]ent.Value, 0, len(m.removedtitle_regex))
		for id := range m.removedtitle_regex {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LiveMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchannel {
		edges = append(edges, live.EdgeChannel)
	}
	if m.clearedcategories {
		edges = append(edges, live.EdgeCategories)
	}
	if m.clearedtitle_regex {
		edges = append(edges, live.EdgeTitleRegex)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LiveMutation) EdgeCleared(name string) bool {
	switch name {
	case live.EdgeChannel:
		return m.clearedchannel
	case live.EdgeCategories:
		return m.clearedcategories
	case live.EdgeTitleRegex:
		return m.clearedtitle_regex
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LiveMutation) ClearEdge(name string) error {
	switch name {
	case live.EdgeChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown Live unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LiveMutation) ResetEdge(name string) error {
	switch name {
	case live.EdgeChannel:
		m.ResetChannel()
		return nil
	case live.EdgeCategories:
		m.ResetCategories()
		return nil
	case live.EdgeTitleRegex:
		m.ResetTitleRegex()
		return nil
	}
	return fmt.Errorf("unknown Live edge %s", name)
}

// LiveCategoryMutation represents an operation that mutates the LiveCategory nodes in the graph.
type LiveCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	live          *uuid.UUID
	clearedlive   bool
	done          bool
	oldValue      func(context.Context) (*LiveCategory, error)
	predicates    []predicate.LiveCategory
}

var _ ent.Mutation = (*LiveCategoryMutation)(nil)

// livecategoryOption allows management of the mutation configuration using functional options.
type livecategoryOption func(*LiveCategoryMutation)

// newLiveCategoryMutation creates new mutation for the LiveCategory entity.
func newLiveCategoryMutation(c config, op Op, opts ...livecategoryOption) *LiveCategoryMutation {
	m := &LiveCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeLiveCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLiveCategoryID sets the ID field of the mutation.
func withLiveCategoryID(id uuid.UUID) livecategoryOption {
	return func(m *LiveCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *LiveCategory
		)
		m.oldValue = func(ctx context.Context) (*LiveCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LiveCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLiveCategory sets the old LiveCategory of the mutation.
func withLiveCategory(node *LiveCategory) livecategoryOption {
	return func(m *LiveCategoryMutation) {
		m.oldValue = func(context.Context) (*LiveCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LiveCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LiveCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LiveCategory entities.
func (m *LiveCategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LiveCategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LiveCategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LiveCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LiveCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LiveCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LiveCategory entity.
// If the LiveCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LiveCategoryMutation) ResetName() {
	m.name = nil
}

// SetLiveID sets the "live" edge to the Live entity by id.
func (m *LiveCategoryMutation) SetLiveID(id uuid.UUID) {
	m.live = &id
}

// ClearLive clears the "live" edge to the Live entity.
func (m *LiveCategoryMutation) ClearLive() {
	m.clearedlive = true
}

// LiveCleared reports if the "live" edge to the Live entity was cleared.
func (m *LiveCategoryMutation) LiveCleared() bool {
	return m.clearedlive
}

// LiveID returns the "live" edge ID in the mutation.
func (m *LiveCategoryMutation) LiveID() (id uuid.UUID, exists bool) {
	if m.live != nil {
		return *m.live, true
	}
	return
}

// LiveIDs returns the "live" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LiveID instead. It exists only for internal usage by the builders.
func (m *LiveCategoryMutation) LiveIDs() (ids []uuid.UUID) {
	if id := m.live; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLive resets all changes to the "live" edge.
func (m *LiveCategoryMutation) ResetLive() {
	m.live = nil
	m.clearedlive = false
}

// Where appends a list predicates to the LiveCategoryMutation builder.
func (m *LiveCategoryMutation) Where(ps ...predicate.LiveCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LiveCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LiveCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LiveCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LiveCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LiveCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LiveCategory).
func (m *LiveCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LiveCategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, livecategory.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LiveCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case livecategory.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LiveCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case livecategory.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown LiveCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case livecategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown LiveCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LiveCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LiveCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LiveCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LiveCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LiveCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LiveCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LiveCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LiveCategoryMutation) ResetField(name string) error {
	switch name {
	case livecategory.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown LiveCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LiveCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.live != nil {
		edges = append(edges, livecategory.EdgeLive)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LiveCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case livecategory.EdgeLive:
		if id := m.live; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LiveCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LiveCategoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LiveCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlive {
		edges = append(edges, livecategory.EdgeLive)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LiveCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case livecategory.EdgeLive:
		return m.clearedlive
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LiveCategoryMutation) ClearEdge(name string) error {
	switch name {
	case livecategory.EdgeLive:
		m.ClearLive()
		return nil
	}
	return fmt.Errorf("unknown LiveCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LiveCategoryMutation) ResetEdge(name string) error {
	switch name {
	case livecategory.EdgeLive:
		m.ResetLive()
		return nil
	}
	return fmt.Errorf("unknown LiveCategory edge %s", name)
}

// LiveTitleRegexMutation represents an operation that mutates the LiveTitleRegex nodes in the graph.
type LiveTitleRegexMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	negative        *bool
	regex           *string
	apply_to_videos *bool
	clearedFields   map[string]struct{}
	live            *uuid.UUID
	clearedlive     bool
	done            bool
	oldValue        func(context.Context) (*LiveTitleRegex, error)
	predicates      []predicate.LiveTitleRegex
}

var _ ent.Mutation = (*LiveTitleRegexMutation)(nil)

// livetitleregexOption allows management of the mutation configuration using functional options.
type livetitleregexOption func(*LiveTitleRegexMutation)

// newLiveTitleRegexMutation creates new mutation for the LiveTitleRegex entity.
func newLiveTitleRegexMutation(c config, op Op, opts ...livetitleregexOption) *LiveTitleRegexMutation {
	m := &LiveTitleRegexMutation{
		config:        c,
		op:            op,
		typ:           TypeLiveTitleRegex,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLiveTitleRegexID sets the ID field of the mutation.
func withLiveTitleRegexID(id uuid.UUID) livetitleregexOption {
	return func(m *LiveTitleRegexMutation) {
		var (
			err   error
			once  sync.Once
			value *LiveTitleRegex
		)
		m.oldValue = func(ctx context.Context) (*LiveTitleRegex, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LiveTitleRegex.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLiveTitleRegex sets the old LiveTitleRegex of the mutation.
func withLiveTitleRegex(node *LiveTitleRegex) livetitleregexOption {
	return func(m *LiveTitleRegexMutation) {
		m.oldValue = func(context.Context) (*LiveTitleRegex, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LiveTitleRegexMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LiveTitleRegexMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LiveTitleRegex entities.
func (m *LiveTitleRegexMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LiveTitleRegexMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LiveTitleRegexMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LiveTitleRegex.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNegative sets the "negative" field.
func (m *LiveTitleRegexMutation) SetNegative(b bool) {
	m.negative = &b
}

// Negative returns the value of the "negative" field in the mutation.
func (m *LiveTitleRegexMutation) Negative() (r bool, exists bool) {
	v := m.negative
	if v == nil {
		return
	}
	return *v, true
}

// OldNegative returns the old "negative" field's value of the LiveTitleRegex entity.
// If the LiveTitleRegex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveTitleRegexMutation) OldNegative(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNegative is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNegative requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNegative: %w", err)
	}
	return oldValue.Negative, nil
}

// ResetNegative resets all changes to the "negative" field.
func (m *LiveTitleRegexMutation) ResetNegative() {
	m.negative = nil
}

// SetRegex sets the "regex" field.
func (m *LiveTitleRegexMutation) SetRegex(s string) {
	m.regex = &s
}

// Regex returns the value of the "regex" field in the mutation.
func (m *LiveTitleRegexMutation) Regex() (r string, exists bool) {
	v := m.regex
	if v == nil {
		return
	}
	return *v, true
}

// OldRegex returns the old "regex" field's value of the LiveTitleRegex entity.
// If the LiveTitleRegex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveTitleRegexMutation) OldRegex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegex: %w", err)
	}
	return oldValue.Regex, nil
}

// ResetRegex resets all changes to the "regex" field.
func (m *LiveTitleRegexMutation) ResetRegex() {
	m.regex = nil
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (m *LiveTitleRegexMutation) SetApplyToVideos(b bool) {
	m.apply_to_videos = &b
}

// ApplyToVideos returns the value of the "apply_to_videos" field in the mutation.
func (m *LiveTitleRegexMutation) ApplyToVideos() (r bool, exists bool) {
	v := m.apply_to_videos
	if v == nil {
		return
	}
	return *v, true
}

// OldApplyToVideos returns the old "apply_to_videos" field's value of the LiveTitleRegex entity.
// If the LiveTitleRegex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveTitleRegexMutation) OldApplyToVideos(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplyToVideos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplyToVideos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplyToVideos: %w", err)
	}
	return oldValue.ApplyToVideos, nil
}

// ResetApplyToVideos resets all changes to the "apply_to_videos" field.
func (m *LiveTitleRegexMutation) ResetApplyToVideos() {
	m.apply_to_videos = nil
}

// SetLiveID sets the "live" edge to the Live entity by id.
func (m *LiveTitleRegexMutation) SetLiveID(id uuid.UUID) {
	m.live = &id
}

// ClearLive clears the "live" edge to the Live entity.
func (m *LiveTitleRegexMutation) ClearLive() {
	m.clearedlive = true
}

// LiveCleared reports if the "live" edge to the Live entity was cleared.
func (m *LiveTitleRegexMutation) LiveCleared() bool {
	return m.clearedlive
}

// LiveID returns the "live" edge ID in the mutation.
func (m *LiveTitleRegexMutation) LiveID() (id uuid.UUID, exists bool) {
	if m.live != nil {
		return *m.live, true
	}
	return
}

// LiveIDs returns the "live" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LiveID instead. It exists only for internal usage by the builders.
func (m *LiveTitleRegexMutation) LiveIDs() (ids []uuid.UUID) {
	if id := m.live; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLive resets all changes to the "live" edge.
func (m *LiveTitleRegexMutation) ResetLive() {
	m.live = nil
	m.clearedlive = false
}

// Where appends a list predicates to the LiveTitleRegexMutation builder.
func (m *LiveTitleRegexMutation) Where(ps ...predicate.LiveTitleRegex) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LiveTitleRegexMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LiveTitleRegexMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LiveTitleRegex, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LiveTitleRegexMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LiveTitleRegexMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LiveTitleRegex).
func (m *LiveTitleRegexMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LiveTitleRegexMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.negative != nil {
		fields = append(fields, livetitleregex.FieldNegative)
	}
	if m.regex != nil {
		fields = append(fields, livetitleregex.FieldRegex)
	}
	if m.apply_to_videos != nil {
		fields = append(fields, livetitleregex.FieldApplyToVideos)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LiveTitleRegexMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case livetitleregex.FieldNegative:
		return m.Negative()
	case livetitleregex.FieldRegex:
		return m.Regex()
	case livetitleregex.FieldApplyToVideos:
		return m.ApplyToVideos()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LiveTitleRegexMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case livetitleregex.FieldNegative:
		return m.OldNegative(ctx)
	case livetitleregex.FieldRegex:
		return m.OldRegex(ctx)
	case livetitleregex.FieldApplyToVideos:
		return m.OldApplyToVideos(ctx)
	}
	return nil, fmt.Errorf("unknown LiveTitleRegex field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveTitleRegexMutation) SetField(name string, value ent.Value) error {
	switch name {
	case livetitleregex.FieldNegative:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNegative(v)
		return nil
	case livetitleregex.FieldRegex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegex(v)
		return nil
	case livetitleregex.FieldApplyToVideos:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplyToVideos(v)
		return nil
	}
	return fmt.Errorf("unknown LiveTitleRegex field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LiveTitleRegexMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LiveTitleRegexMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveTitleRegexMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LiveTitleRegex numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LiveTitleRegexMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LiveTitleRegexMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LiveTitleRegexMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LiveTitleRegex nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LiveTitleRegexMutation) ResetField(name string) error {
	switch name {
	case livetitleregex.FieldNegative:
		m.ResetNegative()
		return nil
	case livetitleregex.FieldRegex:
		m.ResetRegex()
		return nil
	case livetitleregex.FieldApplyToVideos:
		m.ResetApplyToVideos()
		return nil
	}
	return fmt.Errorf("unknown LiveTitleRegex field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LiveTitleRegexMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.live != nil {
		edges = append(edges, livetitleregex.EdgeLive)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LiveTitleRegexMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case livetitleregex.EdgeLive:
		if id := m.live; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LiveTitleRegexMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LiveTitleRegexMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LiveTitleRegexMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlive {
		edges = append(edges, livetitleregex.EdgeLive)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LiveTitleRegexMutation) EdgeCleared(name string) bool {
	switch name {
	case livetitleregex.EdgeLive:
		return m.clearedlive
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LiveTitleRegexMutation) ClearEdge(name string) error {
	switch name {
	case livetitleregex.EdgeLive:
		m.ClearLive()
		return nil
	}
	return fmt.Errorf("unknown LiveTitleRegex unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LiveTitleRegexMutation) ResetEdge(name string) error {
	switch name {
	case livetitleregex.EdgeLive:
		m.ResetLive()
		return nil
	}
	return fmt.Errorf("unknown LiveTitleRegex edge %s", name)
}

// MutedSegmentMutation represents an operation that mutates the MutedSegment nodes in the graph.
type MutedSegmentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	start         *int
	addstart      *int
	end           *int
	addend        *int
	clearedFields map[string]struct{}
	vod           *uuid.UUID
	clearedvod    bool
	done          bool
	oldValue      func(context.Context) (*MutedSegment, error)
	predicates    []predicate.MutedSegment
}

var _ ent.Mutation = (*MutedSegmentMutation)(nil)

// mutedsegmentOption allows management of the mutation configuration using functional options.
type mutedsegmentOption func(*MutedSegmentMutation)

// newMutedSegmentMutation creates new mutation for the MutedSegment entity.
func newMutedSegmentMutation(c config, op Op, opts ...mutedsegmentOption) *MutedSegmentMutation {
	m := &MutedSegmentMutation{
		config:        c,
		op:            op,
		typ:           TypeMutedSegment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMutedSegmentID sets the ID field of the mutation.
func withMutedSegmentID(id uuid.UUID) mutedsegmentOption {
	return func(m *MutedSegmentMutation) {
		var (
			err   error
			once  sync.Once
			value *MutedSegment
		)
		m.oldValue = func(ctx context.Context) (*MutedSegment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MutedSegment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMutedSegment sets the old MutedSegment of the mutation.
func withMutedSegment(node *MutedSegment) mutedsegmentOption {
	return func(m *MutedSegmentMutation) {
		m.oldValue = func(context.Context) (*MutedSegment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MutedSegmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MutedSegmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MutedSegment entities.
func (m *MutedSegmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MutedSegmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MutedSegmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MutedSegment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStart sets the "start" field.
func (m *MutedSegmentMutation) SetStart(i int) {
	m.start = &i
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *MutedSegmentMutation) Start() (r int, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the MutedSegment entity.
// If the MutedSegment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MutedSegmentMutation) OldStart(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds i to the "start" field.
func (m *MutedSegmentMutation) AddStart(i int) {
	if m.addstart != nil {
		*m.addstart += i
	} else {
		m.addstart = &i
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *MutedSegmentMutation) AddedStart() (r int, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *MutedSegmentMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetEnd sets the "end" field.
func (m *MutedSegmentMutation) SetEnd(i int) {
	m.end = &i
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *MutedSegmentMutation) End() (r int, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the MutedSegment entity.
// If the MutedSegment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MutedSegmentMutation) OldEnd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds i to the "end" field.
func (m *MutedSegmentMutation) AddEnd(i int) {
	if m.addend != nil {
		*m.addend += i
	} else {
		m.addend = &i
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *MutedSegmentMutation) AddedEnd() (r int, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnd resets all changes to the "end" field.
func (m *MutedSegmentMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
}

// SetVodID sets the "vod" edge to the Vod entity by id.
func (m *MutedSegmentMutation) SetVodID(id uuid.UUID) {
	m.vod = &id
}

// ClearVod clears the "vod" edge to the Vod entity.
func (m *MutedSegmentMutation) ClearVod() {
	m.clearedvod = true
}

// VodCleared reports if the "vod" edge to the Vod entity was cleared.
func (m *MutedSegmentMutation) VodCleared() bool {
	return m.clearedvod
}

// VodID returns the "vod" edge ID in the mutation.
func (m *MutedSegmentMutation) VodID() (id uuid.UUID, exists bool) {
	if m.vod != nil {
		return *m.vod, true
	}
	return
}

// VodIDs returns the "vod" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VodID instead. It exists only for internal usage by the builders.
func (m *MutedSegmentMutation) VodIDs() (ids []uuid.UUID) {
	if id := m.vod; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVod resets all changes to the "vod" edge.
func (m *MutedSegmentMutation) ResetVod() {
	m.vod = nil
	m.clearedvod = false
}

// Where appends a list predicates to the MutedSegmentMutation builder.
func (m *MutedSegmentMutation) Where(ps ...predicate.MutedSegment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MutedSegmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MutedSegmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MutedSegment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MutedSegmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MutedSegmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MutedSegment).
func (m *MutedSegmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MutedSegmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.start != nil {
		fields = append(fields, mutedsegment.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, mutedsegment.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MutedSegmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mutedsegment.FieldStart:
		return m.Start()
	case mutedsegment.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MutedSegmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mutedsegment.FieldStart:
		return m.OldStart(ctx)
	case mutedsegment.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown MutedSegment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MutedSegmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mutedsegment.FieldStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case mutedsegment.FieldEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown MutedSegment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MutedSegmentMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, mutedsegment.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, mutedsegment.FieldEnd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MutedSegmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mutedsegment.FieldStart:
		return m.AddedStart()
	case mutedsegment.FieldEnd:
		return m.AddedEnd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MutedSegmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mutedsegment.FieldStart:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case mutedsegment.FieldEnd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	}
	return fmt.Errorf("unknown MutedSegment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MutedSegmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MutedSegmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MutedSegmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MutedSegment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MutedSegmentMutation) ResetField(name string) error {
	switch name {
	case mutedsegment.FieldStart:
		m.ResetStart()
		return nil
	case mutedsegment.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown MutedSegment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MutedSegmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vod != nil {
		edges = append(edges, mutedsegment.EdgeVod)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MutedSegmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mutedsegment.EdgeVod:
		if id := m.vod; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MutedSegmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MutedSegmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MutedSegmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvod {
		edges = append(edges, mutedsegment.EdgeVod)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MutedSegmentMutation) EdgeCleared(name string) bool {
	switch name {
	case mutedsegment.EdgeVod:
		return m.clearedvod
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MutedSegmentMutation) ClearEdge(name string) error {
	switch name {
	case mutedsegment.EdgeVod:
		m.ClearVod()
		return nil
	}
	return fmt.Errorf("unknown MutedSegment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MutedSegmentMutation) ResetEdge(name string) error {
	switch name {
	case mutedsegment.EdgeVod:
		m.ResetVod()
		return nil
	}
	return fmt.Errorf("unknown MutedSegment edge %s", name)
}

// PlaybackMutation represents an operation that mutates the Playback nodes in the graph.
type PlaybackMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	vod_id        *uuid.UUID
	user_id       *uuid.UUID
	time          *int
	addtime       *int
	status        *utils.PlaybackStatus
	updated_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Playback, error)
	predicates    []predicate.Playback
}

var _ ent.Mutation = (*PlaybackMutation)(nil)

// playbackOption allows management of the mutation configuration using functional options.
type playbackOption func(*PlaybackMutation)

// newPlaybackMutation creates new mutation for the Playback entity.
func newPlaybackMutation(c config, op Op, opts ...playbackOption) *PlaybackMutation {
	m := &PlaybackMutation{
		config:        c,
		op:            op,
		typ:           TypePlayback,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaybackID sets the ID field of the mutation.
func withPlaybackID(id uuid.UUID) playbackOption {
	return func(m *PlaybackMutation) {
		var (
			err   error
			once  sync.Once
			value *Playback
		)
		m.oldValue = func(ctx context.Context) (*Playback, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playback.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayback sets the old Playback of the mutation.
func withPlayback(node *Playback) playbackOption {
	return func(m *PlaybackMutation) {
		m.oldValue = func(context.Context) (*Playback, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaybackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaybackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Playback entities.
func (m *PlaybackMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaybackMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaybackMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Playback.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVodID sets the "vod_id" field.
func (m *PlaybackMutation) SetVodID(u uuid.UUID) {
	m.vod_id = &u
}

// VodID returns the value of the "vod_id" field in the mutation.
func (m *PlaybackMutation) VodID() (r uuid.UUID, exists bool) {
	v := m.vod_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVodID returns the old "vod_id" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldVodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVodID: %w", err)
	}
	return oldValue.VodID, nil
}

// ResetVodID resets all changes to the "vod_id" field.
func (m *PlaybackMutation) ResetVodID() {
	m.vod_id = nil
}

// SetUserID sets the "user_id" field.
func (m *PlaybackMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PlaybackMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PlaybackMutation) ResetUserID() {
	m.user_id = nil
}

// SetTime sets the "time" field.
func (m *PlaybackMutation) SetTime(i int) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *PlaybackMutation) Time() (r int, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *PlaybackMutation) AddTime(i int) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *PlaybackMutation) AddedTime() (r int, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *PlaybackMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetStatus sets the "status" field.
func (m *PlaybackMutation) SetStatus(us utils.PlaybackStatus) {
	m.status = &us
}

// Status returns the value of the "status" field in the mutation.
func (m *PlaybackMutation) Status() (r utils.PlaybackStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldStatus(ctx context.Context) (v utils.PlaybackStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *PlaybackMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[playback.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *PlaybackMutation) StatusCleared() bool {
	_, ok := m.clearedFields[playback.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *PlaybackMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, playback.FieldStatus)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlaybackMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlaybackMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlaybackMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PlaybackMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlaybackMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Playback entity.
// If the Playback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaybackMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlaybackMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the PlaybackMutation builder.
func (m *PlaybackMutation) Where(ps ...predicate.Playback) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlaybackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlaybackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Playback, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlaybackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlaybackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Playback).
func (m *PlaybackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaybackMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.vod_id != nil {
		fields = append(fields, playback.FieldVodID)
	}
	if m.user_id != nil {
		fields = append(fields, playback.FieldUserID)
	}
	if m.time != nil {
		fields = append(fields, playback.FieldTime)
	}
	if m.status != nil {
		fields = append(fields, playback.FieldStatus)
	}
	if m.updated_at != nil {
		fields = append(fields, playback.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, playback.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaybackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playback.FieldVodID:
		return m.VodID()
	case playback.FieldUserID:
		return m.UserID()
	case playback.FieldTime:
		return m.Time()
	case playback.FieldStatus:
		return m.Status()
	case playback.FieldUpdatedAt:
		return m.UpdatedAt()
	case playback.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaybackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playback.FieldVodID:
		return m.OldVodID(ctx)
	case playback.FieldUserID:
		return m.OldUserID(ctx)
	case playback.FieldTime:
		return m.OldTime(ctx)
	case playback.FieldStatus:
		return m.OldStatus(ctx)
	case playback.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case playback.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Playback field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaybackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playback.FieldVodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVodID(v)
		return nil
	case playback.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case playback.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case playback.FieldStatus:
		v, ok := value.(utils.PlaybackStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case playback.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case playback.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Playback field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaybackMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, playback.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaybackMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case playback.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaybackMutation) AddField(name string, value ent.Value) error {
	switch name {
	case playback.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Playback numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaybackMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playback.FieldStatus) {
		fields = append(fields, playback.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaybackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaybackMutation) ClearField(name string) error {
	switch name {
	case playback.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown Playback nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaybackMutation) ResetField(name string) error {
	switch name {
	case playback.FieldVodID:
		m.ResetVodID()
		return nil
	case playback.FieldUserID:
		m.ResetUserID()
		return nil
	case playback.FieldTime:
		m.ResetTime()
		return nil
	case playback.FieldStatus:
		m.ResetStatus()
		return nil
	case playback.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case playback.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Playback field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaybackMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaybackMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaybackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaybackMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaybackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaybackMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaybackMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Playback unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaybackMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Playback edge %s", name)
}

// PlaylistMutation represents an operation that mutates the Playlist nodes in the graph.
type PlaylistMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	name           *string
	description    *string
	thumbnail_path *string
	updated_at     *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	vods           map[uuid.UUID]struct{}
	removedvods    map[uuid.UUID]struct{}
	clearedvods    bool
	done           bool
	oldValue       func(context.Context) (*Playlist, error)
	predicates     []predicate.Playlist
}

var _ ent.Mutation = (*PlaylistMutation)(nil)

// playlistOption allows management of the mutation configuration using functional options.
type playlistOption func(*PlaylistMutation)

// newPlaylistMutation creates new mutation for the Playlist entity.
func newPlaylistMutation(c config, op Op, opts ...playlistOption) *PlaylistMutation {
	m := &PlaylistMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistID sets the ID field of the mutation.
func withPlaylistID(id uuid.UUID) playlistOption {
	return func(m *PlaylistMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlist
		)
		m.oldValue = func(ctx context.Context) (*Playlist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylist sets the old Playlist of the mutation.
func withPlaylist(node *Playlist) playlistOption {
	return func(m *PlaylistMutation) {
		m.oldValue = func(context.Context) (*Playlist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Playlist entities.
func (m *PlaylistMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaylistMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaylistMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Playlist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlaylistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlaylistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlaylistMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PlaylistMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PlaylistMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PlaylistMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[playlist.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PlaylistMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[playlist.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PlaylistMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, playlist.FieldDescription)
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (m *PlaylistMutation) SetThumbnailPath(s string) {
	m.thumbnail_path = &s
}

// ThumbnailPath returns the value of the "thumbnail_path" field in the mutation.
func (m *PlaylistMutation) ThumbnailPath() (r string, exists bool) {
	v := m.thumbnail_path
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailPath returns the old "thumbnail_path" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldThumbnailPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailPath: %w", err)
	}
	return oldValue.ThumbnailPath, nil
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (m *PlaylistMutation) ClearThumbnailPath() {
	m.thumbnail_path = nil
	m.clearedFields[playlist.FieldThumbnailPath] = struct{}{}
}

// ThumbnailPathCleared returns if the "thumbnail_path" field was cleared in this mutation.
func (m *PlaylistMutation) ThumbnailPathCleared() bool {
	_, ok := m.clearedFields[playlist.FieldThumbnailPath]
	return ok
}

// ResetThumbnailPath resets all changes to the "thumbnail_path" field.
func (m *PlaylistMutation) ResetThumbnailPath() {
	m.thumbnail_path = nil
	delete(m.clearedFields, playlist.FieldThumbnailPath)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlaylistMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlaylistMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlaylistMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PlaylistMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlaylistMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlaylistMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddVodIDs adds the "vods" edge to the Vod entity by ids.
func (m *PlaylistMutation) AddVodIDs(ids ...uuid.UUID) {
	if m.vods == nil {
		m.vods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.vods[ids[i]] = struct{}{}
	}
}

// ClearVods clears the "vods" edge to the Vod entity.
func (m *PlaylistMutation) ClearVods() {
	m.clearedvods = true
}

// VodsCleared reports if the "vods" edge to the Vod entity was cleared.
func (m *PlaylistMutation) VodsCleared() bool {
	return m.clearedvods
}

// RemoveVodIDs removes the "vods" edge to the Vod entity by IDs.
func (m *PlaylistMutation) RemoveVodIDs(ids ...uuid.UUID) {
	if m.removedvods == nil {
		m.removedvods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.vods, ids[i])
		m.removedvods[ids[i]] = struct{}{}
	}
}

// RemovedVods returns the removed IDs of the "vods" edge to the Vod entity.
func (m *PlaylistMutation) RemovedVodsIDs() (ids []uuid.UUID) {
	for id := range m.removedvods {
		ids = append(ids, id)
	}
	return
}

// VodsIDs returns the "vods" edge IDs in the mutation.
func (m *PlaylistMutation) VodsIDs() (ids []uuid.UUID) {
	for id := range m.vods {
		ids = append(ids, id)
	}
	return
}

// ResetVods resets all changes to the "vods" edge.
func (m *PlaylistMutation) ResetVods() {
	m.vods = nil
	m.clearedvods = false
	m.removedvods = nil
}

// Where appends a list predicates to the PlaylistMutation builder.
func (m *PlaylistMutation) Where(ps ...predicate.Playlist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlaylistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlaylistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Playlist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlaylistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlaylistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Playlist).
func (m *PlaylistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, playlist.FieldName)
	}
	if m.description != nil {
		fields = append(fields, playlist.FieldDescription)
	}
	if m.thumbnail_path != nil {
		fields = append(fields, playlist.FieldThumbnailPath)
	}
	if m.updated_at != nil {
		fields = append(fields, playlist.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, playlist.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldName:
		return m.Name()
	case playlist.FieldDescription:
		return m.Description()
	case playlist.FieldThumbnailPath:
		return m.ThumbnailPath()
	case playlist.FieldUpdatedAt:
		return m.UpdatedAt()
	case playlist.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlist.FieldName:
		return m.OldName(ctx)
	case playlist.FieldDescription:
		return m.OldDescription(ctx)
	case playlist.FieldThumbnailPath:
		return m.OldThumbnailPath(ctx)
	case playlist.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case playlist.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Playlist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case playlist.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case playlist.FieldThumbnailPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailPath(v)
		return nil
	case playlist.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case playlist.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playlist.FieldDescription) {
		fields = append(fields, playlist.FieldDescription)
	}
	if m.FieldCleared(playlist.FieldThumbnailPath) {
		fields = append(fields, playlist.FieldThumbnailPath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistMutation) ClearField(name string) error {
	switch name {
	case playlist.FieldDescription:
		m.ClearDescription()
		return nil
	case playlist.FieldThumbnailPath:
		m.ClearThumbnailPath()
		return nil
	}
	return fmt.Errorf("unknown Playlist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistMutation) ResetField(name string) error {
	switch name {
	case playlist.FieldName:
		m.ResetName()
		return nil
	case playlist.FieldDescription:
		m.ResetDescription()
		return nil
	case playlist.FieldThumbnailPath:
		m.ResetThumbnailPath()
		return nil
	case playlist.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case playlist.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vods != nil {
		edges = append(edges, playlist.EdgeVods)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeVods:
		ids := make([]ent.Value, 0, len(m.vods))
		for id := range m.vods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvods != nil {
		edges = append(edges, playlist.EdgeVods)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeVods:
		ids := make([]ent.Value, 0, len(m.removedvods))
		for id := range m.removedvods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvods {
		edges = append(edges, playlist.EdgeVods)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistMutation) EdgeCleared(name string) bool {
	switch name {
	case playlist.EdgeVods:
		return m.clearedvods
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistMutation) ResetEdge(name string) error {
	switch name {
	case playlist.EdgeVods:
		m.ResetVods()
		return nil
	}
	return fmt.Errorf("unknown Playlist edge %s", name)
}

// QueueMutation represents an operation that mutates the Queue nodes in the graph.
type QueueMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	live_archive                *bool
	on_hold                     *bool
	video_processing            *bool
	chat_processing             *bool
	processing                  *bool
	task_vod_create_folder      *utils.TaskStatus
	task_vod_download_thumbnail *utils.TaskStatus
	task_vod_save_info          *utils.TaskStatus
	task_video_download         *utils.TaskStatus
	task_video_convert          *utils.TaskStatus
	task_video_move             *utils.TaskStatus
	task_chat_download          *utils.TaskStatus
	task_chat_convert           *utils.TaskStatus
	task_chat_render            *utils.TaskStatus
	task_chat_move              *utils.TaskStatus
	chat_start                  *time.Time
	render_chat                 *bool
	workflow_id                 *string
	workflow_run_id             *string
	updated_at                  *time.Time
	created_at                  *time.Time
	clearedFields               map[string]struct{}
	vod                         *uuid.UUID
	clearedvod                  bool
	done                        bool
	oldValue                    func(context.Context) (*Queue, error)
	predicates                  []predicate.Queue
}

var _ ent.Mutation = (*QueueMutation)(nil)

// queueOption allows management of the mutation configuration using functional options.
type queueOption func(*QueueMutation)

// newQueueMutation creates new mutation for the Queue entity.
func newQueueMutation(c config, op Op, opts ...queueOption) *QueueMutation {
	m := &QueueMutation{
		config:        c,
		op:            op,
		typ:           TypeQueue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueueID sets the ID field of the mutation.
func withQueueID(id uuid.UUID) queueOption {
	return func(m *QueueMutation) {
		var (
			err   error
			once  sync.Once
			value *Queue
		)
		m.oldValue = func(ctx context.Context) (*Queue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Queue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueue sets the old Queue of the mutation.
func withQueue(node *Queue) queueOption {
	return func(m *QueueMutation) {
		m.oldValue = func(context.Context) (*Queue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Queue entities.
func (m *QueueMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QueueMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QueueMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Queue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLiveArchive sets the "live_archive" field.
func (m *QueueMutation) SetLiveArchive(b bool) {
	m.live_archive = &b
}

// LiveArchive returns the value of the "live_archive" field in the mutation.
func (m *QueueMutation) LiveArchive() (r bool, exists bool) {
	v := m.live_archive
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveArchive returns the old "live_archive" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldLiveArchive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveArchive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveArchive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveArchive: %w", err)
	}
	return oldValue.LiveArchive, nil
}

// ResetLiveArchive resets all changes to the "live_archive" field.
func (m *QueueMutation) ResetLiveArchive() {
	m.live_archive = nil
}

// SetOnHold sets the "on_hold" field.
func (m *QueueMutation) SetOnHold(b bool) {
	m.on_hold = &b
}

// OnHold returns the value of the "on_hold" field in the mutation.
func (m *QueueMutation) OnHold() (r bool, exists bool) {
	v := m.on_hold
	if v == nil {
		return
	}
	return *v, true
}

// OldOnHold returns the old "on_hold" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldOnHold(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnHold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnHold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnHold: %w", err)
	}
	return oldValue.OnHold, nil
}

// ResetOnHold resets all changes to the "on_hold" field.
func (m *QueueMutation) ResetOnHold() {
	m.on_hold = nil
}

// SetVideoProcessing sets the "video_processing" field.
func (m *QueueMutation) SetVideoProcessing(b bool) {
	m.video_processing = &b
}

// VideoProcessing returns the value of the "video_processing" field in the mutation.
func (m *QueueMutation) VideoProcessing() (r bool, exists bool) {
	v := m.video_processing
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoProcessing returns the old "video_processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldVideoProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoProcessing: %w", err)
	}
	return oldValue.VideoProcessing, nil
}

// ResetVideoProcessing resets all changes to the "video_processing" field.
func (m *QueueMutation) ResetVideoProcessing() {
	m.video_processing = nil
}

// SetChatProcessing sets the "chat_processing" field.
func (m *QueueMutation) SetChatProcessing(b bool) {
	m.chat_processing = &b
}

// ChatProcessing returns the value of the "chat_processing" field in the mutation.
func (m *QueueMutation) ChatProcessing() (r bool, exists bool) {
	v := m.chat_processing
	if v == nil {
		return
	}
	return *v, true
}

// OldChatProcessing returns the old "chat_processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldChatProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatProcessing: %w", err)
	}
	return oldValue.ChatProcessing, nil
}

// ResetChatProcessing resets all changes to the "chat_processing" field.
func (m *QueueMutation) ResetChatProcessing() {
	m.chat_processing = nil
}

// SetProcessing sets the "processing" field.
func (m *QueueMutation) SetProcessing(b bool) {
	m.processing = &b
}

// Processing returns the value of the "processing" field in the mutation.
func (m *QueueMutation) Processing() (r bool, exists bool) {
	v := m.processing
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessing returns the old "processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessing: %w", err)
	}
	return oldValue.Processing, nil
}

// ResetProcessing resets all changes to the "processing" field.
func (m *QueueMutation) ResetProcessing() {
	m.processing = nil
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (m *QueueMutation) SetTaskVodCreateFolder(us utils.TaskStatus) {
	m.task_vod_create_folder = &us
}

// TaskVodCreateFolder returns the value of the "task_vod_create_folder" field in the mutation.
func (m *QueueMutation) TaskVodCreateFolder() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_create_folder
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodCreateFolder returns the old "task_vod_create_folder" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodCreateFolder(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodCreateFolder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodCreateFolder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodCreateFolder: %w", err)
	}
	return oldValue.TaskVodCreateFolder, nil
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (m *QueueMutation) ClearTaskVodCreateFolder() {
	m.task_vod_create_folder = nil
	m.clearedFields[queue.FieldTaskVodCreateFolder] = struct{}{}
}

// TaskVodCreateFolderCleared returns if the "task_vod_create_folder" field was cleared in this mutation.
func (m *QueueMutation) TaskVodCreateFolderCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodCreateFolder]
	return ok
}

// ResetTaskVodCreateFolder resets all changes to the "task_vod_create_folder" field.
func (m *QueueMutation) ResetTaskVodCreateFolder() {
	m.task_vod_create_folder = nil
	delete(m.clearedFields, queue.FieldTaskVodCreateFolder)
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (m *QueueMutation) SetTaskVodDownloadThumbnail(us utils.TaskStatus) {
	m.task_vod_download_thumbnail = &us
}

// TaskVodDownloadThumbnail returns the value of the "task_vod_download_thumbnail" field in the mutation.
func (m *QueueMutation) TaskVodDownloadThumbnail() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_download_thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodDownloadThumbnail returns the old "task_vod_download_thumbnail" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodDownloadThumbnail(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodDownloadThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodDownloadThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodDownloadThumbnail: %w", err)
	}
	return oldValue.TaskVodDownloadThumbnail, nil
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (m *QueueMutation) ClearTaskVodDownloadThumbnail() {
	m.task_vod_download_thumbnail = nil
	m.clearedFields[queue.FieldTaskVodDownloadThumbnail] = struct{}{}
}

// TaskVodDownloadThumbnailCleared returns if the "task_vod_download_thumbnail" field was cleared in this mutation.
func (m *QueueMutation) TaskVodDownloadThumbnailCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodDownloadThumbnail]
	return ok
}

// ResetTaskVodDownloadThumbnail resets all changes to the "task_vod_download_thumbnail" field.
func (m *QueueMutation) ResetTaskVodDownloadThumbnail() {
	m.task_vod_download_thumbnail = nil
	delete(m.clearedFields, queue.FieldTaskVodDownloadThumbnail)
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (m *QueueMutation) SetTaskVodSaveInfo(us utils.TaskStatus) {
	m.task_vod_save_info = &us
}

// TaskVodSaveInfo returns the value of the "task_vod_save_info" field in the mutation.
func (m *QueueMutation) TaskVodSaveInfo() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_save_info
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodSaveInfo returns the old "task_vod_save_info" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodSaveInfo(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodSaveInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodSaveInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodSaveInfo: %w", err)
	}
	return oldValue.TaskVodSaveInfo, nil
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (m *QueueMutation) ClearTaskVodSaveInfo() {
	m.task_vod_save_info = nil
	m.clearedFields[queue.FieldTaskVodSaveInfo] = struct{}{}
}

// TaskVodSaveInfoCleared returns if the "task_vod_save_info" field was cleared in this mutation.
func (m *QueueMutation) TaskVodSaveInfoCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodSaveInfo]
	return ok
}

// ResetTaskVodSaveInfo resets all changes to the "task_vod_save_info" field.
func (m *QueueMutation) ResetTaskVodSaveInfo() {
	m.task_vod_save_info = nil
	delete(m.clearedFields, queue.FieldTaskVodSaveInfo)
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (m *QueueMutation) SetTaskVideoDownload(us utils.TaskStatus) {
	m.task_video_download = &us
}

// TaskVideoDownload returns the value of the "task_video_download" field in the mutation.
func (m *QueueMutation) TaskVideoDownload() (r utils.TaskStatus, exists bool) {
	v := m.task_video_download
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoDownload returns the old "task_video_download" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoDownload(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoDownload: %w", err)
	}
	return oldValue.TaskVideoDownload, nil
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (m *QueueMutation) ClearTaskVideoDownload() {
	m.task_video_download = nil
	m.clearedFields[queue.FieldTaskVideoDownload] = struct{}{}
}

// TaskVideoDownloadCleared returns if the "task_video_download" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoDownloadCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoDownload]
	return ok
}

// ResetTaskVideoDownload resets all changes to the "task_video_download" field.
func (m *QueueMutation) ResetTaskVideoDownload() {
	m.task_video_download = nil
	delete(m.clearedFields, queue.FieldTaskVideoDownload)
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (m *QueueMutation) SetTaskVideoConvert(us utils.TaskStatus) {
	m.task_video_convert = &us
}

// TaskVideoConvert returns the value of the "task_video_convert" field in the mutation.
func (m *QueueMutation) TaskVideoConvert() (r utils.TaskStatus, exists bool) {
	v := m.task_video_convert
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoConvert returns the old "task_video_convert" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoConvert(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoConvert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoConvert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoConvert: %w", err)
	}
	return oldValue.TaskVideoConvert, nil
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (m *QueueMutation) ClearTaskVideoConvert() {
	m.task_video_convert = nil
	m.clearedFields[queue.FieldTaskVideoConvert] = struct{}{}
}

// TaskVideoConvertCleared returns if the "task_video_convert" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoConvertCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoConvert]
	return ok
}

// ResetTaskVideoConvert resets all changes to the "task_video_convert" field.
func (m *QueueMutation) ResetTaskVideoConvert() {
	m.task_video_convert = nil
	delete(m.clearedFields, queue.FieldTaskVideoConvert)
}

// SetTaskVideoMove sets the "task_video_move" field.
func (m *QueueMutation) SetTaskVideoMove(us utils.TaskStatus) {
	m.task_video_move = &us
}

// TaskVideoMove returns the value of the "task_video_move" field in the mutation.
func (m *QueueMutation) TaskVideoMove() (r utils.TaskStatus, exists bool) {
	v := m.task_video_move
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoMove returns the old "task_video_move" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoMove(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoMove is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoMove requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoMove: %w", err)
	}
	return oldValue.TaskVideoMove, nil
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (m *QueueMutation) ClearTaskVideoMove() {
	m.task_video_move = nil
	m.clearedFields[queue.FieldTaskVideoMove] = struct{}{}
}

// TaskVideoMoveCleared returns if the "task_video_move" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoMoveCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoMove]
	return ok
}

// ResetTaskVideoMove resets all changes to the "task_video_move" field.
func (m *QueueMutation) ResetTaskVideoMove() {
	m.task_video_move = nil
	delete(m.clearedFields, queue.FieldTaskVideoMove)
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (m *QueueMutation) SetTaskChatDownload(us utils.TaskStatus) {
	m.task_chat_download = &us
}

// TaskChatDownload returns the value of the "task_chat_download" field in the mutation.
func (m *QueueMutation) TaskChatDownload() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_download
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatDownload returns the old "task_chat_download" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatDownload(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatDownload: %w", err)
	}
	return oldValue.TaskChatDownload, nil
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (m *QueueMutation) ClearTaskChatDownload() {
	m.task_chat_download = nil
	m.clearedFields[queue.FieldTaskChatDownload] = struct{}{}
}

// TaskChatDownloadCleared returns if the "task_chat_download" field was cleared in this mutation.
func (m *QueueMutation) TaskChatDownloadCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatDownload]
	return ok
}

// ResetTaskChatDownload resets all changes to the "task_chat_download" field.
func (m *QueueMutation) ResetTaskChatDownload() {
	m.task_chat_download = nil
	delete(m.clearedFields, queue.FieldTaskChatDownload)
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (m *QueueMutation) SetTaskChatConvert(us utils.TaskStatus) {
	m.task_chat_convert = &us
}

// TaskChatConvert returns the value of the "task_chat_convert" field in the mutation.
func (m *QueueMutation) TaskChatConvert() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_convert
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatConvert returns the old "task_chat_convert" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatConvert(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatConvert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatConvert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatConvert: %w", err)
	}
	return oldValue.TaskChatConvert, nil
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (m *QueueMutation) ClearTaskChatConvert() {
	m.task_chat_convert = nil
	m.clearedFields[queue.FieldTaskChatConvert] = struct{}{}
}

// TaskChatConvertCleared returns if the "task_chat_convert" field was cleared in this mutation.
func (m *QueueMutation) TaskChatConvertCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatConvert]
	return ok
}

// ResetTaskChatConvert resets all changes to the "task_chat_convert" field.
func (m *QueueMutation) ResetTaskChatConvert() {
	m.task_chat_convert = nil
	delete(m.clearedFields, queue.FieldTaskChatConvert)
}

// SetTaskChatRender sets the "task_chat_render" field.
func (m *QueueMutation) SetTaskChatRender(us utils.TaskStatus) {
	m.task_chat_render = &us
}

// TaskChatRender returns the value of the "task_chat_render" field in the mutation.
func (m *QueueMutation) TaskChatRender() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_render
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatRender returns the old "task_chat_render" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatRender(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatRender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatRender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatRender: %w", err)
	}
	return oldValue.TaskChatRender, nil
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (m *QueueMutation) ClearTaskChatRender() {
	m.task_chat_render = nil
	m.clearedFields[queue.FieldTaskChatRender] = struct{}{}
}

// TaskChatRenderCleared returns if the "task_chat_render" field was cleared in this mutation.
func (m *QueueMutation) TaskChatRenderCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatRender]
	return ok
}

// ResetTaskChatRender resets all changes to the "task_chat_render" field.
func (m *QueueMutation) ResetTaskChatRender() {
	m.task_chat_render = nil
	delete(m.clearedFields, queue.FieldTaskChatRender)
}

// SetTaskChatMove sets the "task_chat_move" field.
func (m *QueueMutation) SetTaskChatMove(us utils.TaskStatus) {
	m.task_chat_move = &us
}

// TaskChatMove returns the value of the "task_chat_move" field in the mutation.
func (m *QueueMutation) TaskChatMove() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_move
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatMove returns the old "task_chat_move" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatMove(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatMove is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatMove requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatMove: %w", err)
	}
	return oldValue.TaskChatMove, nil
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (m *QueueMutation) ClearTaskChatMove() {
	m.task_chat_move = nil
	m.clearedFields[queue.FieldTaskChatMove] = struct{}{}
}

// TaskChatMoveCleared returns if the "task_chat_move" field was cleared in this mutation.
func (m *QueueMutation) TaskChatMoveCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatMove]
	return ok
}

// ResetTaskChatMove resets all changes to the "task_chat_move" field.
func (m *QueueMutation) ResetTaskChatMove() {
	m.task_chat_move = nil
	delete(m.clearedFields, queue.FieldTaskChatMove)
}

// SetChatStart sets the "chat_start" field.
func (m *QueueMutation) SetChatStart(t time.Time) {
	m.chat_start = &t
}

// ChatStart returns the value of the "chat_start" field in the mutation.
func (m *QueueMutation) ChatStart() (r time.Time, exists bool) {
	v := m.chat_start
	if v == nil {
		return
	}
	return *v, true
}

// OldChatStart returns the old "chat_start" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldChatStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatStart: %w", err)
	}
	return oldValue.ChatStart, nil
}

// ClearChatStart clears the value of the "chat_start" field.
func (m *QueueMutation) ClearChatStart() {
	m.chat_start = nil
	m.clearedFields[queue.FieldChatStart] = struct{}{}
}

// ChatStartCleared returns if the "chat_start" field was cleared in this mutation.
func (m *QueueMutation) ChatStartCleared() bool {
	_, ok := m.clearedFields[queue.FieldChatStart]
	return ok
}

// ResetChatStart resets all changes to the "chat_start" field.
func (m *QueueMutation) ResetChatStart() {
	m.chat_start = nil
	delete(m.clearedFields, queue.FieldChatStart)
}

// SetRenderChat sets the "render_chat" field.
func (m *QueueMutation) SetRenderChat(b bool) {
	m.render_chat = &b
}

// RenderChat returns the value of the "render_chat" field in the mutation.
func (m *QueueMutation) RenderChat() (r bool, exists bool) {
	v := m.render_chat
	if v == nil {
		return
	}
	return *v, true
}

// OldRenderChat returns the old "render_chat" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldRenderChat(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenderChat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenderChat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenderChat: %w", err)
	}
	return oldValue.RenderChat, nil
}

// ClearRenderChat clears the value of the "render_chat" field.
func (m *QueueMutation) ClearRenderChat() {
	m.render_chat = nil
	m.clearedFields[queue.FieldRenderChat] = struct{}{}
}

// RenderChatCleared returns if the "render_chat" field was cleared in this mutation.
func (m *QueueMutation) RenderChatCleared() bool {
	_, ok := m.clearedFields[queue.FieldRenderChat]
	return ok
}

// ResetRenderChat resets all changes to the "render_chat" field.
func (m *QueueMutation) ResetRenderChat() {
	m.render_chat = nil
	delete(m.clearedFields, queue.FieldRenderChat)
}

// SetWorkflowID sets the "workflow_id" field.
func (m *QueueMutation) SetWorkflowID(s string) {
	m.workflow_id = &s
}

// WorkflowID returns the value of the "workflow_id" field in the mutation.
func (m *QueueMutation) WorkflowID() (r string, exists bool) {
	v := m.workflow_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkflowID returns the old "workflow_id" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldWorkflowID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkflowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkflowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkflowID: %w", err)
	}
	return oldValue.WorkflowID, nil
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (m *QueueMutation) ClearWorkflowID() {
	m.workflow_id = nil
	m.clearedFields[queue.FieldWorkflowID] = struct{}{}
}

// WorkflowIDCleared returns if the "workflow_id" field was cleared in this mutation.
func (m *QueueMutation) WorkflowIDCleared() bool {
	_, ok := m.clearedFields[queue.FieldWorkflowID]
	return ok
}

// ResetWorkflowID resets all changes to the "workflow_id" field.
func (m *QueueMutation) ResetWorkflowID() {
	m.workflow_id = nil
	delete(m.clearedFields, queue.FieldWorkflowID)
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (m *QueueMutation) SetWorkflowRunID(s string) {
	m.workflow_run_id = &s
}

// WorkflowRunID returns the value of the "workflow_run_id" field in the mutation.
func (m *QueueMutation) WorkflowRunID() (r string, exists bool) {
	v := m.workflow_run_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkflowRunID returns the old "workflow_run_id" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldWorkflowRunID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkflowRunID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkflowRunID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkflowRunID: %w", err)
	}
	return oldValue.WorkflowRunID, nil
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (m *QueueMutation) ClearWorkflowRunID() {
	m.workflow_run_id = nil
	m.clearedFields[queue.FieldWorkflowRunID] = struct{}{}
}

// WorkflowRunIDCleared returns if the "workflow_run_id" field was cleared in this mutation.
func (m *QueueMutation) WorkflowRunIDCleared() bool {
	_, ok := m.clearedFields[queue.FieldWorkflowRunID]
	return ok
}

// ResetWorkflowRunID resets all changes to the "workflow_run_id" field.
func (m *QueueMutation) ResetWorkflowRunID() {
	m.workflow_run_id = nil
	delete(m.clearedFields, queue.FieldWorkflowRunID)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QueueMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QueueMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QueueMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QueueMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QueueMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QueueMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetVodID sets the "vod" edge to the Vod entity by id.
func (m *QueueMutation) SetVodID(id uuid.UUID) {
	m.vod = &id
}

// ClearVod clears the "vod" edge to the Vod entity.
func (m *QueueMutation) ClearVod() {
	m.clearedvod = true
}

// VodCleared reports if the "vod" edge to the Vod entity was cleared.
func (m *QueueMutation) VodCleared() bool {
	return m.clearedvod
}

// VodID returns the "vod" edge ID in the mutation.
func (m *QueueMutation) VodID() (id uuid.UUID, exists bool) {
	if m.vod != nil {
		return *m.vod, true
	}
	return
}

// VodIDs returns the "vod" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VodID instead. It exists only for internal usage by the builders.
func (m *QueueMutation) VodIDs() (ids []uuid.UUID) {
	if id := m.vod; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVod resets all changes to the "vod" edge.
func (m *QueueMutation) ResetVod() {
	m.vod = nil
	m.clearedvod = false
}

// Where appends a list predicates to the QueueMutation builder.
func (m *QueueMutation) Where(ps ...predicate.Queue) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QueueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QueueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Queue, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QueueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QueueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Queue).
func (m *QueueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QueueMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.live_archive != nil {
		fields = append(fields, queue.FieldLiveArchive)
	}
	if m.on_hold != nil {
		fields = append(fields, queue.FieldOnHold)
	}
	if m.video_processing != nil {
		fields = append(fields, queue.FieldVideoProcessing)
	}
	if m.chat_processing != nil {
		fields = append(fields, queue.FieldChatProcessing)
	}
	if m.processing != nil {
		fields = append(fields, queue.FieldProcessing)
	}
	if m.task_vod_create_folder != nil {
		fields = append(fields, queue.FieldTaskVodCreateFolder)
	}
	if m.task_vod_download_thumbnail != nil {
		fields = append(fields, queue.FieldTaskVodDownloadThumbnail)
	}
	if m.task_vod_save_info != nil {
		fields = append(fields, queue.FieldTaskVodSaveInfo)
	}
	if m.task_video_download != nil {
		fields = append(fields, queue.FieldTaskVideoDownload)
	}
	if m.task_video_convert != nil {
		fields = append(fields, queue.FieldTaskVideoConvert)
	}
	if m.task_video_move != nil {
		fields = append(fields, queue.FieldTaskVideoMove)
	}
	if m.task_chat_download != nil {
		fields = append(fields, queue.FieldTaskChatDownload)
	}
	if m.task_chat_convert != nil {
		fields = append(fields, queue.FieldTaskChatConvert)
	}
	if m.task_chat_render != nil {
		fields = append(fields, queue.FieldTaskChatRender)
	}
	if m.task_chat_move != nil {
		fields = append(fields, queue.FieldTaskChatMove)
	}
	if m.chat_start != nil {
		fields = append(fields, queue.FieldChatStart)
	}
	if m.render_chat != nil {
		fields = append(fields, queue.FieldRenderChat)
	}
	if m.workflow_id != nil {
		fields = append(fields, queue.FieldWorkflowID)
	}
	if m.workflow_run_id != nil {
		fields = append(fields, queue.FieldWorkflowRunID)
	}
	if m.updated_at != nil {
		fields = append(fields, queue.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, queue.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QueueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case queue.FieldLiveArchive:
		return m.LiveArchive()
	case queue.FieldOnHold:
		return m.OnHold()
	case queue.FieldVideoProcessing:
		return m.VideoProcessing()
	case queue.FieldChatProcessing:
		return m.ChatProcessing()
	case queue.FieldProcessing:
		return m.Processing()
	case queue.FieldTaskVodCreateFolder:
		return m.TaskVodCreateFolder()
	case queue.FieldTaskVodDownloadThumbnail:
		return m.TaskVodDownloadThumbnail()
	case queue.FieldTaskVodSaveInfo:
		return m.TaskVodSaveInfo()
	case queue.FieldTaskVideoDownload:
		return m.TaskVideoDownload()
	case queue.FieldTaskVideoConvert:
		return m.TaskVideoConvert()
	case queue.FieldTaskVideoMove:
		return m.TaskVideoMove()
	case queue.FieldTaskChatDownload:
		return m.TaskChatDownload()
	case queue.FieldTaskChatConvert:
		return m.TaskChatConvert()
	case queue.FieldTaskChatRender:
		return m.TaskChatRender()
	case queue.FieldTaskChatMove:
		return m.TaskChatMove()
	case queue.FieldChatStart:
		return m.ChatStart()
	case queue.FieldRenderChat:
		return m.RenderChat()
	case queue.FieldWorkflowID:
		return m.WorkflowID()
	case queue.FieldWorkflowRunID:
		return m.WorkflowRunID()
	case queue.FieldUpdatedAt:
		return m.UpdatedAt()
	case queue.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QueueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case queue.FieldLiveArchive:
		return m.OldLiveArchive(ctx)
	case queue.FieldOnHold:
		return m.OldOnHold(ctx)
	case queue.FieldVideoProcessing:
		return m.OldVideoProcessing(ctx)
	case queue.FieldChatProcessing:
		return m.OldChatProcessing(ctx)
	case queue.FieldProcessing:
		return m.OldProcessing(ctx)
	case queue.FieldTaskVodCreateFolder:
		return m.OldTaskVodCreateFolder(ctx)
	case queue.FieldTaskVodDownloadThumbnail:
		return m.OldTaskVodDownloadThumbnail(ctx)
	case queue.FieldTaskVodSaveInfo:
		return m.OldTaskVodSaveInfo(ctx)
	case queue.FieldTaskVideoDownload:
		return m.OldTaskVideoDownload(ctx)
	case queue.FieldTaskVideoConvert:
		return m.OldTaskVideoConvert(ctx)
	case queue.FieldTaskVideoMove:
		return m.OldTaskVideoMove(ctx)
	case queue.FieldTaskChatDownload:
		return m.OldTaskChatDownload(ctx)
	case queue.FieldTaskChatConvert:
		return m.OldTaskChatConvert(ctx)
	case queue.FieldTaskChatRender:
		return m.OldTaskChatRender(ctx)
	case queue.FieldTaskChatMove:
		return m.OldTaskChatMove(ctx)
	case queue.FieldChatStart:
		return m.OldChatStart(ctx)
	case queue.FieldRenderChat:
		return m.OldRenderChat(ctx)
	case queue.FieldWorkflowID:
		return m.OldWorkflowID(ctx)
	case queue.FieldWorkflowRunID:
		return m.OldWorkflowRunID(ctx)
	case queue.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case queue.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Queue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case queue.FieldLiveArchive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveArchive(v)
		return nil
	case queue.FieldOnHold:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnHold(v)
		return nil
	case queue.FieldVideoProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoProcessing(v)
		return nil
	case queue.FieldChatProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatProcessing(v)
		return nil
	case queue.FieldProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessing(v)
		return nil
	case queue.FieldTaskVodCreateFolder:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodCreateFolder(v)
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodDownloadThumbnail(v)
		return nil
	case queue.FieldTaskVodSaveInfo:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodSaveInfo(v)
		return nil
	case queue.FieldTaskVideoDownload:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoDownload(v)
		return nil
	case queue.FieldTaskVideoConvert:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoConvert(v)
		return nil
	case queue.FieldTaskVideoMove:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoMove(v)
		return nil
	case queue.FieldTaskChatDownload:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatDownload(v)
		return nil
	case queue.FieldTaskChatConvert:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatConvert(v)
		return nil
	case queue.FieldTaskChatRender:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatRender(v)
		return nil
	case queue.FieldTaskChatMove:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatMove(v)
		return nil
	case queue.FieldChatStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatStart(v)
		return nil
	case queue.FieldRenderChat:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenderChat(v)
		return nil
	case queue.FieldWorkflowID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkflowID(v)
		return nil
	case queue.FieldWorkflowRunID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkflowRunID(v)
		return nil
	case queue.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case queue.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QueueMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QueueMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Queue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QueueMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(queue.FieldTaskVodCreateFolder) {
		fields = append(fields, queue.FieldTaskVodCreateFolder)
	}
	if m.FieldCleared(queue.FieldTaskVodDownloadThumbnail) {
		fields = append(fields, queue.FieldTaskVodDownloadThumbnail)
	}
	if m.FieldCleared(queue.FieldTaskVodSaveInfo) {
		fields = append(fields, queue.FieldTaskVodSaveInfo)
	}
	if m.FieldCleared(queue.FieldTaskVideoDownload) {
		fields = append(fields, queue.FieldTaskVideoDownload)
	}
	if m.FieldCleared(queue.FieldTaskVideoConvert) {
		fields = append(fields, queue.FieldTaskVideoConvert)
	}
	if m.FieldCleared(queue.FieldTaskVideoMove) {
		fields = append(fields, queue.FieldTaskVideoMove)
	}
	if m.FieldCleared(queue.FieldTaskChatDownload) {
		fields = append(fields, queue.FieldTaskChatDownload)
	}
	if m.FieldCleared(queue.FieldTaskChatConvert) {
		fields = append(fields, queue.FieldTaskChatConvert)
	}
	if m.FieldCleared(queue.FieldTaskChatRender) {
		fields = append(fields, queue.FieldTaskChatRender)
	}
	if m.FieldCleared(queue.FieldTaskChatMove) {
		fields = append(fields, queue.FieldTaskChatMove)
	}
	if m.FieldCleared(queue.FieldChatStart) {
		fields = append(fields, queue.FieldChatStart)
	}
	if m.FieldCleared(queue.FieldRenderChat) {
		fields = append(fields, queue.FieldRenderChat)
	}
	if m.FieldCleared(queue.FieldWorkflowID) {
		fields = append(fields, queue.FieldWorkflowID)
	}
	if m.FieldCleared(queue.FieldWorkflowRunID) {
		fields = append(fields, queue.FieldWorkflowRunID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QueueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueueMutation) ClearField(name string) error {
	switch name {
	case queue.FieldTaskVodCreateFolder:
		m.ClearTaskVodCreateFolder()
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		m.ClearTaskVodDownloadThumbnail()
		return nil
	case queue.FieldTaskVodSaveInfo:
		m.ClearTaskVodSaveInfo()
		return nil
	case queue.FieldTaskVideoDownload:
		m.ClearTaskVideoDownload()
		return nil
	case queue.FieldTaskVideoConvert:
		m.ClearTaskVideoConvert()
		return nil
	case queue.FieldTaskVideoMove:
		m.ClearTaskVideoMove()
		return nil
	case queue.FieldTaskChatDownload:
		m.ClearTaskChatDownload()
		return nil
	case queue.FieldTaskChatConvert:
		m.ClearTaskChatConvert()
		return nil
	case queue.FieldTaskChatRender:
		m.ClearTaskChatRender()
		return nil
	case queue.FieldTaskChatMove:
		m.ClearTaskChatMove()
		return nil
	case queue.FieldChatStart:
		m.ClearChatStart()
		return nil
	case queue.FieldRenderChat:
		m.ClearRenderChat()
		return nil
	case queue.FieldWorkflowID:
		m.ClearWorkflowID()
		return nil
	case queue.FieldWorkflowRunID:
		m.ClearWorkflowRunID()
		return nil
	}
	return fmt.Errorf("unknown Queue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QueueMutation) ResetField(name string) error {
	switch name {
	case queue.FieldLiveArchive:
		m.ResetLiveArchive()
		return nil
	case queue.FieldOnHold:
		m.ResetOnHold()
		return nil
	case queue.FieldVideoProcessing:
		m.ResetVideoProcessing()
		return nil
	case queue.FieldChatProcessing:
		m.ResetChatProcessing()
		return nil
	case queue.FieldProcessing:
		m.ResetProcessing()
		return nil
	case queue.FieldTaskVodCreateFolder:
		m.ResetTaskVodCreateFolder()
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		m.ResetTaskVodDownloadThumbnail()
		return nil
	case queue.FieldTaskVodSaveInfo:
		m.ResetTaskVodSaveInfo()
		return nil
	case queue.FieldTaskVideoDownload:
		m.ResetTaskVideoDownload()
		return nil
	case queue.FieldTaskVideoConvert:
		m.ResetTaskVideoConvert()
		return nil
	case queue.FieldTaskVideoMove:
		m.ResetTaskVideoMove()
		return nil
	case queue.FieldTaskChatDownload:
		m.ResetTaskChatDownload()
		return nil
	case queue.FieldTaskChatConvert:
		m.ResetTaskChatConvert()
		return nil
	case queue.FieldTaskChatRender:
		m.ResetTaskChatRender()
		return nil
	case queue.FieldTaskChatMove:
		m.ResetTaskChatMove()
		return nil
	case queue.FieldChatStart:
		m.ResetChatStart()
		return nil
	case queue.FieldRenderChat:
		m.ResetRenderChat()
		return nil
	case queue.FieldWorkflowID:
		m.ResetWorkflowID()
		return nil
	case queue.FieldWorkflowRunID:
		m.ResetWorkflowRunID()
		return nil
	case queue.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case queue.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QueueMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vod != nil {
		edges = append(edges, queue.EdgeVod)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QueueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case queue.EdgeVod:
		if id := m.vod; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QueueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QueueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QueueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvod {
		edges = append(edges, queue.EdgeVod)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QueueMutation) EdgeCleared(name string) bool {
	switch name {
	case queue.EdgeVod:
		return m.clearedvod
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QueueMutation) ClearEdge(name string) error {
	switch name {
	case queue.EdgeVod:
		m.ClearVod()
		return nil
	}
	return fmt.Errorf("unknown Queue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QueueMutation) ResetEdge(name string) error {
	switch name {
	case queue.EdgeVod:
		m.ResetVod()
		return nil
	}
	return fmt.Errorf("unknown Queue edge %s", name)
}

// TwitchCategoryMutation represents an operation that mutates the TwitchCategory nodes in the graph.
type TwitchCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	box_art_url   *string
	igdb_id       *string
	updated_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TwitchCategory, error)
	predicates    []predicate.TwitchCategory
}

var _ ent.Mutation = (*TwitchCategoryMutation)(nil)

// twitchcategoryOption allows management of the mutation configuration using functional options.
type twitchcategoryOption func(*TwitchCategoryMutation)

// newTwitchCategoryMutation creates new mutation for the TwitchCategory entity.
func newTwitchCategoryMutation(c config, op Op, opts ...twitchcategoryOption) *TwitchCategoryMutation {
	m := &TwitchCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitchCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitchCategoryID sets the ID field of the mutation.
func withTwitchCategoryID(id string) twitchcategoryOption {
	return func(m *TwitchCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitchCategory
		)
		m.oldValue = func(ctx context.Context) (*TwitchCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitchCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitchCategory sets the old TwitchCategory of the mutation.
func withTwitchCategory(node *TwitchCategory) twitchcategoryOption {
	return func(m *TwitchCategoryMutation) {
		m.oldValue = func(context.Context) (*TwitchCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitchCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitchCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwitchCategory entities.
func (m *TwitchCategoryMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitchCategoryMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitchCategoryMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitchCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TwitchCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TwitchCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TwitchCategory entity.
// If the TwitchCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitchCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TwitchCategoryMutation) ResetName() {
	m.name = nil
}

// SetBoxArtURL sets the "box_art_url" field.
func (m *TwitchCategoryMutation) SetBoxArtURL(s string) {
	m.box_art_url = &s
}

// BoxArtURL returns the value of the "box_art_url" field in the mutation.
func (m *TwitchCategoryMutation) BoxArtURL() (r string, exists bool) {
	v := m.box_art_url
	if v == nil {
		return
	}
	return *v, true
}

// OldBoxArtURL returns the old "box_art_url" field's value of the TwitchCategory entity.
// If the TwitchCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitchCategoryMutation) OldBoxArtURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoxArtURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoxArtURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoxArtURL: %w", err)
	}
	return oldValue.BoxArtURL, nil
}

// ClearBoxArtURL clears the value of the "box_art_url" field.
func (m *TwitchCategoryMutation) ClearBoxArtURL() {
	m.box_art_url = nil
	m.clearedFields[twitchcategory.FieldBoxArtURL] = struct{}{}
}

// BoxArtURLCleared returns if the "box_art_url" field was cleared in this mutation.
func (m *TwitchCategoryMutation) BoxArtURLCleared() bool {
	_, ok := m.clearedFields[twitchcategory.FieldBoxArtURL]
	return ok
}

// ResetBoxArtURL resets all changes to the "box_art_url" field.
func (m *TwitchCategoryMutation) ResetBoxArtURL() {
	m.box_art_url = nil
	delete(m.clearedFields, twitchcategory.FieldBoxArtURL)
}

// SetIgdbID sets the "igdb_id" field.
func (m *TwitchCategoryMutation) SetIgdbID(s string) {
	m.igdb_id = &s
}

// IgdbID returns the value of the "igdb_id" field in the mutation.
func (m *TwitchCategoryMutation) IgdbID() (r string, exists bool) {
	v := m.igdb_id
	if v == nil {
		return
	}
	return *v, true
}

// OldIgdbID returns the old "igdb_id" field's value of the TwitchCategory entity.
// If the TwitchCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitchCategoryMutation) OldIgdbID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIgdbID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIgdbID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIgdbID: %w", err)
	}
	return oldValue.IgdbID, nil
}

// ClearIgdbID clears the value of the "igdb_id" field.
func (m *TwitchCategoryMutation) ClearIgdbID() {
	m.igdb_id = nil
	m.clearedFields[twitchcategory.FieldIgdbID] = struct{}{}
}

// IgdbIDCleared returns if the "igdb_id" field was cleared in this mutation.
func (m *TwitchCategoryMutation) IgdbIDCleared() bool {
	_, ok := m.clearedFields[twitchcategory.FieldIgdbID]
	return ok
}

// ResetIgdbID resets all changes to the "igdb_id" field.
func (m *TwitchCategoryMutation) ResetIgdbID() {
	m.igdb_id = nil
	delete(m.clearedFields, twitchcategory.FieldIgdbID)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TwitchCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TwitchCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TwitchCategory entity.
// If the TwitchCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitchCategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TwitchCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TwitchCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TwitchCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TwitchCategory entity.
// If the TwitchCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitchCategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TwitchCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TwitchCategoryMutation builder.
func (m *TwitchCategoryMutation) Where(ps ...predicate.TwitchCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitchCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitchCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitchCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitchCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitchCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitchCategory).
func (m *TwitchCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitchCategoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, twitchcategory.FieldName)
	}
	if m.box_art_url != nil {
		fields = append(fields, twitchcategory.FieldBoxArtURL)
	}
	if m.igdb_id != nil {
		fields = append(fields, twitchcategory.FieldIgdbID)
	}
	if m.updated_at != nil {
		fields = append(fields, twitchcategory.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, twitchcategory.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitchCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitchcategory.FieldName:
		return m.Name()
	case twitchcategory.FieldBoxArtURL:
		return m.BoxArtURL()
	case twitchcategory.FieldIgdbID:
		return m.IgdbID()
	case twitchcategory.FieldUpdatedAt:
		return m.UpdatedAt()
	case twitchcategory.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitchCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitchcategory.FieldName:
		return m.OldName(ctx)
	case twitchcategory.FieldBoxArtURL:
		return m.OldBoxArtURL(ctx)
	case twitchcategory.FieldIgdbID:
		return m.OldIgdbID(ctx)
	case twitchcategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case twitchcategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TwitchCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitchCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitchcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case twitchcategory.FieldBoxArtURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoxArtURL(v)
		return nil
	case twitchcategory.FieldIgdbID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIgdbID(v)
		return nil
	case twitchcategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case twitchcategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TwitchCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitchCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitchCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitchCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TwitchCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitchCategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(twitchcategory.FieldBoxArtURL) {
		fields = append(fields, twitchcategory.FieldBoxArtURL)
	}
	if m.FieldCleared(twitchcategory.FieldIgdbID) {
		fields = append(fields, twitchcategory.FieldIgdbID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitchCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitchCategoryMutation) ClearField(name string) error {
	switch name {
	case twitchcategory.FieldBoxArtURL:
		m.ClearBoxArtURL()
		return nil
	case twitchcategory.FieldIgdbID:
		m.ClearIgdbID()
		return nil
	}
	return fmt.Errorf("unknown TwitchCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitchCategoryMutation) ResetField(name string) error {
	switch name {
	case twitchcategory.FieldName:
		m.ResetName()
		return nil
	case twitchcategory.FieldBoxArtURL:
		m.ResetBoxArtURL()
		return nil
	case twitchcategory.FieldIgdbID:
		m.ResetIgdbID()
		return nil
	case twitchcategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case twitchcategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TwitchCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitchCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitchCategoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitchCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitchCategoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitchCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitchCategoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitchCategoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwitchCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitchCategoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwitchCategory edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	sub           *string
	username      *string
	password      *string
	oauth         *bool
	role          *utils.Role
	webhook       *string
	updated_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSub sets the "sub" field.
func (m *UserMutation) SetSub(s string) {
	m.sub = &s
}

// Sub returns the value of the "sub" field in the mutation.
func (m *UserMutation) Sub() (r string, exists bool) {
	v := m.sub
	if v == nil {
		return
	}
	return *v, true
}

// OldSub returns the old "sub" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSub: %w", err)
	}
	return oldValue.Sub, nil
}

// ClearSub clears the value of the "sub" field.
func (m *UserMutation) ClearSub() {
	m.sub = nil
	m.clearedFields[user.FieldSub] = struct{}{}
}

// SubCleared returns if the "sub" field was cleared in this mutation.
func (m *UserMutation) SubCleared() bool {
	_, ok := m.clearedFields[user.FieldSub]
	return ok
}

// ResetSub resets all changes to the "sub" field.
func (m *UserMutation) ResetSub() {
	m.sub = nil
	delete(m.clearedFields, user.FieldSub)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetOauth sets the "oauth" field.
func (m *UserMutation) SetOauth(b bool) {
	m.oauth = &b
}

// Oauth returns the value of the "oauth" field in the mutation.
func (m *UserMutation) Oauth() (r bool, exists bool) {
	v := m.oauth
	if v == nil {
		return
	}
	return *v, true
}

// OldOauth returns the old "oauth" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOauth(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauth: %w", err)
	}
	return oldValue.Oauth, nil
}

// ResetOauth resets all changes to the "oauth" field.
func (m *UserMutation) ResetOauth() {
	m.oauth = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u utils.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r utils.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v utils.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetWebhook sets the "webhook" field.
func (m *UserMutation) SetWebhook(s string) {
	m.webhook = &s
}

// Webhook returns the value of the "webhook" field in the mutation.
func (m *UserMutation) Webhook() (r string, exists bool) {
	v := m.webhook
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhook returns the old "webhook" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWebhook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhook: %w", err)
	}
	return oldValue.Webhook, nil
}

// ClearWebhook clears the value of the "webhook" field.
func (m *UserMutation) ClearWebhook() {
	m.webhook = nil
	m.clearedFields[user.FieldWebhook] = struct{}{}
}

// WebhookCleared returns if the "webhook" field was cleared in this mutation.
func (m *UserMutation) WebhookCleared() bool {
	_, ok := m.clearedFields[user.FieldWebhook]
	return ok
}

// ResetWebhook resets all changes to the "webhook" field.
func (m *UserMutation) ResetWebhook() {
	m.webhook = nil
	delete(m.clearedFields, user.FieldWebhook)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.sub != nil {
		fields = append(fields, user.FieldSub)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.oauth != nil {
		fields = append(fields, user.FieldOauth)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.webhook != nil {
		fields = append(fields, user.FieldWebhook)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSub:
		return m.Sub()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldOauth:
		return m.Oauth()
	case user.FieldRole:
		return m.Role()
	case user.FieldWebhook:
		return m.Webhook()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldSub:
		return m.OldSub(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldOauth:
		return m.OldOauth(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldWebhook:
		return m.OldWebhook(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSub(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldOauth:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauth(v)
		return nil
	case user.FieldRole:
		v, ok := value.(utils.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldWebhook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhook(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldSub) {
		fields = append(fields, user.FieldSub)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldWebhook) {
		fields = append(fields, user.FieldWebhook)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldSub:
		m.ClearSub()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldWebhook:
		m.ClearWebhook()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldSub:
		m.ResetSub()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldOauth:
		m.ResetOauth()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldWebhook:
		m.ResetWebhook()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// VodMutation represents an operation that mutates the Vod nodes in the graph.
type VodMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	ext_id                *string
	platform              *utils.VodPlatform
	_type                 *utils.VodType
	title                 *string
	duration              *int
	addduration           *int
	views                 *int
	addviews              *int
	resolution            *string
	processing            *bool
	thumbnail_path        *string
	web_thumbnail_path    *string
	video_path            *string
	chat_path             *string
	chat_video_path       *string
	info_path             *string
	caption_path          *string
	folder_name           *string
	file_name             *string
	locked                *bool
	local_views           *int
	addlocal_views        *int
	streamed_at           *time.Time
	updated_at            *time.Time
	created_at            *time.Time
	clearedFields         map[string]struct{}
	channel               *uuid.UUID
	clearedchannel        bool
	queue                 *uuid.UUID
	clearedqueue          bool
	playlists             map[uuid.UUID]struct{}
	removedplaylists      map[uuid.UUID]struct{}
	clearedplaylists      bool
	chapters              map[uuid.UUID]struct{}
	removedchapters       map[uuid.UUID]struct{}
	clearedchapters       bool
	muted_segments        map[uuid.UUID]struct{}
	removedmuted_segments map[uuid.UUID]struct{}
	clearedmuted_segments bool
	done                  bool
	oldValue              func(context.Context) (*Vod, error)
	predicates            []predicate.Vod
}

var _ ent.Mutation = (*VodMutation)(nil)

// vodOption allows management of the mutation configuration using functional options.
type vodOption func(*VodMutation)

// newVodMutation creates new mutation for the Vod entity.
func newVodMutation(c config, op Op, opts ...vodOption) *VodMutation {
	m := &VodMutation{
		config:        c,
		op:            op,
		typ:           TypeVod,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVodID sets the ID field of the mutation.
func withVodID(id uuid.UUID) vodOption {
	return func(m *VodMutation) {
		var (
			err   error
			once  sync.Once
			value *Vod
		)
		m.oldValue = func(ctx context.Context) (*Vod, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vod.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVod sets the old Vod of the mutation.
func withVod(node *Vod) vodOption {
	return func(m *VodMutation) {
		m.oldValue = func(context.Context) (*Vod, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Vod entities.
func (m *VodMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VodMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VodMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vod.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExtID sets the "ext_id" field.
func (m *VodMutation) SetExtID(s string) {
	m.ext_id = &s
}

// ExtID returns the value of the "ext_id" field in the mutation.
func (m *VodMutation) ExtID() (r string, exists bool) {
	v := m.ext_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExtID returns the old "ext_id" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldExtID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtID: %w", err)
	}
	return oldValue.ExtID, nil
}

// ResetExtID resets all changes to the "ext_id" field.
func (m *VodMutation) ResetExtID() {
	m.ext_id = nil
}

// SetPlatform sets the "platform" field.
func (m *VodMutation) SetPlatform(up utils.VodPlatform) {
	m.platform = &up
}

// Platform returns the value of the "platform" field in the mutation.
func (m *VodMutation) Platform() (r utils.VodPlatform, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldPlatform(ctx context.Context) (v utils.VodPlatform, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *VodMutation) ResetPlatform() {
	m.platform = nil
}

// SetType sets the "type" field.
func (m *VodMutation) SetType(ut utils.VodType) {
	m._type = &ut
}

// GetType returns the value of the "type" field in the mutation.
func (m *VodMutation) GetType() (r utils.VodType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldType(ctx context.Context) (v utils.VodType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *VodMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *VodMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *VodMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *VodMutation) ResetTitle() {
	m.title = nil
}

// SetDuration sets the "duration" field.
func (m *VodMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *VodMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *VodMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *VodMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *VodMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetViews sets the "views" field.
func (m *VodMutation) SetViews(i int) {
	m.views = &i
	m.addviews = nil
}

// Views returns the value of the "views" field in the mutation.
func (m *VodMutation) Views() (r int, exists bool) {
	v := m.views
	if v == nil {
		return
	}
	return *v, true
}

// OldViews returns the old "views" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViews: %w", err)
	}
	return oldValue.Views, nil
}

// AddViews adds i to the "views" field.
func (m *VodMutation) AddViews(i int) {
	if m.addviews != nil {
		*m.addviews += i
	} else {
		m.addviews = &i
	}
}

// AddedViews returns the value that was added to the "views" field in this mutation.
func (m *VodMutation) AddedViews() (r int, exists bool) {
	v := m.addviews
	if v == nil {
		return
	}
	return *v, true
}

// ResetViews resets all changes to the "views" field.
func (m *VodMutation) ResetViews() {
	m.views = nil
	m.addviews = nil
}

// SetResolution sets the "resolution" field.
func (m *VodMutation) SetResolution(s string) {
	m.resolution = &s
}

// Resolution returns the value of the "resolution" field in the mutation.
func (m *VodMutation) Resolution() (r string, exists bool) {
	v := m.resolution
	if v == nil {
		return
	}
	return *v, true
}

// OldResolution returns the old "resolution" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldResolution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolution: %w", err)
	}
	return oldValue.Resolution, nil
}

// ClearResolution clears the value of the "resolution" field.
func (m *VodMutation) ClearResolution() {
	m.resolution = nil
	m.clearedFields[vod.FieldResolution] = struct{}{}
}

// ResolutionCleared returns if the "resolution" field was cleared in this mutation.
func (m *VodMutation) ResolutionCleared() bool {
	_, ok := m.clearedFields[vod.FieldResolution]
	return ok
}

// ResetResolution resets all changes to the "resolution" field.
func (m *VodMutation) ResetResolution() {
	m.resolution = nil
	delete(m.clearedFields, vod.FieldResolution)
}

// SetProcessing sets the "processing" field.
func (m *VodMutation) SetProcessing(b bool) {
	m.processing = &b
}

// Processing returns the value of the "processing" field in the mutation.
func (m *VodMutation) Processing() (r bool, exists bool) {
	v := m.processing
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessing returns the old "processing" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessing: %w", err)
	}
	return oldValue.Processing, nil
}

// ResetProcessing resets all changes to the "processing" field.
func (m *VodMutation) ResetProcessing() {
	m.processing = nil
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (m *VodMutation) SetThumbnailPath(s string) {
	m.thumbnail_path = &s
}

// ThumbnailPath returns the value of the "thumbnail_path" field in the mutation.
func (m *VodMutation) ThumbnailPath() (r string, exists bool) {
	v := m.thumbnail_path
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailPath returns the old "thumbnail_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldThumbnailPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailPath: %w", err)
	}
	return oldValue.ThumbnailPath, nil
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (m *VodMutation) ClearThumbnailPath() {
	m.thumbnail_path = nil
	m.clearedFields[vod.FieldThumbnailPath] = struct{}{}
}

// ThumbnailPathCleared returns if the "thumbnail_path" field was cleared in this mutation.
func (m *VodMutation) ThumbnailPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldThumbnailPath]
	return ok
}

// ResetThumbnailPath resets all changes to the "thumbnail_path" field.
func (m *VodMutation) ResetThumbnailPath() {
	m.thumbnail_path = nil
	delete(m.clearedFields, vod.FieldThumbnailPath)
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (m *VodMutation) SetWebThumbnailPath(s string) {
	m.web_thumbnail_path = &s
}

// WebThumbnailPath returns the value of the "web_thumbnail_path" field in the mutation.
func (m *VodMutation) WebThumbnailPath() (r string, exists bool) {
	v := m.web_thumbnail_path
	if v == nil {
		return
	}
	return *v, true
}

// OldWebThumbnailPath returns the old "web_thumbnail_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldWebThumbnailPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebThumbnailPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebThumbnailPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebThumbnailPath: %w", err)
	}
	return oldValue.WebThumbnailPath, nil
}

// ResetWebThumbnailPath resets all changes to the "web_thumbnail_path" field.
func (m *VodMutation) ResetWebThumbnailPath() {
	m.web_thumbnail_path = nil
}

// SetVideoPath sets the "video_path" field.
func (m *VodMutation) SetVideoPath(s string) {
	m.video_path = &s
}

// VideoPath returns the value of the "video_path" field in the mutation.
func (m *VodMutation) VideoPath() (r string, exists bool) {
	v := m.video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoPath returns the old "video_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldVideoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoPath: %w", err)
	}
	return oldValue.VideoPath, nil
}

// ResetVideoPath resets all changes to the "video_path" field.
func (m *VodMutation) ResetVideoPath() {
	m.video_path = nil
}

// SetChatPath sets the "chat_path" field.
func (m *VodMutation) SetChatPath(s string) {
	m.chat_path = &s
}

// ChatPath returns the value of the "chat_path" field in the mutation.
func (m *VodMutation) ChatPath() (r string, exists bool) {
	v := m.chat_path
	if v == nil {
		return
	}
	return *v, true
}

// OldChatPath returns the old "chat_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldChatPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatPath: %w", err)
	}
	return oldValue.ChatPath, nil
}

// ClearChatPath clears the value of the "chat_path" field.
func (m *VodMutation) ClearChatPath() {
	m.chat_path = nil
	m.clearedFields[vod.FieldChatPath] = struct{}{}
}

// ChatPathCleared returns if the "chat_path" field was cleared in this mutation.
func (m *VodMutation) ChatPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldChatPath]
	return ok
}

// ResetChatPath resets all changes to the "chat_path" field.
func (m *VodMutation) ResetChatPath() {
	m.chat_path = nil
	delete(m.clearedFields, vod.FieldChatPath)
}

// SetChatVideoPath sets the "chat_video_path" field.
func (m *VodMutation) SetChatVideoPath(s string) {
	m.chat_video_path = &s
}

// ChatVideoPath returns the value of the "chat_video_path" field in the mutation.
func (m *VodMutation) ChatVideoPath() (r string, exists bool) {
	v := m.chat_video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldChatVideoPath returns the old "chat_video_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldChatVideoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatVideoPath: %w", err)
	}
	return oldValue.ChatVideoPath, nil
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (m *VodMutation) ClearChatVideoPath() {
	m.chat_video_path = nil
	m.clearedFields[vod.FieldChatVideoPath] = struct{}{}
}

// ChatVideoPathCleared returns if the "chat_video_path" field was cleared in this mutation.
func (m *VodMutation) ChatVideoPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldChatVideoPath]
	return ok
}

// ResetChatVideoPath resets all changes to the "chat_video_path" field.
func (m *VodMutation) ResetChatVideoPath() {
	m.chat_video_path = nil
	delete(m.clearedFields, vod.FieldChatVideoPath)
}

// SetInfoPath sets the "info_path" field.
func (m *VodMutation) SetInfoPath(s string) {
	m.info_path = &s
}

// InfoPath returns the value of the "info_path" field in the mutation.
func (m *VodMutation) InfoPath() (r string, exists bool) {
	v := m.info_path
	if v == nil {
		return
	}
	return *v, true
}

// OldInfoPath returns the old "info_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldInfoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfoPath: %w", err)
	}
	return oldValue.InfoPath, nil
}

// ClearInfoPath clears the value of the "info_path" field.
func (m *VodMutation) ClearInfoPath() {
	m.info_path = nil
	m.clearedFields[vod.FieldInfoPath] = struct{}{}
}

// InfoPathCleared returns if the "info_path" field was cleared in this mutation.
func (m *VodMutation) InfoPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldInfoPath]
	return ok
}

// ResetInfoPath resets all changes to the "info_path" field.
func (m *VodMutation) ResetInfoPath() {
	m.info_path = nil
	delete(m.clearedFields, vod.FieldInfoPath)
}

// SetCaptionPath sets the "caption_path" field.
func (m *VodMutation) SetCaptionPath(s string) {
	m.caption_path = &s
}

// CaptionPath returns the value of the "caption_path" field in the mutation.
func (m *VodMutation) CaptionPath() (r string, exists bool) {
	v := m.caption_path
	if v == nil {
		return
	}
	return *v, true
}

// OldCaptionPath returns the old "caption_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldCaptionPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaptionPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaptionPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaptionPath: %w", err)
	}
	return oldValue.CaptionPath, nil
}

// ClearCaptionPath clears the value of the "caption_path" field.
func (m *VodMutation) ClearCaptionPath() {
	m.caption_path = nil
	m.clearedFields[vod.FieldCaptionPath] = struct{}{}
}

// CaptionPathCleared returns if the "caption_path" field was cleared in this mutation.
func (m *VodMutation) CaptionPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldCaptionPath]
	return ok
}

// ResetCaptionPath resets all changes to the "caption_path" field.
func (m *VodMutation) ResetCaptionPath() {
	m.caption_path = nil
	delete(m.clearedFields, vod.FieldCaptionPath)
}

// SetFolderName sets the "folder_name" field.
func (m *VodMutation) SetFolderName(s string) {
	m.folder_name = &s
}

// FolderName returns the value of the "folder_name" field in the mutation.
func (m *VodMutation) FolderName() (r string, exists bool) {
	v := m.folder_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFolderName returns the old "folder_name" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldFolderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFolderName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFolderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFolderName: %w", err)
	}
	return oldValue.FolderName, nil
}

// ClearFolderName clears the value of the "folder_name" field.
func (m *VodMutation) ClearFolderName() {
	m.folder_name = nil
	m.clearedFields[vod.FieldFolderName] = struct{}{}
}

// FolderNameCleared returns if the "folder_name" field was cleared in this mutation.
func (m *VodMutation) FolderNameCleared() bool {
	_, ok := m.clearedFields[vod.FieldFolderName]
	return ok
}

// ResetFolderName resets all changes to the "folder_name" field.
func (m *VodMutation) ResetFolderName() {
	m.folder_name = nil
	delete(m.clearedFields, vod.FieldFolderName)
}

// SetFileName sets the "file_name" field.
func (m *VodMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *VodMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ClearFileName clears the value of the "file_name" field.
func (m *VodMutation) ClearFileName() {
	m.file_name = nil
	m.clearedFields[vod.FieldFileName] = struct{}{}
}

// FileNameCleared returns if the "file_name" field was cleared in this mutation.
func (m *VodMutation) FileNameCleared() bool {
	_, ok := m.clearedFields[vod.FieldFileName]
	return ok
}

// ResetFileName resets all changes to the "file_name" field.
func (m *VodMutation) ResetFileName() {
	m.file_name = nil
	delete(m.clearedFields, vod.FieldFileName)
}

// SetLocked sets the "locked" field.
func (m *VodMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *VodMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *VodMutation) ResetLocked() {
	m.locked = nil
}

// SetLocalViews sets the "local_views" field.
func (m *VodMutation) SetLocalViews(i int) {
	m.local_views = &i
	m.addlocal_views = nil
}

// LocalViews returns the value of the "local_views" field in the mutation.
func (m *VodMutation) LocalViews() (r int, exists bool) {
	v := m.local_views
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalViews returns the old "local_views" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldLocalViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalViews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalViews: %w", err)
	}
	return oldValue.LocalViews, nil
}

// AddLocalViews adds i to the "local_views" field.
func (m *VodMutation) AddLocalViews(i int) {
	if m.addlocal_views != nil {
		*m.addlocal_views += i
	} else {
		m.addlocal_views = &i
	}
}

// AddedLocalViews returns the value that was added to the "local_views" field in this mutation.
func (m *VodMutation) AddedLocalViews() (r int, exists bool) {
	v := m.addlocal_views
	if v == nil {
		return
	}
	return *v, true
}

// ResetLocalViews resets all changes to the "local_views" field.
func (m *VodMutation) ResetLocalViews() {
	m.local_views = nil
	m.addlocal_views = nil
}

// SetStreamedAt sets the "streamed_at" field.
func (m *VodMutation) SetStreamedAt(t time.Time) {
	m.streamed_at = &t
}

// StreamedAt returns the value of the "streamed_at" field in the mutation.
func (m *VodMutation) StreamedAt() (r time.Time, exists bool) {
	v := m.streamed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStreamedAt returns the old "streamed_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldStreamedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreamedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreamedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreamedAt: %w", err)
	}
	return oldValue.StreamedAt, nil
}

// ResetStreamedAt resets all changes to the "streamed_at" field.
func (m *VodMutation) ResetStreamedAt() {
	m.streamed_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VodMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VodMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VodMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *VodMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VodMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VodMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *VodMutation) SetChannelID(id uuid.UUID) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *VodMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *VodMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *VodMutation) ChannelID() (id uuid.UUID, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *VodMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *VodMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// SetQueueID sets the "queue" edge to the Queue entity by id.
func (m *VodMutation) SetQueueID(id uuid.UUID) {
	m.queue = &id
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (m *VodMutation) ClearQueue() {
	m.clearedqueue = true
}

// QueueCleared reports if the "queue" edge to the Queue entity was cleared.
func (m *VodMutation) QueueCleared() bool {
	return m.clearedqueue
}

// QueueID returns the "queue" edge ID in the mutation.
func (m *VodMutation) QueueID() (id uuid.UUID, exists bool) {
	if m.queue != nil {
		return *m.queue, true
	}
	return
}

// QueueIDs returns the "queue" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QueueID instead. It exists only for internal usage by the builders.
func (m *VodMutation) QueueIDs() (ids []uuid.UUID) {
	if id := m.queue; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQueue resets all changes to the "queue" edge.
func (m *VodMutation) ResetQueue() {
	m.queue = nil
	m.clearedqueue = false
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by ids.
func (m *VodMutation) AddPlaylistIDs(ids ...uuid.UUID) {
	if m.playlists == nil {
		m.playlists = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlist entity.
func (m *VodMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlist entity was cleared.
func (m *VodMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlist entity by IDs.
func (m *VodMutation) RemovePlaylistIDs(ids ...uuid.UUID) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlist entity.
func (m *VodMutation) RemovedPlaylistsIDs() (ids []uuid.UUID) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *VodMutation) PlaylistsIDs() (ids []uuid.UUID) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *VodMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by ids.
func (m *VodMutation) AddChapterIDs(ids ...uuid.UUID) {
	if m.chapters == nil {
		m.chapters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.chapters[ids[i]] = struct{}{}
	}
}

// ClearChapters clears the "chapters" edge to the Chapter entity.
func (m *VodMutation) ClearChapters() {
	m.clearedchapters = true
}

// ChaptersCleared reports if the "chapters" edge to the Chapter entity was cleared.
func (m *VodMutation) ChaptersCleared() bool {
	return m.clearedchapters
}

// RemoveChapterIDs removes the "chapters" edge to the Chapter entity by IDs.
func (m *VodMutation) RemoveChapterIDs(ids ...uuid.UUID) {
	if m.removedchapters == nil {
		m.removedchapters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.chapters, ids[i])
		m.removedchapters[ids[i]] = struct{}{}
	}
}

// RemovedChapters returns the removed IDs of the "chapters" edge to the Chapter entity.
func (m *VodMutation) RemovedChaptersIDs() (ids []uuid.UUID) {
	for id := range m.removedchapters {
		ids = append(ids, id)
	}
	return
}

// ChaptersIDs returns the "chapters" edge IDs in the mutation.
func (m *VodMutation) ChaptersIDs() (ids []uuid.UUID) {
	for id := range m.chapters {
		ids = append(ids, id)
	}
	return
}

// ResetChapters resets all changes to the "chapters" edge.
func (m *VodMutation) ResetChapters() {
	m.chapters = nil
	m.clearedchapters = false
	m.removedchapters = nil
}

// AddMutedSegmentIDs adds the "muted_segments" edge to the MutedSegment entity by ids.
func (m *VodMutation) AddMutedSegmentIDs(ids ...uuid.UUID) {
	if m.muted_segments == nil {
		m.muted_segments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.muted_segments[ids[i]] = struct{}{}
	}
}

// ClearMutedSegments clears the "muted_segments" edge to the MutedSegment entity.
func (m *VodMutation) ClearMutedSegments() {
	m.clearedmuted_segments = true
}

// MutedSegmentsCleared reports if the "muted_segments" edge to the MutedSegment entity was cleared.
func (m *VodMutation) MutedSegmentsCleared() bool {
	return m.clearedmuted_segments
}

// RemoveMutedSegmentIDs removes the "muted_segments" edge to the MutedSegment entity by IDs.
func (m *VodMutation) RemoveMutedSegmentIDs(ids ...uuid.UUID) {
	if m.removedmuted_segments == nil {
		m.removedmuted_segments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.muted_segments, ids[i])
		m.removedmuted_segments[ids[i]] = struct{}{}
	}
}

// RemovedMutedSegments returns the removed IDs of the "muted_segments" edge to the MutedSegment entity.
func (m *VodMutation) RemovedMutedSegmentsIDs() (ids []uuid.UUID) {
	for id := range m.removedmuted_segments {
		ids = append(ids, id)
	}
	return
}

// MutedSegmentsIDs returns the "muted_segments" edge IDs in the mutation.
func (m *VodMutation) MutedSegmentsIDs() (ids []uuid.UUID) {
	for id := range m.muted_segments {
		ids = append(ids, id)
	}
	return
}

// ResetMutedSegments resets all changes to the "muted_segments" edge.
func (m *VodMutation) ResetMutedSegments() {
	m.muted_segments = nil
	m.clearedmuted_segments = false
	m.removedmuted_segments = nil
}

// Where appends a list predicates to the VodMutation builder.
func (m *VodMutation) Where(ps ...predicate.Vod) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vod, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vod).
func (m *VodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VodMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.ext_id != nil {
		fields = append(fields, vod.FieldExtID)
	}
	if m.platform != nil {
		fields = append(fields, vod.FieldPlatform)
	}
	if m._type != nil {
		fields = append(fields, vod.FieldType)
	}
	if m.title != nil {
		fields = append(fields, vod.FieldTitle)
	}
	if m.duration != nil {
		fields = append(fields, vod.FieldDuration)
	}
	if m.views != nil {
		fields = append(fields, vod.FieldViews)
	}
	if m.resolution != nil {
		fields = append(fields, vod.FieldResolution)
	}
	if m.processing != nil {
		fields = append(fields, vod.FieldProcessing)
	}
	if m.thumbnail_path != nil {
		fields = append(fields, vod.FieldThumbnailPath)
	}
	if m.web_thumbnail_path != nil {
		fields = append(fields, vod.FieldWebThumbnailPath)
	}
	if m.video_path != nil {
		fields = append(fields, vod.FieldVideoPath)
	}
	if m.chat_path != nil {
		fields = append(fields, vod.FieldChatPath)
	}
	if m.chat_video_path != nil {
		fields = append(fields, vod.FieldChatVideoPath)
	}
	if m.info_path != nil {
		fields = append(fields, vod.FieldInfoPath)
	}
	if m.caption_path != nil {
		fields = append(fields, vod.FieldCaptionPath)
	}
	if m.folder_name != nil {
		fields = append(fields, vod.FieldFolderName)
	}
	if m.file_name != nil {
		fields = append(fields, vod.FieldFileName)
	}
	if m.locked != nil {
		fields = append(fields, vod.FieldLocked)
	}
	if m.local_views != nil {
		fields = append(fields, vod.FieldLocalViews)
	}
	if m.streamed_at != nil {
		fields = append(fields, vod.FieldStreamedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vod.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, vod.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vod.FieldExtID:
		return m.ExtID()
	case vod.FieldPlatform:
		return m.Platform()
	case vod.FieldType:
		return m.GetType()
	case vod.FieldTitle:
		return m.Title()
	case vod.FieldDuration:
		return m.Duration()
	case vod.FieldViews:
		return m.Views()
	case vod.FieldResolution:
		return m.Resolution()
	case vod.FieldProcessing:
		return m.Processing()
	case vod.FieldThumbnailPath:
		return m.ThumbnailPath()
	case vod.FieldWebThumbnailPath:
		return m.WebThumbnailPath()
	case vod.FieldVideoPath:
		return m.VideoPath()
	case vod.FieldChatPath:
		return m.ChatPath()
	case vod.FieldChatVideoPath:
		return m.ChatVideoPath()
	case vod.FieldInfoPath:
		return m.InfoPath()
	case vod.FieldCaptionPath:
		return m.CaptionPath()
	case vod.FieldFolderName:
		return m.FolderName()
	case vod.FieldFileName:
		return m.FileName()
	case vod.FieldLocked:
		return m.Locked()
	case vod.FieldLocalViews:
		return m.LocalViews()
	case vod.FieldStreamedAt:
		return m.StreamedAt()
	case vod.FieldUpdatedAt:
		return m.UpdatedAt()
	case vod.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vod.FieldExtID:
		return m.OldExtID(ctx)
	case vod.FieldPlatform:
		return m.OldPlatform(ctx)
	case vod.FieldType:
		return m.OldType(ctx)
	case vod.FieldTitle:
		return m.OldTitle(ctx)
	case vod.FieldDuration:
		return m.OldDuration(ctx)
	case vod.FieldViews:
		return m.OldViews(ctx)
	case vod.FieldResolution:
		return m.OldResolution(ctx)
	case vod.FieldProcessing:
		return m.OldProcessing(ctx)
	case vod.FieldThumbnailPath:
		return m.OldThumbnailPath(ctx)
	case vod.FieldWebThumbnailPath:
		return m.OldWebThumbnailPath(ctx)
	case vod.FieldVideoPath:
		return m.OldVideoPath(ctx)
	case vod.FieldChatPath:
		return m.OldChatPath(ctx)
	case vod.FieldChatVideoPath:
		return m.OldChatVideoPath(ctx)
	case vod.FieldInfoPath:
		return m.OldInfoPath(ctx)
	case vod.FieldCaptionPath:
		return m.OldCaptionPath(ctx)
	case vod.FieldFolderName:
		return m.OldFolderName(ctx)
	case vod.FieldFileName:
		return m.OldFileName(ctx)
	case vod.FieldLocked:
		return m.OldLocked(ctx)
	case vod.FieldLocalViews:
		return m.OldLocalViews(ctx)
	case vod.FieldStreamedAt:
		return m.OldStreamedAt(ctx)
	case vod.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vod.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Vod field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vod.FieldExtID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtID(v)
		return nil
	case vod.FieldPlatform:
		v, ok := value.(utils.VodPlatform)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case vod.FieldType:
		v, ok := value.(utils.VodType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case vod.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case vod.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case vod.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViews(v)
		return nil
	case vod.FieldResolution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolution(v)
		return nil
	case vod.FieldProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessing(v)
		return nil
	case vod.FieldThumbnailPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailPath(v)
		return nil
	case vod.FieldWebThumbnailPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebThumbnailPath(v)
		return nil
	case vod.FieldVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoPath(v)
		return nil
	case vod.FieldChatPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatPath(v)
		return nil
	case vod.FieldChatVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatVideoPath(v)
		return nil
	case vod.FieldInfoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfoPath(v)
		return nil
	case vod.FieldCaptionPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaptionPath(v)
		return nil
	case vod.FieldFolderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFolderName(v)
		return nil
	case vod.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case vod.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case vod.FieldLocalViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalViews(v)
		return nil
	case vod.FieldStreamedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreamedAt(v)
		return nil
	case vod.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vod.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Vod field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VodMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, vod.FieldDuration)
	}
	if m.addviews != nil {
		fields = append(fields, vod.FieldViews)
	}
	if m.addlocal_views != nil {
		fields = append(fields, vod.FieldLocalViews)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VodMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vod.FieldDuration:
		return m.AddedDuration()
	case vod.FieldViews:
		return m.AddedViews()
	case vod.FieldLocalViews:
		return m.AddedLocalViews()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VodMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vod.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case vod.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViews(v)
		return nil
	case vod.FieldLocalViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLocalViews(v)
		return nil
	}
	return fmt.Errorf("unknown Vod numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VodMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vod.FieldResolution) {
		fields = append(fields, vod.FieldResolution)
	}
	if m.FieldCleared(vod.FieldThumbnailPath) {
		fields = append(fields, vod.FieldThumbnailPath)
	}
	if m.FieldCleared(vod.FieldChatPath) {
		fields = append(fields, vod.FieldChatPath)
	}
	if m.FieldCleared(vod.FieldChatVideoPath) {
		fields = append(fields, vod.FieldChatVideoPath)
	}
	if m.FieldCleared(vod.FieldInfoPath) {
		fields = append(fields, vod.FieldInfoPath)
	}
	if m.FieldCleared(vod.FieldCaptionPath) {
		fields = append(fields, vod.FieldCaptionPath)
	}
	if m.FieldCleared(vod.FieldFolderName) {
		fields = append(fields, vod.FieldFolderName)
	}
	if m.FieldCleared(vod.FieldFileName) {
		fields = append(fields, vod.FieldFileName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VodMutation) ClearField(name string) error {
	switch name {
	case vod.FieldResolution:
		m.ClearResolution()
		return nil
	case vod.FieldThumbnailPath:
		m.ClearThumbnailPath()
		return nil
	case vod.FieldChatPath:
		m.ClearChatPath()
		return nil
	case vod.FieldChatVideoPath:
		m.ClearChatVideoPath()
		return nil
	case vod.FieldInfoPath:
		m.ClearInfoPath()
		return nil
	case vod.FieldCaptionPath:
		m.ClearCaptionPath()
		return nil
	case vod.FieldFolderName:
		m.ClearFolderName()
		return nil
	case vod.FieldFileName:
		m.ClearFileName()
		return nil
	}
	return fmt.Errorf("unknown Vod nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VodMutation) ResetField(name string) error {
	switch name {
	case vod.FieldExtID:
		m.ResetExtID()
		return nil
	case vod.FieldPlatform:
		m.ResetPlatform()
		return nil
	case vod.FieldType:
		m.ResetType()
		return nil
	case vod.FieldTitle:
		m.ResetTitle()
		return nil
	case vod.FieldDuration:
		m.ResetDuration()
		return nil
	case vod.FieldViews:
		m.ResetViews()
		return nil
	case vod.FieldResolution:
		m.ResetResolution()
		return nil
	case vod.FieldProcessing:
		m.ResetProcessing()
		return nil
	case vod.FieldThumbnailPath:
		m.ResetThumbnailPath()
		return nil
	case vod.FieldWebThumbnailPath:
		m.ResetWebThumbnailPath()
		return nil
	case vod.FieldVideoPath:
		m.ResetVideoPath()
		return nil
	case vod.FieldChatPath:
		m.ResetChatPath()
		return nil
	case vod.FieldChatVideoPath:
		m.ResetChatVideoPath()
		return nil
	case vod.FieldInfoPath:
		m.ResetInfoPath()
		return nil
	case vod.FieldCaptionPath:
		m.ResetCaptionPath()
		return nil
	case vod.FieldFolderName:
		m.ResetFolderName()
		return nil
	case vod.FieldFileName:
		m.ResetFileName()
		return nil
	case vod.FieldLocked:
		m.ResetLocked()
		return nil
	case vod.FieldLocalViews:
		m.ResetLocalViews()
		return nil
	case vod.FieldStreamedAt:
		m.ResetStreamedAt()
		return nil
	case vod.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vod.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Vod field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VodMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.channel != nil {
		edges = append(edges, vod.EdgeChannel)
	}
	if m.queue != nil {
		edges = append(edges, vod.EdgeQueue)
	}
	if m.playlists != nil {
		edges = append(edges, vod.EdgePlaylists)
	}
	if m.chapters != nil {
		edges = append(edges, vod.EdgeChapters)
	}
	if m.muted_segments != nil {
		edges = append(edges, vod.EdgeMutedSegments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vod.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case vod.EdgeQueue:
		if id := m.queue; id != nil {
			return []ent.Value{*id}
		}
	case vod.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	case vod.EdgeChapters:
		ids := make([]ent.Value, 0, len(m.chapters))
		for id := range m.chapters {
			ids = append(ids, id)
		}
		return ids
	case vod.EdgeMutedSegments:
		ids := make([]ent.Value, 0, len(m.muted_segments))
		for id := range m.muted_segments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedplaylists != nil {
		edges = append(edges, vod.EdgePlaylists)
	}
	if m.removedchapters != nil {
		edges = append(edges, vod.EdgeChapters)
	}
	if m.removedmuted_segments != nil {
		edges = append(edges, vod.EdgeMutedSegments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vod.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	case vod.EdgeChapters:
		ids := make([]ent.Value, 0, len(m.removedchapters))
		for id := range m.removedchapters {
			ids = append(ids, id)
		}
		return ids
	case vod.EdgeMutedSegments:
		ids := make([]ent.Value, 0, len(m.removedmuted_segments))
		for id := range m.removedmuted_segments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedchannel {
		edges = append(edges, vod.EdgeChannel)
	}
	if m.clearedqueue {
		edges = append(edges, vod.EdgeQueue)
	}
	if m.clearedplaylists {
		edges = append(edges, vod.EdgePlaylists)
	}
	if m.clearedchapters {
		edges = append(edges, vod.EdgeChapters)
	}
	if m.clearedmuted_segments {
		edges = append(edges, vod.EdgeMutedSegments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VodMutation) EdgeCleared(name string) bool {
	switch name {
	case vod.EdgeChannel:
		return m.clearedchannel
	case vod.EdgeQueue:
		return m.clearedqueue
	case vod.EdgePlaylists:
		return m.clearedplaylists
	case vod.EdgeChapters:
		return m.clearedchapters
	case vod.EdgeMutedSegments:
		return m.clearedmuted_segments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VodMutation) ClearEdge(name string) error {
	switch name {
	case vod.EdgeChannel:
		m.ClearChannel()
		return nil
	case vod.EdgeQueue:
		m.ClearQueue()
		return nil
	}
	return fmt.Errorf("unknown Vod unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VodMutation) ResetEdge(name string) error {
	switch name {
	case vod.EdgeChannel:
		m.ResetChannel()
		return nil
	case vod.EdgeQueue:
		m.ResetQueue()
		return nil
	case vod.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	case vod.EdgeChapters:
		m.ResetChapters()
		return nil
	case vod.EdgeMutedSegments:
		m.ResetMutedSegments()
		return nil
	}
	return fmt.Errorf("unknown Vod edge %s", name)
}
