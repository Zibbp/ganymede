// Code generated by ent, DO NOT EDIT.

package livetitleregex

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldLTE(FieldID, id))
}

// Negative applies equality check predicate on the "negative" field. It's identical to NegativeEQ.
func Negative(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldNegative, v))
}

// Regex applies equality check predicate on the "regex" field. It's identical to RegexEQ.
func Regex(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldRegex, v))
}

// ApplyToVideos applies equality check predicate on the "apply_to_videos" field. It's identical to ApplyToVideosEQ.
func ApplyToVideos(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldApplyToVideos, v))
}

// NegativeEQ applies the EQ predicate on the "negative" field.
func NegativeEQ(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldNegative, v))
}

// NegativeNEQ applies the NEQ predicate on the "negative" field.
func NegativeNEQ(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNEQ(FieldNegative, v))
}

// RegexEQ applies the EQ predicate on the "regex" field.
func RegexEQ(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldRegex, v))
}

// RegexNEQ applies the NEQ predicate on the "regex" field.
func RegexNEQ(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNEQ(FieldRegex, v))
}

// RegexIn applies the In predicate on the "regex" field.
func RegexIn(vs ...string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldIn(FieldRegex, vs...))
}

// RegexNotIn applies the NotIn predicate on the "regex" field.
func RegexNotIn(vs ...string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNotIn(FieldRegex, vs...))
}

// RegexGT applies the GT predicate on the "regex" field.
func RegexGT(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldGT(FieldRegex, v))
}

// RegexGTE applies the GTE predicate on the "regex" field.
func RegexGTE(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldGTE(FieldRegex, v))
}

// RegexLT applies the LT predicate on the "regex" field.
func RegexLT(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldLT(FieldRegex, v))
}

// RegexLTE applies the LTE predicate on the "regex" field.
func RegexLTE(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldLTE(FieldRegex, v))
}

// RegexContains applies the Contains predicate on the "regex" field.
func RegexContains(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldContains(FieldRegex, v))
}

// RegexHasPrefix applies the HasPrefix predicate on the "regex" field.
func RegexHasPrefix(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldHasPrefix(FieldRegex, v))
}

// RegexHasSuffix applies the HasSuffix predicate on the "regex" field.
func RegexHasSuffix(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldHasSuffix(FieldRegex, v))
}

// RegexEqualFold applies the EqualFold predicate on the "regex" field.
func RegexEqualFold(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEqualFold(FieldRegex, v))
}

// RegexContainsFold applies the ContainsFold predicate on the "regex" field.
func RegexContainsFold(v string) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldContainsFold(FieldRegex, v))
}

// ApplyToVideosEQ applies the EQ predicate on the "apply_to_videos" field.
func ApplyToVideosEQ(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldEQ(FieldApplyToVideos, v))
}

// ApplyToVideosNEQ applies the NEQ predicate on the "apply_to_videos" field.
func ApplyToVideosNEQ(v bool) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.FieldNEQ(FieldApplyToVideos, v))
}

// HasLive applies the HasEdge predicate on the "live" edge.
func HasLive() predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LiveTable, LiveColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLiveWith applies the HasEdge predicate on the "live" edge with a given conditions (other predicates).
func HasLiveWith(preds ...predicate.Live) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(func(s *sql.Selector) {
		step := newLiveStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LiveTitleRegex) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LiveTitleRegex) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LiveTitleRegex) predicate.LiveTitleRegex {
	return predicate.LiveTitleRegex(sql.NotPredicates(p))
}
