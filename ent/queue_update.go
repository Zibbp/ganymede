// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// QueueUpdate is the builder for updating Queue entities.
type QueueUpdate struct {
	config
	hooks    []Hook
	mutation *QueueMutation
}

// Where appends a list predicates to the QueueUpdate builder.
func (qu *QueueUpdate) Where(ps ...predicate.Queue) *QueueUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetLiveArchive sets the "live_archive" field.
func (qu *QueueUpdate) SetLiveArchive(b bool) *QueueUpdate {
	qu.mutation.SetLiveArchive(b)
	return qu
}

// SetNillableLiveArchive sets the "live_archive" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableLiveArchive(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetLiveArchive(*b)
	}
	return qu
}

// SetOnHold sets the "on_hold" field.
func (qu *QueueUpdate) SetOnHold(b bool) *QueueUpdate {
	qu.mutation.SetOnHold(b)
	return qu
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableOnHold(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetOnHold(*b)
	}
	return qu
}

// SetVideoProcessing sets the "video_processing" field.
func (qu *QueueUpdate) SetVideoProcessing(b bool) *QueueUpdate {
	qu.mutation.SetVideoProcessing(b)
	return qu
}

// SetNillableVideoProcessing sets the "video_processing" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableVideoProcessing(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetVideoProcessing(*b)
	}
	return qu
}

// SetChatProcessing sets the "chat_processing" field.
func (qu *QueueUpdate) SetChatProcessing(b bool) *QueueUpdate {
	qu.mutation.SetChatProcessing(b)
	return qu
}

// SetNillableChatProcessing sets the "chat_processing" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableChatProcessing(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetChatProcessing(*b)
	}
	return qu
}

// SetProcessing sets the "processing" field.
func (qu *QueueUpdate) SetProcessing(b bool) *QueueUpdate {
	qu.mutation.SetProcessing(b)
	return qu
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableProcessing(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetProcessing(*b)
	}
	return qu
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (qu *QueueUpdate) SetTaskVodCreateFolder(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVodCreateFolder(us)
	return qu
}

// SetNillableTaskVodCreateFolder sets the "task_vod_create_folder" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVodCreateFolder(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVodCreateFolder(*us)
	}
	return qu
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (qu *QueueUpdate) ClearTaskVodCreateFolder() *QueueUpdate {
	qu.mutation.ClearTaskVodCreateFolder()
	return qu
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (qu *QueueUpdate) SetTaskVodDownloadThumbnail(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVodDownloadThumbnail(us)
	return qu
}

// SetNillableTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVodDownloadThumbnail(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVodDownloadThumbnail(*us)
	}
	return qu
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (qu *QueueUpdate) ClearTaskVodDownloadThumbnail() *QueueUpdate {
	qu.mutation.ClearTaskVodDownloadThumbnail()
	return qu
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (qu *QueueUpdate) SetTaskVodSaveInfo(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVodSaveInfo(us)
	return qu
}

// SetNillableTaskVodSaveInfo sets the "task_vod_save_info" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVodSaveInfo(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVodSaveInfo(*us)
	}
	return qu
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (qu *QueueUpdate) ClearTaskVodSaveInfo() *QueueUpdate {
	qu.mutation.ClearTaskVodSaveInfo()
	return qu
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (qu *QueueUpdate) SetTaskVideoDownload(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVideoDownload(us)
	return qu
}

// SetNillableTaskVideoDownload sets the "task_video_download" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVideoDownload(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVideoDownload(*us)
	}
	return qu
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (qu *QueueUpdate) ClearTaskVideoDownload() *QueueUpdate {
	qu.mutation.ClearTaskVideoDownload()
	return qu
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (qu *QueueUpdate) SetTaskVideoConvert(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVideoConvert(us)
	return qu
}

// SetNillableTaskVideoConvert sets the "task_video_convert" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVideoConvert(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVideoConvert(*us)
	}
	return qu
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (qu *QueueUpdate) ClearTaskVideoConvert() *QueueUpdate {
	qu.mutation.ClearTaskVideoConvert()
	return qu
}

// SetTaskVideoMove sets the "task_video_move" field.
func (qu *QueueUpdate) SetTaskVideoMove(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskVideoMove(us)
	return qu
}

// SetNillableTaskVideoMove sets the "task_video_move" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskVideoMove(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskVideoMove(*us)
	}
	return qu
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (qu *QueueUpdate) ClearTaskVideoMove() *QueueUpdate {
	qu.mutation.ClearTaskVideoMove()
	return qu
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (qu *QueueUpdate) SetTaskChatDownload(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskChatDownload(us)
	return qu
}

// SetNillableTaskChatDownload sets the "task_chat_download" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskChatDownload(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskChatDownload(*us)
	}
	return qu
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (qu *QueueUpdate) ClearTaskChatDownload() *QueueUpdate {
	qu.mutation.ClearTaskChatDownload()
	return qu
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (qu *QueueUpdate) SetTaskChatConvert(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskChatConvert(us)
	return qu
}

// SetNillableTaskChatConvert sets the "task_chat_convert" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskChatConvert(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskChatConvert(*us)
	}
	return qu
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (qu *QueueUpdate) ClearTaskChatConvert() *QueueUpdate {
	qu.mutation.ClearTaskChatConvert()
	return qu
}

// SetTaskChatRender sets the "task_chat_render" field.
func (qu *QueueUpdate) SetTaskChatRender(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskChatRender(us)
	return qu
}

// SetNillableTaskChatRender sets the "task_chat_render" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskChatRender(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskChatRender(*us)
	}
	return qu
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (qu *QueueUpdate) ClearTaskChatRender() *QueueUpdate {
	qu.mutation.ClearTaskChatRender()
	return qu
}

// SetTaskChatMove sets the "task_chat_move" field.
func (qu *QueueUpdate) SetTaskChatMove(us utils.TaskStatus) *QueueUpdate {
	qu.mutation.SetTaskChatMove(us)
	return qu
}

// SetNillableTaskChatMove sets the "task_chat_move" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableTaskChatMove(us *utils.TaskStatus) *QueueUpdate {
	if us != nil {
		qu.SetTaskChatMove(*us)
	}
	return qu
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (qu *QueueUpdate) ClearTaskChatMove() *QueueUpdate {
	qu.mutation.ClearTaskChatMove()
	return qu
}

// SetChatStart sets the "chat_start" field.
func (qu *QueueUpdate) SetChatStart(t time.Time) *QueueUpdate {
	qu.mutation.SetChatStart(t)
	return qu
}

// SetNillableChatStart sets the "chat_start" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableChatStart(t *time.Time) *QueueUpdate {
	if t != nil {
		qu.SetChatStart(*t)
	}
	return qu
}

// ClearChatStart clears the value of the "chat_start" field.
func (qu *QueueUpdate) ClearChatStart() *QueueUpdate {
	qu.mutation.ClearChatStart()
	return qu
}

// SetRenderChat sets the "render_chat" field.
func (qu *QueueUpdate) SetRenderChat(b bool) *QueueUpdate {
	qu.mutation.SetRenderChat(b)
	return qu
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableRenderChat(b *bool) *QueueUpdate {
	if b != nil {
		qu.SetRenderChat(*b)
	}
	return qu
}

// ClearRenderChat clears the value of the "render_chat" field.
func (qu *QueueUpdate) ClearRenderChat() *QueueUpdate {
	qu.mutation.ClearRenderChat()
	return qu
}

// SetWorkflowID sets the "workflow_id" field.
func (qu *QueueUpdate) SetWorkflowID(s string) *QueueUpdate {
	qu.mutation.SetWorkflowID(s)
	return qu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableWorkflowID(s *string) *QueueUpdate {
	if s != nil {
		qu.SetWorkflowID(*s)
	}
	return qu
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (qu *QueueUpdate) ClearWorkflowID() *QueueUpdate {
	qu.mutation.ClearWorkflowID()
	return qu
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (qu *QueueUpdate) SetWorkflowRunID(s string) *QueueUpdate {
	qu.mutation.SetWorkflowRunID(s)
	return qu
}

// SetNillableWorkflowRunID sets the "workflow_run_id" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableWorkflowRunID(s *string) *QueueUpdate {
	if s != nil {
		qu.SetWorkflowRunID(*s)
	}
	return qu
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (qu *QueueUpdate) ClearWorkflowRunID() *QueueUpdate {
	qu.mutation.ClearWorkflowRunID()
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QueueUpdate) SetUpdatedAt(t time.Time) *QueueUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (qu *QueueUpdate) SetVodID(id uuid.UUID) *QueueUpdate {
	qu.mutation.SetVodID(id)
	return qu
}

// SetVod sets the "vod" edge to the Vod entity.
func (qu *QueueUpdate) SetVod(v *Vod) *QueueUpdate {
	return qu.SetVodID(v.ID)
}

// Mutation returns the QueueMutation object of the builder.
func (qu *QueueUpdate) Mutation() *QueueMutation {
	return qu.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (qu *QueueUpdate) ClearVod() *QueueUpdate {
	qu.mutation.ClearVod()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QueueUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QueueUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QueueUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QueueUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QueueUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := queue.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QueueUpdate) check() error {
	if v, ok := qu.mutation.TaskVodCreateFolder(); ok {
		if err := queue.TaskVodCreateFolderValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_create_folder", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_create_folder": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskVodDownloadThumbnail(); ok {
		if err := queue.TaskVodDownloadThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_download_thumbnail", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_download_thumbnail": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskVodSaveInfo(); ok {
		if err := queue.TaskVodSaveInfoValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_save_info", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_save_info": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskVideoDownload(); ok {
		if err := queue.TaskVideoDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_video_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_download": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskVideoConvert(); ok {
		if err := queue.TaskVideoConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_video_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_convert": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskVideoMove(); ok {
		if err := queue.TaskVideoMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_video_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_move": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskChatDownload(); ok {
		if err := queue.TaskChatDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_download": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskChatConvert(); ok {
		if err := queue.TaskChatConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_convert": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskChatRender(); ok {
		if err := queue.TaskChatRenderValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_render", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_render": %w`, err)}
		}
	}
	if v, ok := qu.mutation.TaskChatMove(); ok {
		if err := queue.TaskChatMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_move": %w`, err)}
		}
	}
	if _, ok := qu.mutation.VodID(); qu.mutation.VodCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Queue.vod"`)
	}
	return nil
}

func (qu *QueueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.LiveArchive(); ok {
		_spec.SetField(queue.FieldLiveArchive, field.TypeBool, value)
	}
	if value, ok := qu.mutation.OnHold(); ok {
		_spec.SetField(queue.FieldOnHold, field.TypeBool, value)
	}
	if value, ok := qu.mutation.VideoProcessing(); ok {
		_spec.SetField(queue.FieldVideoProcessing, field.TypeBool, value)
	}
	if value, ok := qu.mutation.ChatProcessing(); ok {
		_spec.SetField(queue.FieldChatProcessing, field.TypeBool, value)
	}
	if value, ok := qu.mutation.Processing(); ok {
		_spec.SetField(queue.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := qu.mutation.TaskVodCreateFolder(); ok {
		_spec.SetField(queue.FieldTaskVodCreateFolder, field.TypeEnum, value)
	}
	if qu.mutation.TaskVodCreateFolderCleared() {
		_spec.ClearField(queue.FieldTaskVodCreateFolder, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskVodDownloadThumbnail(); ok {
		_spec.SetField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum, value)
	}
	if qu.mutation.TaskVodDownloadThumbnailCleared() {
		_spec.ClearField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskVodSaveInfo(); ok {
		_spec.SetField(queue.FieldTaskVodSaveInfo, field.TypeEnum, value)
	}
	if qu.mutation.TaskVodSaveInfoCleared() {
		_spec.ClearField(queue.FieldTaskVodSaveInfo, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskVideoDownload(); ok {
		_spec.SetField(queue.FieldTaskVideoDownload, field.TypeEnum, value)
	}
	if qu.mutation.TaskVideoDownloadCleared() {
		_spec.ClearField(queue.FieldTaskVideoDownload, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskVideoConvert(); ok {
		_spec.SetField(queue.FieldTaskVideoConvert, field.TypeEnum, value)
	}
	if qu.mutation.TaskVideoConvertCleared() {
		_spec.ClearField(queue.FieldTaskVideoConvert, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskVideoMove(); ok {
		_spec.SetField(queue.FieldTaskVideoMove, field.TypeEnum, value)
	}
	if qu.mutation.TaskVideoMoveCleared() {
		_spec.ClearField(queue.FieldTaskVideoMove, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskChatDownload(); ok {
		_spec.SetField(queue.FieldTaskChatDownload, field.TypeEnum, value)
	}
	if qu.mutation.TaskChatDownloadCleared() {
		_spec.ClearField(queue.FieldTaskChatDownload, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskChatConvert(); ok {
		_spec.SetField(queue.FieldTaskChatConvert, field.TypeEnum, value)
	}
	if qu.mutation.TaskChatConvertCleared() {
		_spec.ClearField(queue.FieldTaskChatConvert, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskChatRender(); ok {
		_spec.SetField(queue.FieldTaskChatRender, field.TypeEnum, value)
	}
	if qu.mutation.TaskChatRenderCleared() {
		_spec.ClearField(queue.FieldTaskChatRender, field.TypeEnum)
	}
	if value, ok := qu.mutation.TaskChatMove(); ok {
		_spec.SetField(queue.FieldTaskChatMove, field.TypeEnum, value)
	}
	if qu.mutation.TaskChatMoveCleared() {
		_spec.ClearField(queue.FieldTaskChatMove, field.TypeEnum)
	}
	if value, ok := qu.mutation.ChatStart(); ok {
		_spec.SetField(queue.FieldChatStart, field.TypeTime, value)
	}
	if qu.mutation.ChatStartCleared() {
		_spec.ClearField(queue.FieldChatStart, field.TypeTime)
	}
	if value, ok := qu.mutation.RenderChat(); ok {
		_spec.SetField(queue.FieldRenderChat, field.TypeBool, value)
	}
	if qu.mutation.RenderChatCleared() {
		_spec.ClearField(queue.FieldRenderChat, field.TypeBool)
	}
	if value, ok := qu.mutation.WorkflowID(); ok {
		_spec.SetField(queue.FieldWorkflowID, field.TypeString, value)
	}
	if qu.mutation.WorkflowIDCleared() {
		_spec.ClearField(queue.FieldWorkflowID, field.TypeString)
	}
	if value, ok := qu.mutation.WorkflowRunID(); ok {
		_spec.SetField(queue.FieldWorkflowRunID, field.TypeString, value)
	}
	if qu.mutation.WorkflowRunIDCleared() {
		_spec.ClearField(queue.FieldWorkflowRunID, field.TypeString)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(queue.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QueueUpdateOne is the builder for updating a single Queue entity.
type QueueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueueMutation
}

// SetLiveArchive sets the "live_archive" field.
func (quo *QueueUpdateOne) SetLiveArchive(b bool) *QueueUpdateOne {
	quo.mutation.SetLiveArchive(b)
	return quo
}

// SetNillableLiveArchive sets the "live_archive" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableLiveArchive(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetLiveArchive(*b)
	}
	return quo
}

// SetOnHold sets the "on_hold" field.
func (quo *QueueUpdateOne) SetOnHold(b bool) *QueueUpdateOne {
	quo.mutation.SetOnHold(b)
	return quo
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableOnHold(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetOnHold(*b)
	}
	return quo
}

// SetVideoProcessing sets the "video_processing" field.
func (quo *QueueUpdateOne) SetVideoProcessing(b bool) *QueueUpdateOne {
	quo.mutation.SetVideoProcessing(b)
	return quo
}

// SetNillableVideoProcessing sets the "video_processing" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableVideoProcessing(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetVideoProcessing(*b)
	}
	return quo
}

// SetChatProcessing sets the "chat_processing" field.
func (quo *QueueUpdateOne) SetChatProcessing(b bool) *QueueUpdateOne {
	quo.mutation.SetChatProcessing(b)
	return quo
}

// SetNillableChatProcessing sets the "chat_processing" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableChatProcessing(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetChatProcessing(*b)
	}
	return quo
}

// SetProcessing sets the "processing" field.
func (quo *QueueUpdateOne) SetProcessing(b bool) *QueueUpdateOne {
	quo.mutation.SetProcessing(b)
	return quo
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableProcessing(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetProcessing(*b)
	}
	return quo
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (quo *QueueUpdateOne) SetTaskVodCreateFolder(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVodCreateFolder(us)
	return quo
}

// SetNillableTaskVodCreateFolder sets the "task_vod_create_folder" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVodCreateFolder(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVodCreateFolder(*us)
	}
	return quo
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (quo *QueueUpdateOne) ClearTaskVodCreateFolder() *QueueUpdateOne {
	quo.mutation.ClearTaskVodCreateFolder()
	return quo
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (quo *QueueUpdateOne) SetTaskVodDownloadThumbnail(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVodDownloadThumbnail(us)
	return quo
}

// SetNillableTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVodDownloadThumbnail(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVodDownloadThumbnail(*us)
	}
	return quo
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (quo *QueueUpdateOne) ClearTaskVodDownloadThumbnail() *QueueUpdateOne {
	quo.mutation.ClearTaskVodDownloadThumbnail()
	return quo
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (quo *QueueUpdateOne) SetTaskVodSaveInfo(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVodSaveInfo(us)
	return quo
}

// SetNillableTaskVodSaveInfo sets the "task_vod_save_info" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVodSaveInfo(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVodSaveInfo(*us)
	}
	return quo
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (quo *QueueUpdateOne) ClearTaskVodSaveInfo() *QueueUpdateOne {
	quo.mutation.ClearTaskVodSaveInfo()
	return quo
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (quo *QueueUpdateOne) SetTaskVideoDownload(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVideoDownload(us)
	return quo
}

// SetNillableTaskVideoDownload sets the "task_video_download" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVideoDownload(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVideoDownload(*us)
	}
	return quo
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (quo *QueueUpdateOne) ClearTaskVideoDownload() *QueueUpdateOne {
	quo.mutation.ClearTaskVideoDownload()
	return quo
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (quo *QueueUpdateOne) SetTaskVideoConvert(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVideoConvert(us)
	return quo
}

// SetNillableTaskVideoConvert sets the "task_video_convert" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVideoConvert(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVideoConvert(*us)
	}
	return quo
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (quo *QueueUpdateOne) ClearTaskVideoConvert() *QueueUpdateOne {
	quo.mutation.ClearTaskVideoConvert()
	return quo
}

// SetTaskVideoMove sets the "task_video_move" field.
func (quo *QueueUpdateOne) SetTaskVideoMove(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskVideoMove(us)
	return quo
}

// SetNillableTaskVideoMove sets the "task_video_move" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskVideoMove(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskVideoMove(*us)
	}
	return quo
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (quo *QueueUpdateOne) ClearTaskVideoMove() *QueueUpdateOne {
	quo.mutation.ClearTaskVideoMove()
	return quo
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (quo *QueueUpdateOne) SetTaskChatDownload(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskChatDownload(us)
	return quo
}

// SetNillableTaskChatDownload sets the "task_chat_download" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskChatDownload(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskChatDownload(*us)
	}
	return quo
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (quo *QueueUpdateOne) ClearTaskChatDownload() *QueueUpdateOne {
	quo.mutation.ClearTaskChatDownload()
	return quo
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (quo *QueueUpdateOne) SetTaskChatConvert(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskChatConvert(us)
	return quo
}

// SetNillableTaskChatConvert sets the "task_chat_convert" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskChatConvert(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskChatConvert(*us)
	}
	return quo
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (quo *QueueUpdateOne) ClearTaskChatConvert() *QueueUpdateOne {
	quo.mutation.ClearTaskChatConvert()
	return quo
}

// SetTaskChatRender sets the "task_chat_render" field.
func (quo *QueueUpdateOne) SetTaskChatRender(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskChatRender(us)
	return quo
}

// SetNillableTaskChatRender sets the "task_chat_render" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskChatRender(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskChatRender(*us)
	}
	return quo
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (quo *QueueUpdateOne) ClearTaskChatRender() *QueueUpdateOne {
	quo.mutation.ClearTaskChatRender()
	return quo
}

// SetTaskChatMove sets the "task_chat_move" field.
func (quo *QueueUpdateOne) SetTaskChatMove(us utils.TaskStatus) *QueueUpdateOne {
	quo.mutation.SetTaskChatMove(us)
	return quo
}

// SetNillableTaskChatMove sets the "task_chat_move" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableTaskChatMove(us *utils.TaskStatus) *QueueUpdateOne {
	if us != nil {
		quo.SetTaskChatMove(*us)
	}
	return quo
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (quo *QueueUpdateOne) ClearTaskChatMove() *QueueUpdateOne {
	quo.mutation.ClearTaskChatMove()
	return quo
}

// SetChatStart sets the "chat_start" field.
func (quo *QueueUpdateOne) SetChatStart(t time.Time) *QueueUpdateOne {
	quo.mutation.SetChatStart(t)
	return quo
}

// SetNillableChatStart sets the "chat_start" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableChatStart(t *time.Time) *QueueUpdateOne {
	if t != nil {
		quo.SetChatStart(*t)
	}
	return quo
}

// ClearChatStart clears the value of the "chat_start" field.
func (quo *QueueUpdateOne) ClearChatStart() *QueueUpdateOne {
	quo.mutation.ClearChatStart()
	return quo
}

// SetRenderChat sets the "render_chat" field.
func (quo *QueueUpdateOne) SetRenderChat(b bool) *QueueUpdateOne {
	quo.mutation.SetRenderChat(b)
	return quo
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableRenderChat(b *bool) *QueueUpdateOne {
	if b != nil {
		quo.SetRenderChat(*b)
	}
	return quo
}

// ClearRenderChat clears the value of the "render_chat" field.
func (quo *QueueUpdateOne) ClearRenderChat() *QueueUpdateOne {
	quo.mutation.ClearRenderChat()
	return quo
}

// SetWorkflowID sets the "workflow_id" field.
func (quo *QueueUpdateOne) SetWorkflowID(s string) *QueueUpdateOne {
	quo.mutation.SetWorkflowID(s)
	return quo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableWorkflowID(s *string) *QueueUpdateOne {
	if s != nil {
		quo.SetWorkflowID(*s)
	}
	return quo
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (quo *QueueUpdateOne) ClearWorkflowID() *QueueUpdateOne {
	quo.mutation.ClearWorkflowID()
	return quo
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (quo *QueueUpdateOne) SetWorkflowRunID(s string) *QueueUpdateOne {
	quo.mutation.SetWorkflowRunID(s)
	return quo
}

// SetNillableWorkflowRunID sets the "workflow_run_id" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableWorkflowRunID(s *string) *QueueUpdateOne {
	if s != nil {
		quo.SetWorkflowRunID(*s)
	}
	return quo
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (quo *QueueUpdateOne) ClearWorkflowRunID() *QueueUpdateOne {
	quo.mutation.ClearWorkflowRunID()
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QueueUpdateOne) SetUpdatedAt(t time.Time) *QueueUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (quo *QueueUpdateOne) SetVodID(id uuid.UUID) *QueueUpdateOne {
	quo.mutation.SetVodID(id)
	return quo
}

// SetVod sets the "vod" edge to the Vod entity.
func (quo *QueueUpdateOne) SetVod(v *Vod) *QueueUpdateOne {
	return quo.SetVodID(v.ID)
}

// Mutation returns the QueueMutation object of the builder.
func (quo *QueueUpdateOne) Mutation() *QueueMutation {
	return quo.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (quo *QueueUpdateOne) ClearVod() *QueueUpdateOne {
	quo.mutation.ClearVod()
	return quo
}

// Where appends a list predicates to the QueueUpdate builder.
func (quo *QueueUpdateOne) Where(ps ...predicate.Queue) *QueueUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QueueUpdateOne) Select(field string, fields ...string) *QueueUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Queue entity.
func (quo *QueueUpdateOne) Save(ctx context.Context) (*Queue, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QueueUpdateOne) SaveX(ctx context.Context) *Queue {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QueueUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QueueUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QueueUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := queue.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QueueUpdateOne) check() error {
	if v, ok := quo.mutation.TaskVodCreateFolder(); ok {
		if err := queue.TaskVodCreateFolderValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_create_folder", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_create_folder": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskVodDownloadThumbnail(); ok {
		if err := queue.TaskVodDownloadThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_download_thumbnail", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_download_thumbnail": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskVodSaveInfo(); ok {
		if err := queue.TaskVodSaveInfoValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_save_info", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_save_info": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskVideoDownload(); ok {
		if err := queue.TaskVideoDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_video_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_download": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskVideoConvert(); ok {
		if err := queue.TaskVideoConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_video_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_convert": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskVideoMove(); ok {
		if err := queue.TaskVideoMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_video_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_move": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskChatDownload(); ok {
		if err := queue.TaskChatDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_download": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskChatConvert(); ok {
		if err := queue.TaskChatConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_convert": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskChatRender(); ok {
		if err := queue.TaskChatRenderValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_render", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_render": %w`, err)}
		}
	}
	if v, ok := quo.mutation.TaskChatMove(); ok {
		if err := queue.TaskChatMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_move": %w`, err)}
		}
	}
	if _, ok := quo.mutation.VodID(); quo.mutation.VodCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Queue.vod"`)
	}
	return nil
}

func (quo *QueueUpdateOne) sqlSave(ctx context.Context) (_node *Queue, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Queue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queue.FieldID)
		for _, f := range fields {
			if !queue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.LiveArchive(); ok {
		_spec.SetField(queue.FieldLiveArchive, field.TypeBool, value)
	}
	if value, ok := quo.mutation.OnHold(); ok {
		_spec.SetField(queue.FieldOnHold, field.TypeBool, value)
	}
	if value, ok := quo.mutation.VideoProcessing(); ok {
		_spec.SetField(queue.FieldVideoProcessing, field.TypeBool, value)
	}
	if value, ok := quo.mutation.ChatProcessing(); ok {
		_spec.SetField(queue.FieldChatProcessing, field.TypeBool, value)
	}
	if value, ok := quo.mutation.Processing(); ok {
		_spec.SetField(queue.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := quo.mutation.TaskVodCreateFolder(); ok {
		_spec.SetField(queue.FieldTaskVodCreateFolder, field.TypeEnum, value)
	}
	if quo.mutation.TaskVodCreateFolderCleared() {
		_spec.ClearField(queue.FieldTaskVodCreateFolder, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskVodDownloadThumbnail(); ok {
		_spec.SetField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum, value)
	}
	if quo.mutation.TaskVodDownloadThumbnailCleared() {
		_spec.ClearField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskVodSaveInfo(); ok {
		_spec.SetField(queue.FieldTaskVodSaveInfo, field.TypeEnum, value)
	}
	if quo.mutation.TaskVodSaveInfoCleared() {
		_spec.ClearField(queue.FieldTaskVodSaveInfo, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskVideoDownload(); ok {
		_spec.SetField(queue.FieldTaskVideoDownload, field.TypeEnum, value)
	}
	if quo.mutation.TaskVideoDownloadCleared() {
		_spec.ClearField(queue.FieldTaskVideoDownload, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskVideoConvert(); ok {
		_spec.SetField(queue.FieldTaskVideoConvert, field.TypeEnum, value)
	}
	if quo.mutation.TaskVideoConvertCleared() {
		_spec.ClearField(queue.FieldTaskVideoConvert, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskVideoMove(); ok {
		_spec.SetField(queue.FieldTaskVideoMove, field.TypeEnum, value)
	}
	if quo.mutation.TaskVideoMoveCleared() {
		_spec.ClearField(queue.FieldTaskVideoMove, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskChatDownload(); ok {
		_spec.SetField(queue.FieldTaskChatDownload, field.TypeEnum, value)
	}
	if quo.mutation.TaskChatDownloadCleared() {
		_spec.ClearField(queue.FieldTaskChatDownload, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskChatConvert(); ok {
		_spec.SetField(queue.FieldTaskChatConvert, field.TypeEnum, value)
	}
	if quo.mutation.TaskChatConvertCleared() {
		_spec.ClearField(queue.FieldTaskChatConvert, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskChatRender(); ok {
		_spec.SetField(queue.FieldTaskChatRender, field.TypeEnum, value)
	}
	if quo.mutation.TaskChatRenderCleared() {
		_spec.ClearField(queue.FieldTaskChatRender, field.TypeEnum)
	}
	if value, ok := quo.mutation.TaskChatMove(); ok {
		_spec.SetField(queue.FieldTaskChatMove, field.TypeEnum, value)
	}
	if quo.mutation.TaskChatMoveCleared() {
		_spec.ClearField(queue.FieldTaskChatMove, field.TypeEnum)
	}
	if value, ok := quo.mutation.ChatStart(); ok {
		_spec.SetField(queue.FieldChatStart, field.TypeTime, value)
	}
	if quo.mutation.ChatStartCleared() {
		_spec.ClearField(queue.FieldChatStart, field.TypeTime)
	}
	if value, ok := quo.mutation.RenderChat(); ok {
		_spec.SetField(queue.FieldRenderChat, field.TypeBool, value)
	}
	if quo.mutation.RenderChatCleared() {
		_spec.ClearField(queue.FieldRenderChat, field.TypeBool)
	}
	if value, ok := quo.mutation.WorkflowID(); ok {
		_spec.SetField(queue.FieldWorkflowID, field.TypeString, value)
	}
	if quo.mutation.WorkflowIDCleared() {
		_spec.ClearField(queue.FieldWorkflowID, field.TypeString)
	}
	if value, ok := quo.mutation.WorkflowRunID(); ok {
		_spec.SetField(queue.FieldWorkflowRunID, field.TypeString, value)
	}
	if quo.mutation.WorkflowRunIDCleared() {
		_spec.ClearField(queue.FieldWorkflowRunID, field.TypeString)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(queue.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Queue{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
