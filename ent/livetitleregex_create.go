// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livetitleregex"
)

// LiveTitleRegexCreate is the builder for creating a LiveTitleRegex entity.
type LiveTitleRegexCreate struct {
	config
	mutation *LiveTitleRegexMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNegative sets the "negative" field.
func (ltrc *LiveTitleRegexCreate) SetNegative(b bool) *LiveTitleRegexCreate {
	ltrc.mutation.SetNegative(b)
	return ltrc
}

// SetNillableNegative sets the "negative" field if the given value is not nil.
func (ltrc *LiveTitleRegexCreate) SetNillableNegative(b *bool) *LiveTitleRegexCreate {
	if b != nil {
		ltrc.SetNegative(*b)
	}
	return ltrc
}

// SetRegex sets the "regex" field.
func (ltrc *LiveTitleRegexCreate) SetRegex(s string) *LiveTitleRegexCreate {
	ltrc.mutation.SetRegex(s)
	return ltrc
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (ltrc *LiveTitleRegexCreate) SetApplyToVideos(b bool) *LiveTitleRegexCreate {
	ltrc.mutation.SetApplyToVideos(b)
	return ltrc
}

// SetNillableApplyToVideos sets the "apply_to_videos" field if the given value is not nil.
func (ltrc *LiveTitleRegexCreate) SetNillableApplyToVideos(b *bool) *LiveTitleRegexCreate {
	if b != nil {
		ltrc.SetApplyToVideos(*b)
	}
	return ltrc
}

// SetID sets the "id" field.
func (ltrc *LiveTitleRegexCreate) SetID(u uuid.UUID) *LiveTitleRegexCreate {
	ltrc.mutation.SetID(u)
	return ltrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ltrc *LiveTitleRegexCreate) SetNillableID(u *uuid.UUID) *LiveTitleRegexCreate {
	if u != nil {
		ltrc.SetID(*u)
	}
	return ltrc
}

// SetLiveID sets the "live" edge to the Live entity by ID.
func (ltrc *LiveTitleRegexCreate) SetLiveID(id uuid.UUID) *LiveTitleRegexCreate {
	ltrc.mutation.SetLiveID(id)
	return ltrc
}

// SetLive sets the "live" edge to the Live entity.
func (ltrc *LiveTitleRegexCreate) SetLive(l *Live) *LiveTitleRegexCreate {
	return ltrc.SetLiveID(l.ID)
}

// Mutation returns the LiveTitleRegexMutation object of the builder.
func (ltrc *LiveTitleRegexCreate) Mutation() *LiveTitleRegexMutation {
	return ltrc.mutation
}

// Save creates the LiveTitleRegex in the database.
func (ltrc *LiveTitleRegexCreate) Save(ctx context.Context) (*LiveTitleRegex, error) {
	ltrc.defaults()
	return withHooks(ctx, ltrc.sqlSave, ltrc.mutation, ltrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltrc *LiveTitleRegexCreate) SaveX(ctx context.Context) *LiveTitleRegex {
	v, err := ltrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltrc *LiveTitleRegexCreate) Exec(ctx context.Context) error {
	_, err := ltrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltrc *LiveTitleRegexCreate) ExecX(ctx context.Context) {
	if err := ltrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltrc *LiveTitleRegexCreate) defaults() {
	if _, ok := ltrc.mutation.Negative(); !ok {
		v := livetitleregex.DefaultNegative
		ltrc.mutation.SetNegative(v)
	}
	if _, ok := ltrc.mutation.ApplyToVideos(); !ok {
		v := livetitleregex.DefaultApplyToVideos
		ltrc.mutation.SetApplyToVideos(v)
	}
	if _, ok := ltrc.mutation.ID(); !ok {
		v := livetitleregex.DefaultID()
		ltrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltrc *LiveTitleRegexCreate) check() error {
	if _, ok := ltrc.mutation.Negative(); !ok {
		return &ValidationError{Name: "negative", err: errors.New(`ent: missing required field "LiveTitleRegex.negative"`)}
	}
	if _, ok := ltrc.mutation.Regex(); !ok {
		return &ValidationError{Name: "regex", err: errors.New(`ent: missing required field "LiveTitleRegex.regex"`)}
	}
	if _, ok := ltrc.mutation.ApplyToVideos(); !ok {
		return &ValidationError{Name: "apply_to_videos", err: errors.New(`ent: missing required field "LiveTitleRegex.apply_to_videos"`)}
	}
	if _, ok := ltrc.mutation.LiveID(); !ok {
		return &ValidationError{Name: "live", err: errors.New(`ent: missing required edge "LiveTitleRegex.live"`)}
	}
	return nil
}

func (ltrc *LiveTitleRegexCreate) sqlSave(ctx context.Context) (*LiveTitleRegex, error) {
	if err := ltrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ltrc.mutation.id = &_node.ID
	ltrc.mutation.done = true
	return _node, nil
}

func (ltrc *LiveTitleRegexCreate) createSpec() (*LiveTitleRegex, *sqlgraph.CreateSpec) {
	var (
		_node = &LiveTitleRegex{config: ltrc.config}
		_spec = sqlgraph.NewCreateSpec(livetitleregex.Table, sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ltrc.conflict
	if id, ok := ltrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ltrc.mutation.Negative(); ok {
		_spec.SetField(livetitleregex.FieldNegative, field.TypeBool, value)
		_node.Negative = value
	}
	if value, ok := ltrc.mutation.Regex(); ok {
		_spec.SetField(livetitleregex.FieldRegex, field.TypeString, value)
		_node.Regex = value
	}
	if value, ok := ltrc.mutation.ApplyToVideos(); ok {
		_spec.SetField(livetitleregex.FieldApplyToVideos, field.TypeBool, value)
		_node.ApplyToVideos = value
	}
	if nodes := ltrc.mutation.LiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livetitleregex.LiveTable,
			Columns: []string{livetitleregex.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.live_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LiveTitleRegex.Create().
//		SetNegative(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LiveTitleRegexUpsert) {
//			SetNegative(v+v).
//		}).
//		Exec(ctx)
func (ltrc *LiveTitleRegexCreate) OnConflict(opts ...sql.ConflictOption) *LiveTitleRegexUpsertOne {
	ltrc.conflict = opts
	return &LiveTitleRegexUpsertOne{
		create: ltrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltrc *LiveTitleRegexCreate) OnConflictColumns(columns ...string) *LiveTitleRegexUpsertOne {
	ltrc.conflict = append(ltrc.conflict, sql.ConflictColumns(columns...))
	return &LiveTitleRegexUpsertOne{
		create: ltrc,
	}
}

type (
	// LiveTitleRegexUpsertOne is the builder for "upsert"-ing
	//  one LiveTitleRegex node.
	LiveTitleRegexUpsertOne struct {
		create *LiveTitleRegexCreate
	}

	// LiveTitleRegexUpsert is the "OnConflict" setter.
	LiveTitleRegexUpsert struct {
		*sql.UpdateSet
	}
)

// SetNegative sets the "negative" field.
func (u *LiveTitleRegexUpsert) SetNegative(v bool) *LiveTitleRegexUpsert {
	u.Set(livetitleregex.FieldNegative, v)
	return u
}

// UpdateNegative sets the "negative" field to the value that was provided on create.
func (u *LiveTitleRegexUpsert) UpdateNegative() *LiveTitleRegexUpsert {
	u.SetExcluded(livetitleregex.FieldNegative)
	return u
}

// SetRegex sets the "regex" field.
func (u *LiveTitleRegexUpsert) SetRegex(v string) *LiveTitleRegexUpsert {
	u.Set(livetitleregex.FieldRegex, v)
	return u
}

// UpdateRegex sets the "regex" field to the value that was provided on create.
func (u *LiveTitleRegexUpsert) UpdateRegex() *LiveTitleRegexUpsert {
	u.SetExcluded(livetitleregex.FieldRegex)
	return u
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (u *LiveTitleRegexUpsert) SetApplyToVideos(v bool) *LiveTitleRegexUpsert {
	u.Set(livetitleregex.FieldApplyToVideos, v)
	return u
}

// UpdateApplyToVideos sets the "apply_to_videos" field to the value that was provided on create.
func (u *LiveTitleRegexUpsert) UpdateApplyToVideos() *LiveTitleRegexUpsert {
	u.SetExcluded(livetitleregex.FieldApplyToVideos)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(livetitleregex.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LiveTitleRegexUpsertOne) UpdateNewValues() *LiveTitleRegexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(livetitleregex.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LiveTitleRegexUpsertOne) Ignore() *LiveTitleRegexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LiveTitleRegexUpsertOne) DoNothing() *LiveTitleRegexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LiveTitleRegexCreate.OnConflict
// documentation for more info.
func (u *LiveTitleRegexUpsertOne) Update(set func(*LiveTitleRegexUpsert)) *LiveTitleRegexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LiveTitleRegexUpsert{UpdateSet: update})
	}))
	return u
}

// SetNegative sets the "negative" field.
func (u *LiveTitleRegexUpsertOne) SetNegative(v bool) *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetNegative(v)
	})
}

// UpdateNegative sets the "negative" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertOne) UpdateNegative() *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateNegative()
	})
}

// SetRegex sets the "regex" field.
func (u *LiveTitleRegexUpsertOne) SetRegex(v string) *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetRegex(v)
	})
}

// UpdateRegex sets the "regex" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertOne) UpdateRegex() *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateRegex()
	})
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (u *LiveTitleRegexUpsertOne) SetApplyToVideos(v bool) *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetApplyToVideos(v)
	})
}

// UpdateApplyToVideos sets the "apply_to_videos" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertOne) UpdateApplyToVideos() *LiveTitleRegexUpsertOne {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateApplyToVideos()
	})
}

// Exec executes the query.
func (u *LiveTitleRegexUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LiveTitleRegexCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LiveTitleRegexUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LiveTitleRegexUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LiveTitleRegexUpsertOne.ID is not supported by MySQL driver. Use LiveTitleRegexUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LiveTitleRegexUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LiveTitleRegexCreateBulk is the builder for creating many LiveTitleRegex entities in bulk.
type LiveTitleRegexCreateBulk struct {
	config
	err      error
	builders []*LiveTitleRegexCreate
	conflict []sql.ConflictOption
}

// Save creates the LiveTitleRegex entities in the database.
func (ltrcb *LiveTitleRegexCreateBulk) Save(ctx context.Context) ([]*LiveTitleRegex, error) {
	if ltrcb.err != nil {
		return nil, ltrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ltrcb.builders))
	nodes := make([]*LiveTitleRegex, len(ltrcb.builders))
	mutators := make([]Mutator, len(ltrcb.builders))
	for i := range ltrcb.builders {
		func(i int, root context.Context) {
			builder := ltrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LiveTitleRegexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ltrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltrcb *LiveTitleRegexCreateBulk) SaveX(ctx context.Context) []*LiveTitleRegex {
	v, err := ltrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltrcb *LiveTitleRegexCreateBulk) Exec(ctx context.Context) error {
	_, err := ltrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltrcb *LiveTitleRegexCreateBulk) ExecX(ctx context.Context) {
	if err := ltrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LiveTitleRegex.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LiveTitleRegexUpsert) {
//			SetNegative(v+v).
//		}).
//		Exec(ctx)
func (ltrcb *LiveTitleRegexCreateBulk) OnConflict(opts ...sql.ConflictOption) *LiveTitleRegexUpsertBulk {
	ltrcb.conflict = opts
	return &LiveTitleRegexUpsertBulk{
		create: ltrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltrcb *LiveTitleRegexCreateBulk) OnConflictColumns(columns ...string) *LiveTitleRegexUpsertBulk {
	ltrcb.conflict = append(ltrcb.conflict, sql.ConflictColumns(columns...))
	return &LiveTitleRegexUpsertBulk{
		create: ltrcb,
	}
}

// LiveTitleRegexUpsertBulk is the builder for "upsert"-ing
// a bulk of LiveTitleRegex nodes.
type LiveTitleRegexUpsertBulk struct {
	create *LiveTitleRegexCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(livetitleregex.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LiveTitleRegexUpsertBulk) UpdateNewValues() *LiveTitleRegexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(livetitleregex.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LiveTitleRegex.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LiveTitleRegexUpsertBulk) Ignore() *LiveTitleRegexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LiveTitleRegexUpsertBulk) DoNothing() *LiveTitleRegexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LiveTitleRegexCreateBulk.OnConflict
// documentation for more info.
func (u *LiveTitleRegexUpsertBulk) Update(set func(*LiveTitleRegexUpsert)) *LiveTitleRegexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LiveTitleRegexUpsert{UpdateSet: update})
	}))
	return u
}

// SetNegative sets the "negative" field.
func (u *LiveTitleRegexUpsertBulk) SetNegative(v bool) *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetNegative(v)
	})
}

// UpdateNegative sets the "negative" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertBulk) UpdateNegative() *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateNegative()
	})
}

// SetRegex sets the "regex" field.
func (u *LiveTitleRegexUpsertBulk) SetRegex(v string) *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetRegex(v)
	})
}

// UpdateRegex sets the "regex" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertBulk) UpdateRegex() *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateRegex()
	})
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (u *LiveTitleRegexUpsertBulk) SetApplyToVideos(v bool) *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.SetApplyToVideos(v)
	})
}

// UpdateApplyToVideos sets the "apply_to_videos" field to the value that was provided on create.
func (u *LiveTitleRegexUpsertBulk) UpdateApplyToVideos() *LiveTitleRegexUpsertBulk {
	return u.Update(func(s *LiveTitleRegexUpsert) {
		s.UpdateApplyToVideos()
	})
}

// Exec executes the query.
func (u *LiveTitleRegexUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LiveTitleRegexCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LiveTitleRegexCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LiveTitleRegexUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
