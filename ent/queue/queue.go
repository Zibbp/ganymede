// Code generated by ent, DO NOT EDIT.

package queue

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/internal/utils"
)

const (
	// Label holds the string label denoting the queue type in the database.
	Label = "queue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLiveArchive holds the string denoting the live_archive field in the database.
	FieldLiveArchive = "live_archive"
	// FieldOnHold holds the string denoting the on_hold field in the database.
	FieldOnHold = "on_hold"
	// FieldVideoProcessing holds the string denoting the video_processing field in the database.
	FieldVideoProcessing = "video_processing"
	// FieldChatProcessing holds the string denoting the chat_processing field in the database.
	FieldChatProcessing = "chat_processing"
	// FieldProcessing holds the string denoting the processing field in the database.
	FieldProcessing = "processing"
	// FieldTaskVodCreateFolder holds the string denoting the task_vod_create_folder field in the database.
	FieldTaskVodCreateFolder = "task_vod_create_folder"
	// FieldTaskVodDownloadThumbnail holds the string denoting the task_vod_download_thumbnail field in the database.
	FieldTaskVodDownloadThumbnail = "task_vod_download_thumbnail"
	// FieldTaskVodSaveInfo holds the string denoting the task_vod_save_info field in the database.
	FieldTaskVodSaveInfo = "task_vod_save_info"
	// FieldTaskVideoDownload holds the string denoting the task_video_download field in the database.
	FieldTaskVideoDownload = "task_video_download"
	// FieldTaskVideoConvert holds the string denoting the task_video_convert field in the database.
	FieldTaskVideoConvert = "task_video_convert"
	// FieldTaskVideoMove holds the string denoting the task_video_move field in the database.
	FieldTaskVideoMove = "task_video_move"
	// FieldTaskChatDownload holds the string denoting the task_chat_download field in the database.
	FieldTaskChatDownload = "task_chat_download"
	// FieldTaskChatConvert holds the string denoting the task_chat_convert field in the database.
	FieldTaskChatConvert = "task_chat_convert"
	// FieldTaskChatRender holds the string denoting the task_chat_render field in the database.
	FieldTaskChatRender = "task_chat_render"
	// FieldTaskChatMove holds the string denoting the task_chat_move field in the database.
	FieldTaskChatMove = "task_chat_move"
	// FieldChatStart holds the string denoting the chat_start field in the database.
	FieldChatStart = "chat_start"
	// FieldRenderChat holds the string denoting the render_chat field in the database.
	FieldRenderChat = "render_chat"
	// FieldWorkflowID holds the string denoting the workflow_id field in the database.
	FieldWorkflowID = "workflow_id"
	// FieldWorkflowRunID holds the string denoting the workflow_run_id field in the database.
	FieldWorkflowRunID = "workflow_run_id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeVod holds the string denoting the vod edge name in mutations.
	EdgeVod = "vod"
	// Table holds the table name of the queue in the database.
	Table = "queues"
	// VodTable is the table that holds the vod relation/edge.
	VodTable = "queues"
	// VodInverseTable is the table name for the Vod entity.
	// It exists in this package in order to avoid circular dependency with the "vod" package.
	VodInverseTable = "vods"
	// VodColumn is the table column denoting the vod relation/edge.
	VodColumn = "vod_queue"
)

// Columns holds all SQL columns for queue fields.
var Columns = []string{
	FieldID,
	FieldLiveArchive,
	FieldOnHold,
	FieldVideoProcessing,
	FieldChatProcessing,
	FieldProcessing,
	FieldTaskVodCreateFolder,
	FieldTaskVodDownloadThumbnail,
	FieldTaskVodSaveInfo,
	FieldTaskVideoDownload,
	FieldTaskVideoConvert,
	FieldTaskVideoMove,
	FieldTaskChatDownload,
	FieldTaskChatConvert,
	FieldTaskChatRender,
	FieldTaskChatMove,
	FieldChatStart,
	FieldRenderChat,
	FieldWorkflowID,
	FieldWorkflowRunID,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "queues"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vod_queue",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLiveArchive holds the default value on creation for the "live_archive" field.
	DefaultLiveArchive bool
	// DefaultOnHold holds the default value on creation for the "on_hold" field.
	DefaultOnHold bool
	// DefaultVideoProcessing holds the default value on creation for the "video_processing" field.
	DefaultVideoProcessing bool
	// DefaultChatProcessing holds the default value on creation for the "chat_processing" field.
	DefaultChatProcessing bool
	// DefaultProcessing holds the default value on creation for the "processing" field.
	DefaultProcessing bool
	// DefaultRenderChat holds the default value on creation for the "render_chat" field.
	DefaultRenderChat bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultTaskVodCreateFolder utils.TaskStatus = "pending"

// TaskVodCreateFolderValidator is a validator for the "task_vod_create_folder" field enum values. It is called by the builders before save.
func TaskVodCreateFolderValidator(tvcf utils.TaskStatus) error {
	switch tvcf {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_vod_create_folder field: %q", tvcf)
	}
}

const DefaultTaskVodDownloadThumbnail utils.TaskStatus = "pending"

// TaskVodDownloadThumbnailValidator is a validator for the "task_vod_download_thumbnail" field enum values. It is called by the builders before save.
func TaskVodDownloadThumbnailValidator(tvdt utils.TaskStatus) error {
	switch tvdt {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_vod_download_thumbnail field: %q", tvdt)
	}
}

const DefaultTaskVodSaveInfo utils.TaskStatus = "pending"

// TaskVodSaveInfoValidator is a validator for the "task_vod_save_info" field enum values. It is called by the builders before save.
func TaskVodSaveInfoValidator(tvsi utils.TaskStatus) error {
	switch tvsi {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_vod_save_info field: %q", tvsi)
	}
}

const DefaultTaskVideoDownload utils.TaskStatus = "pending"

// TaskVideoDownloadValidator is a validator for the "task_video_download" field enum values. It is called by the builders before save.
func TaskVideoDownloadValidator(tvd utils.TaskStatus) error {
	switch tvd {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_video_download field: %q", tvd)
	}
}

const DefaultTaskVideoConvert utils.TaskStatus = "pending"

// TaskVideoConvertValidator is a validator for the "task_video_convert" field enum values. It is called by the builders before save.
func TaskVideoConvertValidator(tvc utils.TaskStatus) error {
	switch tvc {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_video_convert field: %q", tvc)
	}
}

const DefaultTaskVideoMove utils.TaskStatus = "pending"

// TaskVideoMoveValidator is a validator for the "task_video_move" field enum values. It is called by the builders before save.
func TaskVideoMoveValidator(tvm utils.TaskStatus) error {
	switch tvm {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_video_move field: %q", tvm)
	}
}

const DefaultTaskChatDownload utils.TaskStatus = "pending"

// TaskChatDownloadValidator is a validator for the "task_chat_download" field enum values. It is called by the builders before save.
func TaskChatDownloadValidator(tcd utils.TaskStatus) error {
	switch tcd {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_chat_download field: %q", tcd)
	}
}

const DefaultTaskChatConvert utils.TaskStatus = "pending"

// TaskChatConvertValidator is a validator for the "task_chat_convert" field enum values. It is called by the builders before save.
func TaskChatConvertValidator(tcc utils.TaskStatus) error {
	switch tcc {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_chat_convert field: %q", tcc)
	}
}

const DefaultTaskChatRender utils.TaskStatus = "pending"

// TaskChatRenderValidator is a validator for the "task_chat_render" field enum values. It is called by the builders before save.
func TaskChatRenderValidator(tcr utils.TaskStatus) error {
	switch tcr {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_chat_render field: %q", tcr)
	}
}

const DefaultTaskChatMove utils.TaskStatus = "pending"

// TaskChatMoveValidator is a validator for the "task_chat_move" field enum values. It is called by the builders before save.
func TaskChatMoveValidator(tcm utils.TaskStatus) error {
	switch tcm {
	case "success", "running", "pending", "failed":
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for task_chat_move field: %q", tcm)
	}
}

// OrderOption defines the ordering options for the Queue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLiveArchive orders the results by the live_archive field.
func ByLiveArchive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiveArchive, opts...).ToFunc()
}

// ByOnHold orders the results by the on_hold field.
func ByOnHold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnHold, opts...).ToFunc()
}

// ByVideoProcessing orders the results by the video_processing field.
func ByVideoProcessing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoProcessing, opts...).ToFunc()
}

// ByChatProcessing orders the results by the chat_processing field.
func ByChatProcessing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatProcessing, opts...).ToFunc()
}

// ByProcessing orders the results by the processing field.
func ByProcessing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessing, opts...).ToFunc()
}

// ByTaskVodCreateFolder orders the results by the task_vod_create_folder field.
func ByTaskVodCreateFolder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVodCreateFolder, opts...).ToFunc()
}

// ByTaskVodDownloadThumbnail orders the results by the task_vod_download_thumbnail field.
func ByTaskVodDownloadThumbnail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVodDownloadThumbnail, opts...).ToFunc()
}

// ByTaskVodSaveInfo orders the results by the task_vod_save_info field.
func ByTaskVodSaveInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVodSaveInfo, opts...).ToFunc()
}

// ByTaskVideoDownload orders the results by the task_video_download field.
func ByTaskVideoDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVideoDownload, opts...).ToFunc()
}

// ByTaskVideoConvert orders the results by the task_video_convert field.
func ByTaskVideoConvert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVideoConvert, opts...).ToFunc()
}

// ByTaskVideoMove orders the results by the task_video_move field.
func ByTaskVideoMove(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskVideoMove, opts...).ToFunc()
}

// ByTaskChatDownload orders the results by the task_chat_download field.
func ByTaskChatDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskChatDownload, opts...).ToFunc()
}

// ByTaskChatConvert orders the results by the task_chat_convert field.
func ByTaskChatConvert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskChatConvert, opts...).ToFunc()
}

// ByTaskChatRender orders the results by the task_chat_render field.
func ByTaskChatRender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskChatRender, opts...).ToFunc()
}

// ByTaskChatMove orders the results by the task_chat_move field.
func ByTaskChatMove(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskChatMove, opts...).ToFunc()
}

// ByChatStart orders the results by the chat_start field.
func ByChatStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatStart, opts...).ToFunc()
}

// ByRenderChat orders the results by the render_chat field.
func ByRenderChat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenderChat, opts...).ToFunc()
}

// ByWorkflowID orders the results by the workflow_id field.
func ByWorkflowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowID, opts...).ToFunc()
}

// ByWorkflowRunID orders the results by the workflow_run_id field.
func ByWorkflowRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowRunID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByVodField orders the results by vod field.
func ByVodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVodStep(), sql.OrderByField(field, opts...))
	}
}
func newVodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, VodTable, VodColumn),
	)
}
