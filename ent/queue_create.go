// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// QueueCreate is the builder for creating a Queue entity.
type QueueCreate struct {
	config
	mutation *QueueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLiveArchive sets the "live_archive" field.
func (qc *QueueCreate) SetLiveArchive(b bool) *QueueCreate {
	qc.mutation.SetLiveArchive(b)
	return qc
}

// SetNillableLiveArchive sets the "live_archive" field if the given value is not nil.
func (qc *QueueCreate) SetNillableLiveArchive(b *bool) *QueueCreate {
	if b != nil {
		qc.SetLiveArchive(*b)
	}
	return qc
}

// SetOnHold sets the "on_hold" field.
func (qc *QueueCreate) SetOnHold(b bool) *QueueCreate {
	qc.mutation.SetOnHold(b)
	return qc
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (qc *QueueCreate) SetNillableOnHold(b *bool) *QueueCreate {
	if b != nil {
		qc.SetOnHold(*b)
	}
	return qc
}

// SetVideoProcessing sets the "video_processing" field.
func (qc *QueueCreate) SetVideoProcessing(b bool) *QueueCreate {
	qc.mutation.SetVideoProcessing(b)
	return qc
}

// SetNillableVideoProcessing sets the "video_processing" field if the given value is not nil.
func (qc *QueueCreate) SetNillableVideoProcessing(b *bool) *QueueCreate {
	if b != nil {
		qc.SetVideoProcessing(*b)
	}
	return qc
}

// SetChatProcessing sets the "chat_processing" field.
func (qc *QueueCreate) SetChatProcessing(b bool) *QueueCreate {
	qc.mutation.SetChatProcessing(b)
	return qc
}

// SetNillableChatProcessing sets the "chat_processing" field if the given value is not nil.
func (qc *QueueCreate) SetNillableChatProcessing(b *bool) *QueueCreate {
	if b != nil {
		qc.SetChatProcessing(*b)
	}
	return qc
}

// SetProcessing sets the "processing" field.
func (qc *QueueCreate) SetProcessing(b bool) *QueueCreate {
	qc.mutation.SetProcessing(b)
	return qc
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (qc *QueueCreate) SetNillableProcessing(b *bool) *QueueCreate {
	if b != nil {
		qc.SetProcessing(*b)
	}
	return qc
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (qc *QueueCreate) SetTaskVodCreateFolder(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVodCreateFolder(us)
	return qc
}

// SetNillableTaskVodCreateFolder sets the "task_vod_create_folder" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVodCreateFolder(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVodCreateFolder(*us)
	}
	return qc
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (qc *QueueCreate) SetTaskVodDownloadThumbnail(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVodDownloadThumbnail(us)
	return qc
}

// SetNillableTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVodDownloadThumbnail(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVodDownloadThumbnail(*us)
	}
	return qc
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (qc *QueueCreate) SetTaskVodSaveInfo(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVodSaveInfo(us)
	return qc
}

// SetNillableTaskVodSaveInfo sets the "task_vod_save_info" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVodSaveInfo(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVodSaveInfo(*us)
	}
	return qc
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (qc *QueueCreate) SetTaskVideoDownload(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVideoDownload(us)
	return qc
}

// SetNillableTaskVideoDownload sets the "task_video_download" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVideoDownload(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVideoDownload(*us)
	}
	return qc
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (qc *QueueCreate) SetTaskVideoConvert(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVideoConvert(us)
	return qc
}

// SetNillableTaskVideoConvert sets the "task_video_convert" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVideoConvert(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVideoConvert(*us)
	}
	return qc
}

// SetTaskVideoMove sets the "task_video_move" field.
func (qc *QueueCreate) SetTaskVideoMove(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskVideoMove(us)
	return qc
}

// SetNillableTaskVideoMove sets the "task_video_move" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskVideoMove(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskVideoMove(*us)
	}
	return qc
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (qc *QueueCreate) SetTaskChatDownload(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskChatDownload(us)
	return qc
}

// SetNillableTaskChatDownload sets the "task_chat_download" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskChatDownload(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskChatDownload(*us)
	}
	return qc
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (qc *QueueCreate) SetTaskChatConvert(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskChatConvert(us)
	return qc
}

// SetNillableTaskChatConvert sets the "task_chat_convert" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskChatConvert(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskChatConvert(*us)
	}
	return qc
}

// SetTaskChatRender sets the "task_chat_render" field.
func (qc *QueueCreate) SetTaskChatRender(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskChatRender(us)
	return qc
}

// SetNillableTaskChatRender sets the "task_chat_render" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskChatRender(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskChatRender(*us)
	}
	return qc
}

// SetTaskChatMove sets the "task_chat_move" field.
func (qc *QueueCreate) SetTaskChatMove(us utils.TaskStatus) *QueueCreate {
	qc.mutation.SetTaskChatMove(us)
	return qc
}

// SetNillableTaskChatMove sets the "task_chat_move" field if the given value is not nil.
func (qc *QueueCreate) SetNillableTaskChatMove(us *utils.TaskStatus) *QueueCreate {
	if us != nil {
		qc.SetTaskChatMove(*us)
	}
	return qc
}

// SetChatStart sets the "chat_start" field.
func (qc *QueueCreate) SetChatStart(t time.Time) *QueueCreate {
	qc.mutation.SetChatStart(t)
	return qc
}

// SetNillableChatStart sets the "chat_start" field if the given value is not nil.
func (qc *QueueCreate) SetNillableChatStart(t *time.Time) *QueueCreate {
	if t != nil {
		qc.SetChatStart(*t)
	}
	return qc
}

// SetRenderChat sets the "render_chat" field.
func (qc *QueueCreate) SetRenderChat(b bool) *QueueCreate {
	qc.mutation.SetRenderChat(b)
	return qc
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (qc *QueueCreate) SetNillableRenderChat(b *bool) *QueueCreate {
	if b != nil {
		qc.SetRenderChat(*b)
	}
	return qc
}

// SetWorkflowID sets the "workflow_id" field.
func (qc *QueueCreate) SetWorkflowID(s string) *QueueCreate {
	qc.mutation.SetWorkflowID(s)
	return qc
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (qc *QueueCreate) SetNillableWorkflowID(s *string) *QueueCreate {
	if s != nil {
		qc.SetWorkflowID(*s)
	}
	return qc
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (qc *QueueCreate) SetWorkflowRunID(s string) *QueueCreate {
	qc.mutation.SetWorkflowRunID(s)
	return qc
}

// SetNillableWorkflowRunID sets the "workflow_run_id" field if the given value is not nil.
func (qc *QueueCreate) SetNillableWorkflowRunID(s *string) *QueueCreate {
	if s != nil {
		qc.SetWorkflowRunID(*s)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QueueCreate) SetUpdatedAt(t time.Time) *QueueCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QueueCreate) SetNillableUpdatedAt(t *time.Time) *QueueCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QueueCreate) SetCreatedAt(t time.Time) *QueueCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QueueCreate) SetNillableCreatedAt(t *time.Time) *QueueCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QueueCreate) SetID(u uuid.UUID) *QueueCreate {
	qc.mutation.SetID(u)
	return qc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qc *QueueCreate) SetNillableID(u *uuid.UUID) *QueueCreate {
	if u != nil {
		qc.SetID(*u)
	}
	return qc
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (qc *QueueCreate) SetVodID(id uuid.UUID) *QueueCreate {
	qc.mutation.SetVodID(id)
	return qc
}

// SetVod sets the "vod" edge to the Vod entity.
func (qc *QueueCreate) SetVod(v *Vod) *QueueCreate {
	return qc.SetVodID(v.ID)
}

// Mutation returns the QueueMutation object of the builder.
func (qc *QueueCreate) Mutation() *QueueMutation {
	return qc.mutation
}

// Save creates the Queue in the database.
func (qc *QueueCreate) Save(ctx context.Context) (*Queue, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QueueCreate) SaveX(ctx context.Context) *Queue {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QueueCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QueueCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QueueCreate) defaults() {
	if _, ok := qc.mutation.LiveArchive(); !ok {
		v := queue.DefaultLiveArchive
		qc.mutation.SetLiveArchive(v)
	}
	if _, ok := qc.mutation.OnHold(); !ok {
		v := queue.DefaultOnHold
		qc.mutation.SetOnHold(v)
	}
	if _, ok := qc.mutation.VideoProcessing(); !ok {
		v := queue.DefaultVideoProcessing
		qc.mutation.SetVideoProcessing(v)
	}
	if _, ok := qc.mutation.ChatProcessing(); !ok {
		v := queue.DefaultChatProcessing
		qc.mutation.SetChatProcessing(v)
	}
	if _, ok := qc.mutation.Processing(); !ok {
		v := queue.DefaultProcessing
		qc.mutation.SetProcessing(v)
	}
	if _, ok := qc.mutation.TaskVodCreateFolder(); !ok {
		v := queue.DefaultTaskVodCreateFolder
		qc.mutation.SetTaskVodCreateFolder(v)
	}
	if _, ok := qc.mutation.TaskVodDownloadThumbnail(); !ok {
		v := queue.DefaultTaskVodDownloadThumbnail
		qc.mutation.SetTaskVodDownloadThumbnail(v)
	}
	if _, ok := qc.mutation.TaskVodSaveInfo(); !ok {
		v := queue.DefaultTaskVodSaveInfo
		qc.mutation.SetTaskVodSaveInfo(v)
	}
	if _, ok := qc.mutation.TaskVideoDownload(); !ok {
		v := queue.DefaultTaskVideoDownload
		qc.mutation.SetTaskVideoDownload(v)
	}
	if _, ok := qc.mutation.TaskVideoConvert(); !ok {
		v := queue.DefaultTaskVideoConvert
		qc.mutation.SetTaskVideoConvert(v)
	}
	if _, ok := qc.mutation.TaskVideoMove(); !ok {
		v := queue.DefaultTaskVideoMove
		qc.mutation.SetTaskVideoMove(v)
	}
	if _, ok := qc.mutation.TaskChatDownload(); !ok {
		v := queue.DefaultTaskChatDownload
		qc.mutation.SetTaskChatDownload(v)
	}
	if _, ok := qc.mutation.TaskChatConvert(); !ok {
		v := queue.DefaultTaskChatConvert
		qc.mutation.SetTaskChatConvert(v)
	}
	if _, ok := qc.mutation.TaskChatRender(); !ok {
		v := queue.DefaultTaskChatRender
		qc.mutation.SetTaskChatRender(v)
	}
	if _, ok := qc.mutation.TaskChatMove(); !ok {
		v := queue.DefaultTaskChatMove
		qc.mutation.SetTaskChatMove(v)
	}
	if _, ok := qc.mutation.RenderChat(); !ok {
		v := queue.DefaultRenderChat
		qc.mutation.SetRenderChat(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		v := queue.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := queue.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.ID(); !ok {
		v := queue.DefaultID()
		qc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QueueCreate) check() error {
	if _, ok := qc.mutation.LiveArchive(); !ok {
		return &ValidationError{Name: "live_archive", err: errors.New(`ent: missing required field "Queue.live_archive"`)}
	}
	if _, ok := qc.mutation.OnHold(); !ok {
		return &ValidationError{Name: "on_hold", err: errors.New(`ent: missing required field "Queue.on_hold"`)}
	}
	if _, ok := qc.mutation.VideoProcessing(); !ok {
		return &ValidationError{Name: "video_processing", err: errors.New(`ent: missing required field "Queue.video_processing"`)}
	}
	if _, ok := qc.mutation.ChatProcessing(); !ok {
		return &ValidationError{Name: "chat_processing", err: errors.New(`ent: missing required field "Queue.chat_processing"`)}
	}
	if _, ok := qc.mutation.Processing(); !ok {
		return &ValidationError{Name: "processing", err: errors.New(`ent: missing required field "Queue.processing"`)}
	}
	if v, ok := qc.mutation.TaskVodCreateFolder(); ok {
		if err := queue.TaskVodCreateFolderValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_create_folder", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_create_folder": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskVodDownloadThumbnail(); ok {
		if err := queue.TaskVodDownloadThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_download_thumbnail", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_download_thumbnail": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskVodSaveInfo(); ok {
		if err := queue.TaskVodSaveInfoValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_save_info", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_save_info": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskVideoDownload(); ok {
		if err := queue.TaskVideoDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_video_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_download": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskVideoConvert(); ok {
		if err := queue.TaskVideoConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_video_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_convert": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskVideoMove(); ok {
		if err := queue.TaskVideoMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_video_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_move": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskChatDownload(); ok {
		if err := queue.TaskChatDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_download": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskChatConvert(); ok {
		if err := queue.TaskChatConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_convert": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskChatRender(); ok {
		if err := queue.TaskChatRenderValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_render", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_render": %w`, err)}
		}
	}
	if v, ok := qc.mutation.TaskChatMove(); ok {
		if err := queue.TaskChatMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_move": %w`, err)}
		}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Queue.updated_at"`)}
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Queue.created_at"`)}
	}
	if _, ok := qc.mutation.VodID(); !ok {
		return &ValidationError{Name: "vod", err: errors.New(`ent: missing required edge "Queue.vod"`)}
	}
	return nil
}

func (qc *QueueCreate) sqlSave(ctx context.Context) (*Queue, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QueueCreate) createSpec() (*Queue, *sqlgraph.CreateSpec) {
	var (
		_node = &Queue{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(queue.Table, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = qc.conflict
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qc.mutation.LiveArchive(); ok {
		_spec.SetField(queue.FieldLiveArchive, field.TypeBool, value)
		_node.LiveArchive = value
	}
	if value, ok := qc.mutation.OnHold(); ok {
		_spec.SetField(queue.FieldOnHold, field.TypeBool, value)
		_node.OnHold = value
	}
	if value, ok := qc.mutation.VideoProcessing(); ok {
		_spec.SetField(queue.FieldVideoProcessing, field.TypeBool, value)
		_node.VideoProcessing = value
	}
	if value, ok := qc.mutation.ChatProcessing(); ok {
		_spec.SetField(queue.FieldChatProcessing, field.TypeBool, value)
		_node.ChatProcessing = value
	}
	if value, ok := qc.mutation.Processing(); ok {
		_spec.SetField(queue.FieldProcessing, field.TypeBool, value)
		_node.Processing = value
	}
	if value, ok := qc.mutation.TaskVodCreateFolder(); ok {
		_spec.SetField(queue.FieldTaskVodCreateFolder, field.TypeEnum, value)
		_node.TaskVodCreateFolder = value
	}
	if value, ok := qc.mutation.TaskVodDownloadThumbnail(); ok {
		_spec.SetField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum, value)
		_node.TaskVodDownloadThumbnail = value
	}
	if value, ok := qc.mutation.TaskVodSaveInfo(); ok {
		_spec.SetField(queue.FieldTaskVodSaveInfo, field.TypeEnum, value)
		_node.TaskVodSaveInfo = value
	}
	if value, ok := qc.mutation.TaskVideoDownload(); ok {
		_spec.SetField(queue.FieldTaskVideoDownload, field.TypeEnum, value)
		_node.TaskVideoDownload = value
	}
	if value, ok := qc.mutation.TaskVideoConvert(); ok {
		_spec.SetField(queue.FieldTaskVideoConvert, field.TypeEnum, value)
		_node.TaskVideoConvert = value
	}
	if value, ok := qc.mutation.TaskVideoMove(); ok {
		_spec.SetField(queue.FieldTaskVideoMove, field.TypeEnum, value)
		_node.TaskVideoMove = value
	}
	if value, ok := qc.mutation.TaskChatDownload(); ok {
		_spec.SetField(queue.FieldTaskChatDownload, field.TypeEnum, value)
		_node.TaskChatDownload = value
	}
	if value, ok := qc.mutation.TaskChatConvert(); ok {
		_spec.SetField(queue.FieldTaskChatConvert, field.TypeEnum, value)
		_node.TaskChatConvert = value
	}
	if value, ok := qc.mutation.TaskChatRender(); ok {
		_spec.SetField(queue.FieldTaskChatRender, field.TypeEnum, value)
		_node.TaskChatRender = value
	}
	if value, ok := qc.mutation.TaskChatMove(); ok {
		_spec.SetField(queue.FieldTaskChatMove, field.TypeEnum, value)
		_node.TaskChatMove = value
	}
	if value, ok := qc.mutation.ChatStart(); ok {
		_spec.SetField(queue.FieldChatStart, field.TypeTime, value)
		_node.ChatStart = value
	}
	if value, ok := qc.mutation.RenderChat(); ok {
		_spec.SetField(queue.FieldRenderChat, field.TypeBool, value)
		_node.RenderChat = value
	}
	if value, ok := qc.mutation.WorkflowID(); ok {
		_spec.SetField(queue.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := qc.mutation.WorkflowRunID(); ok {
		_spec.SetField(queue.FieldWorkflowRunID, field.TypeString, value)
		_node.WorkflowRunID = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(queue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(queue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := qc.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vod_queue = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Queue.Create().
//		SetLiveArchive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QueueUpsert) {
//			SetLiveArchive(v+v).
//		}).
//		Exec(ctx)
func (qc *QueueCreate) OnConflict(opts ...sql.ConflictOption) *QueueUpsertOne {
	qc.conflict = opts
	return &QueueUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Queue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QueueCreate) OnConflictColumns(columns ...string) *QueueUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QueueUpsertOne{
		create: qc,
	}
}

type (
	// QueueUpsertOne is the builder for "upsert"-ing
	//  one Queue node.
	QueueUpsertOne struct {
		create *QueueCreate
	}

	// QueueUpsert is the "OnConflict" setter.
	QueueUpsert struct {
		*sql.UpdateSet
	}
)

// SetLiveArchive sets the "live_archive" field.
func (u *QueueUpsert) SetLiveArchive(v bool) *QueueUpsert {
	u.Set(queue.FieldLiveArchive, v)
	return u
}

// UpdateLiveArchive sets the "live_archive" field to the value that was provided on create.
func (u *QueueUpsert) UpdateLiveArchive() *QueueUpsert {
	u.SetExcluded(queue.FieldLiveArchive)
	return u
}

// SetOnHold sets the "on_hold" field.
func (u *QueueUpsert) SetOnHold(v bool) *QueueUpsert {
	u.Set(queue.FieldOnHold, v)
	return u
}

// UpdateOnHold sets the "on_hold" field to the value that was provided on create.
func (u *QueueUpsert) UpdateOnHold() *QueueUpsert {
	u.SetExcluded(queue.FieldOnHold)
	return u
}

// SetVideoProcessing sets the "video_processing" field.
func (u *QueueUpsert) SetVideoProcessing(v bool) *QueueUpsert {
	u.Set(queue.FieldVideoProcessing, v)
	return u
}

// UpdateVideoProcessing sets the "video_processing" field to the value that was provided on create.
func (u *QueueUpsert) UpdateVideoProcessing() *QueueUpsert {
	u.SetExcluded(queue.FieldVideoProcessing)
	return u
}

// SetChatProcessing sets the "chat_processing" field.
func (u *QueueUpsert) SetChatProcessing(v bool) *QueueUpsert {
	u.Set(queue.FieldChatProcessing, v)
	return u
}

// UpdateChatProcessing sets the "chat_processing" field to the value that was provided on create.
func (u *QueueUpsert) UpdateChatProcessing() *QueueUpsert {
	u.SetExcluded(queue.FieldChatProcessing)
	return u
}

// SetProcessing sets the "processing" field.
func (u *QueueUpsert) SetProcessing(v bool) *QueueUpsert {
	u.Set(queue.FieldProcessing, v)
	return u
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *QueueUpsert) UpdateProcessing() *QueueUpsert {
	u.SetExcluded(queue.FieldProcessing)
	return u
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (u *QueueUpsert) SetTaskVodCreateFolder(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVodCreateFolder, v)
	return u
}

// UpdateTaskVodCreateFolder sets the "task_vod_create_folder" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVodCreateFolder() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVodCreateFolder)
	return u
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (u *QueueUpsert) ClearTaskVodCreateFolder() *QueueUpsert {
	u.SetNull(queue.FieldTaskVodCreateFolder)
	return u
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (u *QueueUpsert) SetTaskVodDownloadThumbnail(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVodDownloadThumbnail, v)
	return u
}

// UpdateTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVodDownloadThumbnail() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVodDownloadThumbnail)
	return u
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (u *QueueUpsert) ClearTaskVodDownloadThumbnail() *QueueUpsert {
	u.SetNull(queue.FieldTaskVodDownloadThumbnail)
	return u
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (u *QueueUpsert) SetTaskVodSaveInfo(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVodSaveInfo, v)
	return u
}

// UpdateTaskVodSaveInfo sets the "task_vod_save_info" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVodSaveInfo() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVodSaveInfo)
	return u
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (u *QueueUpsert) ClearTaskVodSaveInfo() *QueueUpsert {
	u.SetNull(queue.FieldTaskVodSaveInfo)
	return u
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (u *QueueUpsert) SetTaskVideoDownload(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVideoDownload, v)
	return u
}

// UpdateTaskVideoDownload sets the "task_video_download" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVideoDownload() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVideoDownload)
	return u
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (u *QueueUpsert) ClearTaskVideoDownload() *QueueUpsert {
	u.SetNull(queue.FieldTaskVideoDownload)
	return u
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (u *QueueUpsert) SetTaskVideoConvert(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVideoConvert, v)
	return u
}

// UpdateTaskVideoConvert sets the "task_video_convert" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVideoConvert() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVideoConvert)
	return u
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (u *QueueUpsert) ClearTaskVideoConvert() *QueueUpsert {
	u.SetNull(queue.FieldTaskVideoConvert)
	return u
}

// SetTaskVideoMove sets the "task_video_move" field.
func (u *QueueUpsert) SetTaskVideoMove(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskVideoMove, v)
	return u
}

// UpdateTaskVideoMove sets the "task_video_move" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskVideoMove() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskVideoMove)
	return u
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (u *QueueUpsert) ClearTaskVideoMove() *QueueUpsert {
	u.SetNull(queue.FieldTaskVideoMove)
	return u
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (u *QueueUpsert) SetTaskChatDownload(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskChatDownload, v)
	return u
}

// UpdateTaskChatDownload sets the "task_chat_download" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskChatDownload() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskChatDownload)
	return u
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (u *QueueUpsert) ClearTaskChatDownload() *QueueUpsert {
	u.SetNull(queue.FieldTaskChatDownload)
	return u
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (u *QueueUpsert) SetTaskChatConvert(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskChatConvert, v)
	return u
}

// UpdateTaskChatConvert sets the "task_chat_convert" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskChatConvert() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskChatConvert)
	return u
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (u *QueueUpsert) ClearTaskChatConvert() *QueueUpsert {
	u.SetNull(queue.FieldTaskChatConvert)
	return u
}

// SetTaskChatRender sets the "task_chat_render" field.
func (u *QueueUpsert) SetTaskChatRender(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskChatRender, v)
	return u
}

// UpdateTaskChatRender sets the "task_chat_render" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskChatRender() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskChatRender)
	return u
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (u *QueueUpsert) ClearTaskChatRender() *QueueUpsert {
	u.SetNull(queue.FieldTaskChatRender)
	return u
}

// SetTaskChatMove sets the "task_chat_move" field.
func (u *QueueUpsert) SetTaskChatMove(v utils.TaskStatus) *QueueUpsert {
	u.Set(queue.FieldTaskChatMove, v)
	return u
}

// UpdateTaskChatMove sets the "task_chat_move" field to the value that was provided on create.
func (u *QueueUpsert) UpdateTaskChatMove() *QueueUpsert {
	u.SetExcluded(queue.FieldTaskChatMove)
	return u
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (u *QueueUpsert) ClearTaskChatMove() *QueueUpsert {
	u.SetNull(queue.FieldTaskChatMove)
	return u
}

// SetChatStart sets the "chat_start" field.
func (u *QueueUpsert) SetChatStart(v time.Time) *QueueUpsert {
	u.Set(queue.FieldChatStart, v)
	return u
}

// UpdateChatStart sets the "chat_start" field to the value that was provided on create.
func (u *QueueUpsert) UpdateChatStart() *QueueUpsert {
	u.SetExcluded(queue.FieldChatStart)
	return u
}

// ClearChatStart clears the value of the "chat_start" field.
func (u *QueueUpsert) ClearChatStart() *QueueUpsert {
	u.SetNull(queue.FieldChatStart)
	return u
}

// SetRenderChat sets the "render_chat" field.
func (u *QueueUpsert) SetRenderChat(v bool) *QueueUpsert {
	u.Set(queue.FieldRenderChat, v)
	return u
}

// UpdateRenderChat sets the "render_chat" field to the value that was provided on create.
func (u *QueueUpsert) UpdateRenderChat() *QueueUpsert {
	u.SetExcluded(queue.FieldRenderChat)
	return u
}

// ClearRenderChat clears the value of the "render_chat" field.
func (u *QueueUpsert) ClearRenderChat() *QueueUpsert {
	u.SetNull(queue.FieldRenderChat)
	return u
}

// SetWorkflowID sets the "workflow_id" field.
func (u *QueueUpsert) SetWorkflowID(v string) *QueueUpsert {
	u.Set(queue.FieldWorkflowID, v)
	return u
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *QueueUpsert) UpdateWorkflowID() *QueueUpsert {
	u.SetExcluded(queue.FieldWorkflowID)
	return u
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *QueueUpsert) ClearWorkflowID() *QueueUpsert {
	u.SetNull(queue.FieldWorkflowID)
	return u
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (u *QueueUpsert) SetWorkflowRunID(v string) *QueueUpsert {
	u.Set(queue.FieldWorkflowRunID, v)
	return u
}

// UpdateWorkflowRunID sets the "workflow_run_id" field to the value that was provided on create.
func (u *QueueUpsert) UpdateWorkflowRunID() *QueueUpsert {
	u.SetExcluded(queue.FieldWorkflowRunID)
	return u
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (u *QueueUpsert) ClearWorkflowRunID() *QueueUpsert {
	u.SetNull(queue.FieldWorkflowRunID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QueueUpsert) SetUpdatedAt(v time.Time) *QueueUpsert {
	u.Set(queue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QueueUpsert) UpdateUpdatedAt() *QueueUpsert {
	u.SetExcluded(queue.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Queue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(queue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QueueUpsertOne) UpdateNewValues() *QueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(queue.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(queue.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Queue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QueueUpsertOne) Ignore() *QueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QueueUpsertOne) DoNothing() *QueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QueueCreate.OnConflict
// documentation for more info.
func (u *QueueUpsertOne) Update(set func(*QueueUpsert)) *QueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetLiveArchive sets the "live_archive" field.
func (u *QueueUpsertOne) SetLiveArchive(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetLiveArchive(v)
	})
}

// UpdateLiveArchive sets the "live_archive" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateLiveArchive() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateLiveArchive()
	})
}

// SetOnHold sets the "on_hold" field.
func (u *QueueUpsertOne) SetOnHold(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetOnHold(v)
	})
}

// UpdateOnHold sets the "on_hold" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateOnHold() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateOnHold()
	})
}

// SetVideoProcessing sets the "video_processing" field.
func (u *QueueUpsertOne) SetVideoProcessing(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetVideoProcessing(v)
	})
}

// UpdateVideoProcessing sets the "video_processing" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateVideoProcessing() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateVideoProcessing()
	})
}

// SetChatProcessing sets the "chat_processing" field.
func (u *QueueUpsertOne) SetChatProcessing(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetChatProcessing(v)
	})
}

// UpdateChatProcessing sets the "chat_processing" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateChatProcessing() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateChatProcessing()
	})
}

// SetProcessing sets the "processing" field.
func (u *QueueUpsertOne) SetProcessing(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetProcessing(v)
	})
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateProcessing() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateProcessing()
	})
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (u *QueueUpsertOne) SetTaskVodCreateFolder(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodCreateFolder(v)
	})
}

// UpdateTaskVodCreateFolder sets the "task_vod_create_folder" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVodCreateFolder() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodCreateFolder()
	})
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (u *QueueUpsertOne) ClearTaskVodCreateFolder() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodCreateFolder()
	})
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (u *QueueUpsertOne) SetTaskVodDownloadThumbnail(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodDownloadThumbnail(v)
	})
}

// UpdateTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVodDownloadThumbnail() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodDownloadThumbnail()
	})
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (u *QueueUpsertOne) ClearTaskVodDownloadThumbnail() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodDownloadThumbnail()
	})
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (u *QueueUpsertOne) SetTaskVodSaveInfo(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodSaveInfo(v)
	})
}

// UpdateTaskVodSaveInfo sets the "task_vod_save_info" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVodSaveInfo() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodSaveInfo()
	})
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (u *QueueUpsertOne) ClearTaskVodSaveInfo() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodSaveInfo()
	})
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (u *QueueUpsertOne) SetTaskVideoDownload(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoDownload(v)
	})
}

// UpdateTaskVideoDownload sets the "task_video_download" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVideoDownload() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoDownload()
	})
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (u *QueueUpsertOne) ClearTaskVideoDownload() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoDownload()
	})
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (u *QueueUpsertOne) SetTaskVideoConvert(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoConvert(v)
	})
}

// UpdateTaskVideoConvert sets the "task_video_convert" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVideoConvert() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoConvert()
	})
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (u *QueueUpsertOne) ClearTaskVideoConvert() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoConvert()
	})
}

// SetTaskVideoMove sets the "task_video_move" field.
func (u *QueueUpsertOne) SetTaskVideoMove(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoMove(v)
	})
}

// UpdateTaskVideoMove sets the "task_video_move" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskVideoMove() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoMove()
	})
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (u *QueueUpsertOne) ClearTaskVideoMove() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoMove()
	})
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (u *QueueUpsertOne) SetTaskChatDownload(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatDownload(v)
	})
}

// UpdateTaskChatDownload sets the "task_chat_download" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskChatDownload() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatDownload()
	})
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (u *QueueUpsertOne) ClearTaskChatDownload() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatDownload()
	})
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (u *QueueUpsertOne) SetTaskChatConvert(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatConvert(v)
	})
}

// UpdateTaskChatConvert sets the "task_chat_convert" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskChatConvert() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatConvert()
	})
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (u *QueueUpsertOne) ClearTaskChatConvert() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatConvert()
	})
}

// SetTaskChatRender sets the "task_chat_render" field.
func (u *QueueUpsertOne) SetTaskChatRender(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatRender(v)
	})
}

// UpdateTaskChatRender sets the "task_chat_render" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskChatRender() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatRender()
	})
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (u *QueueUpsertOne) ClearTaskChatRender() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatRender()
	})
}

// SetTaskChatMove sets the "task_chat_move" field.
func (u *QueueUpsertOne) SetTaskChatMove(v utils.TaskStatus) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatMove(v)
	})
}

// UpdateTaskChatMove sets the "task_chat_move" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateTaskChatMove() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatMove()
	})
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (u *QueueUpsertOne) ClearTaskChatMove() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatMove()
	})
}

// SetChatStart sets the "chat_start" field.
func (u *QueueUpsertOne) SetChatStart(v time.Time) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetChatStart(v)
	})
}

// UpdateChatStart sets the "chat_start" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateChatStart() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateChatStart()
	})
}

// ClearChatStart clears the value of the "chat_start" field.
func (u *QueueUpsertOne) ClearChatStart() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearChatStart()
	})
}

// SetRenderChat sets the "render_chat" field.
func (u *QueueUpsertOne) SetRenderChat(v bool) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetRenderChat(v)
	})
}

// UpdateRenderChat sets the "render_chat" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateRenderChat() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateRenderChat()
	})
}

// ClearRenderChat clears the value of the "render_chat" field.
func (u *QueueUpsertOne) ClearRenderChat() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearRenderChat()
	})
}

// SetWorkflowID sets the "workflow_id" field.
func (u *QueueUpsertOne) SetWorkflowID(v string) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetWorkflowID(v)
	})
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateWorkflowID() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateWorkflowID()
	})
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *QueueUpsertOne) ClearWorkflowID() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearWorkflowID()
	})
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (u *QueueUpsertOne) SetWorkflowRunID(v string) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetWorkflowRunID(v)
	})
}

// UpdateWorkflowRunID sets the "workflow_run_id" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateWorkflowRunID() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateWorkflowRunID()
	})
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (u *QueueUpsertOne) ClearWorkflowRunID() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.ClearWorkflowRunID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QueueUpsertOne) SetUpdatedAt(v time.Time) *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QueueUpsertOne) UpdateUpdatedAt() *QueueUpsertOne {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *QueueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QueueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QueueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QueueUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: QueueUpsertOne.ID is not supported by MySQL driver. Use QueueUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QueueUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QueueCreateBulk is the builder for creating many Queue entities in bulk.
type QueueCreateBulk struct {
	config
	err      error
	builders []*QueueCreate
	conflict []sql.ConflictOption
}

// Save creates the Queue entities in the database.
func (qcb *QueueCreateBulk) Save(ctx context.Context) ([]*Queue, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Queue, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QueueCreateBulk) SaveX(ctx context.Context) []*Queue {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QueueCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QueueCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Queue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QueueUpsert) {
//			SetLiveArchive(v+v).
//		}).
//		Exec(ctx)
func (qcb *QueueCreateBulk) OnConflict(opts ...sql.ConflictOption) *QueueUpsertBulk {
	qcb.conflict = opts
	return &QueueUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Queue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QueueCreateBulk) OnConflictColumns(columns ...string) *QueueUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QueueUpsertBulk{
		create: qcb,
	}
}

// QueueUpsertBulk is the builder for "upsert"-ing
// a bulk of Queue nodes.
type QueueUpsertBulk struct {
	create *QueueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Queue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(queue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QueueUpsertBulk) UpdateNewValues() *QueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(queue.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(queue.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Queue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QueueUpsertBulk) Ignore() *QueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QueueUpsertBulk) DoNothing() *QueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QueueCreateBulk.OnConflict
// documentation for more info.
func (u *QueueUpsertBulk) Update(set func(*QueueUpsert)) *QueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetLiveArchive sets the "live_archive" field.
func (u *QueueUpsertBulk) SetLiveArchive(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetLiveArchive(v)
	})
}

// UpdateLiveArchive sets the "live_archive" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateLiveArchive() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateLiveArchive()
	})
}

// SetOnHold sets the "on_hold" field.
func (u *QueueUpsertBulk) SetOnHold(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetOnHold(v)
	})
}

// UpdateOnHold sets the "on_hold" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateOnHold() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateOnHold()
	})
}

// SetVideoProcessing sets the "video_processing" field.
func (u *QueueUpsertBulk) SetVideoProcessing(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetVideoProcessing(v)
	})
}

// UpdateVideoProcessing sets the "video_processing" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateVideoProcessing() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateVideoProcessing()
	})
}

// SetChatProcessing sets the "chat_processing" field.
func (u *QueueUpsertBulk) SetChatProcessing(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetChatProcessing(v)
	})
}

// UpdateChatProcessing sets the "chat_processing" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateChatProcessing() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateChatProcessing()
	})
}

// SetProcessing sets the "processing" field.
func (u *QueueUpsertBulk) SetProcessing(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetProcessing(v)
	})
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateProcessing() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateProcessing()
	})
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (u *QueueUpsertBulk) SetTaskVodCreateFolder(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodCreateFolder(v)
	})
}

// UpdateTaskVodCreateFolder sets the "task_vod_create_folder" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVodCreateFolder() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodCreateFolder()
	})
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (u *QueueUpsertBulk) ClearTaskVodCreateFolder() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodCreateFolder()
	})
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (u *QueueUpsertBulk) SetTaskVodDownloadThumbnail(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodDownloadThumbnail(v)
	})
}

// UpdateTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVodDownloadThumbnail() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodDownloadThumbnail()
	})
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (u *QueueUpsertBulk) ClearTaskVodDownloadThumbnail() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodDownloadThumbnail()
	})
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (u *QueueUpsertBulk) SetTaskVodSaveInfo(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVodSaveInfo(v)
	})
}

// UpdateTaskVodSaveInfo sets the "task_vod_save_info" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVodSaveInfo() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVodSaveInfo()
	})
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (u *QueueUpsertBulk) ClearTaskVodSaveInfo() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVodSaveInfo()
	})
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (u *QueueUpsertBulk) SetTaskVideoDownload(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoDownload(v)
	})
}

// UpdateTaskVideoDownload sets the "task_video_download" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVideoDownload() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoDownload()
	})
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (u *QueueUpsertBulk) ClearTaskVideoDownload() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoDownload()
	})
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (u *QueueUpsertBulk) SetTaskVideoConvert(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoConvert(v)
	})
}

// UpdateTaskVideoConvert sets the "task_video_convert" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVideoConvert() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoConvert()
	})
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (u *QueueUpsertBulk) ClearTaskVideoConvert() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoConvert()
	})
}

// SetTaskVideoMove sets the "task_video_move" field.
func (u *QueueUpsertBulk) SetTaskVideoMove(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskVideoMove(v)
	})
}

// UpdateTaskVideoMove sets the "task_video_move" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskVideoMove() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskVideoMove()
	})
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (u *QueueUpsertBulk) ClearTaskVideoMove() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskVideoMove()
	})
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (u *QueueUpsertBulk) SetTaskChatDownload(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatDownload(v)
	})
}

// UpdateTaskChatDownload sets the "task_chat_download" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskChatDownload() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatDownload()
	})
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (u *QueueUpsertBulk) ClearTaskChatDownload() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatDownload()
	})
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (u *QueueUpsertBulk) SetTaskChatConvert(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatConvert(v)
	})
}

// UpdateTaskChatConvert sets the "task_chat_convert" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskChatConvert() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatConvert()
	})
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (u *QueueUpsertBulk) ClearTaskChatConvert() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatConvert()
	})
}

// SetTaskChatRender sets the "task_chat_render" field.
func (u *QueueUpsertBulk) SetTaskChatRender(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatRender(v)
	})
}

// UpdateTaskChatRender sets the "task_chat_render" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskChatRender() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatRender()
	})
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (u *QueueUpsertBulk) ClearTaskChatRender() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatRender()
	})
}

// SetTaskChatMove sets the "task_chat_move" field.
func (u *QueueUpsertBulk) SetTaskChatMove(v utils.TaskStatus) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetTaskChatMove(v)
	})
}

// UpdateTaskChatMove sets the "task_chat_move" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateTaskChatMove() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateTaskChatMove()
	})
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (u *QueueUpsertBulk) ClearTaskChatMove() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearTaskChatMove()
	})
}

// SetChatStart sets the "chat_start" field.
func (u *QueueUpsertBulk) SetChatStart(v time.Time) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetChatStart(v)
	})
}

// UpdateChatStart sets the "chat_start" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateChatStart() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateChatStart()
	})
}

// ClearChatStart clears the value of the "chat_start" field.
func (u *QueueUpsertBulk) ClearChatStart() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearChatStart()
	})
}

// SetRenderChat sets the "render_chat" field.
func (u *QueueUpsertBulk) SetRenderChat(v bool) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetRenderChat(v)
	})
}

// UpdateRenderChat sets the "render_chat" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateRenderChat() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateRenderChat()
	})
}

// ClearRenderChat clears the value of the "render_chat" field.
func (u *QueueUpsertBulk) ClearRenderChat() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearRenderChat()
	})
}

// SetWorkflowID sets the "workflow_id" field.
func (u *QueueUpsertBulk) SetWorkflowID(v string) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetWorkflowID(v)
	})
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateWorkflowID() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateWorkflowID()
	})
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *QueueUpsertBulk) ClearWorkflowID() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearWorkflowID()
	})
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (u *QueueUpsertBulk) SetWorkflowRunID(v string) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetWorkflowRunID(v)
	})
}

// UpdateWorkflowRunID sets the "workflow_run_id" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateWorkflowRunID() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateWorkflowRunID()
	})
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (u *QueueUpsertBulk) ClearWorkflowRunID() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.ClearWorkflowRunID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QueueUpsertBulk) SetUpdatedAt(v time.Time) *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QueueUpsertBulk) UpdateUpdatedAt() *QueueUpsertBulk {
	return u.Update(func(s *QueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *QueueUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the QueueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QueueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QueueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
