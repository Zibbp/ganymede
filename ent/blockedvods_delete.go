// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/ganymede/ent/blockedvods"
	"github.com/zibbp/ganymede/ent/predicate"
)

// BlockedVodsDelete is the builder for deleting a BlockedVods entity.
type BlockedVodsDelete struct {
	config
	hooks    []Hook
	mutation *BlockedVodsMutation
}

// Where appends a list predicates to the BlockedVodsDelete builder.
func (bvd *BlockedVodsDelete) Where(ps ...predicate.BlockedVods) *BlockedVodsDelete {
	bvd.mutation.Where(ps...)
	return bvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bvd *BlockedVodsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bvd.sqlExec, bvd.mutation, bvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bvd *BlockedVodsDelete) ExecX(ctx context.Context) int {
	n, err := bvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bvd *BlockedVodsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blockedvods.Table, sqlgraph.NewFieldSpec(blockedvods.FieldID, field.TypeString))
	if ps := bvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bvd.mutation.done = true
	return affected, err
}

// BlockedVodsDeleteOne is the builder for deleting a single BlockedVods entity.
type BlockedVodsDeleteOne struct {
	bvd *BlockedVodsDelete
}

// Where appends a list predicates to the BlockedVodsDelete builder.
func (bvdo *BlockedVodsDeleteOne) Where(ps ...predicate.BlockedVods) *BlockedVodsDeleteOne {
	bvdo.bvd.mutation.Where(ps...)
	return bvdo
}

// Exec executes the deletion query.
func (bvdo *BlockedVodsDeleteOne) Exec(ctx context.Context) error {
	n, err := bvdo.bvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blockedvods.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bvdo *BlockedVodsDeleteOne) ExecX(ctx context.Context) {
	if err := bvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
