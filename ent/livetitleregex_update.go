// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livetitleregex"
	"github.com/zibbp/ganymede/ent/predicate"
)

// LiveTitleRegexUpdate is the builder for updating LiveTitleRegex entities.
type LiveTitleRegexUpdate struct {
	config
	hooks    []Hook
	mutation *LiveTitleRegexMutation
}

// Where appends a list predicates to the LiveTitleRegexUpdate builder.
func (ltru *LiveTitleRegexUpdate) Where(ps ...predicate.LiveTitleRegex) *LiveTitleRegexUpdate {
	ltru.mutation.Where(ps...)
	return ltru
}

// SetNegative sets the "negative" field.
func (ltru *LiveTitleRegexUpdate) SetNegative(b bool) *LiveTitleRegexUpdate {
	ltru.mutation.SetNegative(b)
	return ltru
}

// SetNillableNegative sets the "negative" field if the given value is not nil.
func (ltru *LiveTitleRegexUpdate) SetNillableNegative(b *bool) *LiveTitleRegexUpdate {
	if b != nil {
		ltru.SetNegative(*b)
	}
	return ltru
}

// SetRegex sets the "regex" field.
func (ltru *LiveTitleRegexUpdate) SetRegex(s string) *LiveTitleRegexUpdate {
	ltru.mutation.SetRegex(s)
	return ltru
}

// SetNillableRegex sets the "regex" field if the given value is not nil.
func (ltru *LiveTitleRegexUpdate) SetNillableRegex(s *string) *LiveTitleRegexUpdate {
	if s != nil {
		ltru.SetRegex(*s)
	}
	return ltru
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (ltru *LiveTitleRegexUpdate) SetApplyToVideos(b bool) *LiveTitleRegexUpdate {
	ltru.mutation.SetApplyToVideos(b)
	return ltru
}

// SetNillableApplyToVideos sets the "apply_to_videos" field if the given value is not nil.
func (ltru *LiveTitleRegexUpdate) SetNillableApplyToVideos(b *bool) *LiveTitleRegexUpdate {
	if b != nil {
		ltru.SetApplyToVideos(*b)
	}
	return ltru
}

// SetLiveID sets the "live" edge to the Live entity by ID.
func (ltru *LiveTitleRegexUpdate) SetLiveID(id uuid.UUID) *LiveTitleRegexUpdate {
	ltru.mutation.SetLiveID(id)
	return ltru
}

// SetLive sets the "live" edge to the Live entity.
func (ltru *LiveTitleRegexUpdate) SetLive(l *Live) *LiveTitleRegexUpdate {
	return ltru.SetLiveID(l.ID)
}

// Mutation returns the LiveTitleRegexMutation object of the builder.
func (ltru *LiveTitleRegexUpdate) Mutation() *LiveTitleRegexMutation {
	return ltru.mutation
}

// ClearLive clears the "live" edge to the Live entity.
func (ltru *LiveTitleRegexUpdate) ClearLive() *LiveTitleRegexUpdate {
	ltru.mutation.ClearLive()
	return ltru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltru *LiveTitleRegexUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ltru.sqlSave, ltru.mutation, ltru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltru *LiveTitleRegexUpdate) SaveX(ctx context.Context) int {
	affected, err := ltru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltru *LiveTitleRegexUpdate) Exec(ctx context.Context) error {
	_, err := ltru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltru *LiveTitleRegexUpdate) ExecX(ctx context.Context) {
	if err := ltru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltru *LiveTitleRegexUpdate) check() error {
	if _, ok := ltru.mutation.LiveID(); ltru.mutation.LiveCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LiveTitleRegex.live"`)
	}
	return nil
}

func (ltru *LiveTitleRegexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(livetitleregex.Table, livetitleregex.Columns, sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID))
	if ps := ltru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltru.mutation.Negative(); ok {
		_spec.SetField(livetitleregex.FieldNegative, field.TypeBool, value)
	}
	if value, ok := ltru.mutation.Regex(); ok {
		_spec.SetField(livetitleregex.FieldRegex, field.TypeString, value)
	}
	if value, ok := ltru.mutation.ApplyToVideos(); ok {
		_spec.SetField(livetitleregex.FieldApplyToVideos, field.TypeBool, value)
	}
	if ltru.mutation.LiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livetitleregex.LiveTable,
			Columns: []string{livetitleregex.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltru.mutation.LiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livetitleregex.LiveTable,
			Columns: []string{livetitleregex.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{livetitleregex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltru.mutation.done = true
	return n, nil
}

// LiveTitleRegexUpdateOne is the builder for updating a single LiveTitleRegex entity.
type LiveTitleRegexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LiveTitleRegexMutation
}

// SetNegative sets the "negative" field.
func (ltruo *LiveTitleRegexUpdateOne) SetNegative(b bool) *LiveTitleRegexUpdateOne {
	ltruo.mutation.SetNegative(b)
	return ltruo
}

// SetNillableNegative sets the "negative" field if the given value is not nil.
func (ltruo *LiveTitleRegexUpdateOne) SetNillableNegative(b *bool) *LiveTitleRegexUpdateOne {
	if b != nil {
		ltruo.SetNegative(*b)
	}
	return ltruo
}

// SetRegex sets the "regex" field.
func (ltruo *LiveTitleRegexUpdateOne) SetRegex(s string) *LiveTitleRegexUpdateOne {
	ltruo.mutation.SetRegex(s)
	return ltruo
}

// SetNillableRegex sets the "regex" field if the given value is not nil.
func (ltruo *LiveTitleRegexUpdateOne) SetNillableRegex(s *string) *LiveTitleRegexUpdateOne {
	if s != nil {
		ltruo.SetRegex(*s)
	}
	return ltruo
}

// SetApplyToVideos sets the "apply_to_videos" field.
func (ltruo *LiveTitleRegexUpdateOne) SetApplyToVideos(b bool) *LiveTitleRegexUpdateOne {
	ltruo.mutation.SetApplyToVideos(b)
	return ltruo
}

// SetNillableApplyToVideos sets the "apply_to_videos" field if the given value is not nil.
func (ltruo *LiveTitleRegexUpdateOne) SetNillableApplyToVideos(b *bool) *LiveTitleRegexUpdateOne {
	if b != nil {
		ltruo.SetApplyToVideos(*b)
	}
	return ltruo
}

// SetLiveID sets the "live" edge to the Live entity by ID.
func (ltruo *LiveTitleRegexUpdateOne) SetLiveID(id uuid.UUID) *LiveTitleRegexUpdateOne {
	ltruo.mutation.SetLiveID(id)
	return ltruo
}

// SetLive sets the "live" edge to the Live entity.
func (ltruo *LiveTitleRegexUpdateOne) SetLive(l *Live) *LiveTitleRegexUpdateOne {
	return ltruo.SetLiveID(l.ID)
}

// Mutation returns the LiveTitleRegexMutation object of the builder.
func (ltruo *LiveTitleRegexUpdateOne) Mutation() *LiveTitleRegexMutation {
	return ltruo.mutation
}

// ClearLive clears the "live" edge to the Live entity.
func (ltruo *LiveTitleRegexUpdateOne) ClearLive() *LiveTitleRegexUpdateOne {
	ltruo.mutation.ClearLive()
	return ltruo
}

// Where appends a list predicates to the LiveTitleRegexUpdate builder.
func (ltruo *LiveTitleRegexUpdateOne) Where(ps ...predicate.LiveTitleRegex) *LiveTitleRegexUpdateOne {
	ltruo.mutation.Where(ps...)
	return ltruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltruo *LiveTitleRegexUpdateOne) Select(field string, fields ...string) *LiveTitleRegexUpdateOne {
	ltruo.fields = append([]string{field}, fields...)
	return ltruo
}

// Save executes the query and returns the updated LiveTitleRegex entity.
func (ltruo *LiveTitleRegexUpdateOne) Save(ctx context.Context) (*LiveTitleRegex, error) {
	return withHooks(ctx, ltruo.sqlSave, ltruo.mutation, ltruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltruo *LiveTitleRegexUpdateOne) SaveX(ctx context.Context) *LiveTitleRegex {
	node, err := ltruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltruo *LiveTitleRegexUpdateOne) Exec(ctx context.Context) error {
	_, err := ltruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltruo *LiveTitleRegexUpdateOne) ExecX(ctx context.Context) {
	if err := ltruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltruo *LiveTitleRegexUpdateOne) check() error {
	if _, ok := ltruo.mutation.LiveID(); ltruo.mutation.LiveCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LiveTitleRegex.live"`)
	}
	return nil
}

func (ltruo *LiveTitleRegexUpdateOne) sqlSave(ctx context.Context) (_node *LiveTitleRegex, err error) {
	if err := ltruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(livetitleregex.Table, livetitleregex.Columns, sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID))
	id, ok := ltruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LiveTitleRegex.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, livetitleregex.FieldID)
		for _, f := range fields {
			if !livetitleregex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != livetitleregex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltruo.mutation.Negative(); ok {
		_spec.SetField(livetitleregex.FieldNegative, field.TypeBool, value)
	}
	if value, ok := ltruo.mutation.Regex(); ok {
		_spec.SetField(livetitleregex.FieldRegex, field.TypeString, value)
	}
	if value, ok := ltruo.mutation.ApplyToVideos(); ok {
		_spec.SetField(livetitleregex.FieldApplyToVideos, field.TypeBool, value)
	}
	if ltruo.mutation.LiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livetitleregex.LiveTable,
			Columns: []string{livetitleregex.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltruo.mutation.LiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livetitleregex.LiveTable,
			Columns: []string{livetitleregex.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LiveTitleRegex{config: ltruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{livetitleregex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltruo.mutation.done = true
	return _node, nil
}
