// Code generated by ent, DO NOT EDIT.

package mutedsegment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLTE(FieldID, id))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldEnd, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v int) predicate.MutedSegment {
	return predicate.MutedSegment(sql.FieldLTE(FieldEnd, v))
}

// HasVod applies the HasEdge predicate on the "vod" edge.
func HasVod() predicate.MutedSegment {
	return predicate.MutedSegment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VodTable, VodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVodWith applies the HasEdge predicate on the "vod" edge with a given conditions (other predicates).
func HasVodWith(preds ...predicate.Vod) predicate.MutedSegment {
	return predicate.MutedSegment(func(s *sql.Selector) {
		step := newVodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MutedSegment) predicate.MutedSegment {
	return predicate.MutedSegment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MutedSegment) predicate.MutedSegment {
	return predicate.MutedSegment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MutedSegment) predicate.MutedSegment {
	return predicate.MutedSegment(sql.NotPredicates(p))
}
