// Code generated by ent, DO NOT EDIT.

package mutedsegment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the mutedsegment type in the database.
	Label = "muted_segment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// EdgeVod holds the string denoting the vod edge name in mutations.
	EdgeVod = "vod"
	// Table holds the table name of the mutedsegment in the database.
	Table = "muted_segments"
	// VodTable is the table that holds the vod relation/edge.
	VodTable = "muted_segments"
	// VodInverseTable is the table name for the Vod entity.
	// It exists in this package in order to avoid circular dependency with the "vod" package.
	VodInverseTable = "vods"
	// VodColumn is the table column denoting the vod relation/edge.
	VodColumn = "vod_muted_segments"
)

// Columns holds all SQL columns for mutedsegment fields.
var Columns = []string{
	FieldID,
	FieldStart,
	FieldEnd,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "muted_segments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vod_muted_segments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MutedSegment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByVodField orders the results by vod field.
func ByVodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVodStep(), sql.OrderByField(field, opts...))
	}
}
func newVodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VodTable, VodColumn),
	)
}
