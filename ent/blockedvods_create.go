// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/ganymede/ent/blockedvods"
)

// BlockedVodsCreate is the builder for creating a BlockedVods entity.
type BlockedVodsCreate struct {
	config
	mutation *BlockedVodsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bvc *BlockedVodsCreate) SetCreatedAt(t time.Time) *BlockedVodsCreate {
	bvc.mutation.SetCreatedAt(t)
	return bvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bvc *BlockedVodsCreate) SetNillableCreatedAt(t *time.Time) *BlockedVodsCreate {
	if t != nil {
		bvc.SetCreatedAt(*t)
	}
	return bvc
}

// SetID sets the "id" field.
func (bvc *BlockedVodsCreate) SetID(s string) *BlockedVodsCreate {
	bvc.mutation.SetID(s)
	return bvc
}

// Mutation returns the BlockedVodsMutation object of the builder.
func (bvc *BlockedVodsCreate) Mutation() *BlockedVodsMutation {
	return bvc.mutation
}

// Save creates the BlockedVods in the database.
func (bvc *BlockedVodsCreate) Save(ctx context.Context) (*BlockedVods, error) {
	bvc.defaults()
	return withHooks(ctx, bvc.sqlSave, bvc.mutation, bvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bvc *BlockedVodsCreate) SaveX(ctx context.Context) *BlockedVods {
	v, err := bvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bvc *BlockedVodsCreate) Exec(ctx context.Context) error {
	_, err := bvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bvc *BlockedVodsCreate) ExecX(ctx context.Context) {
	if err := bvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bvc *BlockedVodsCreate) defaults() {
	if _, ok := bvc.mutation.CreatedAt(); !ok {
		v := blockedvods.DefaultCreatedAt()
		bvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bvc *BlockedVodsCreate) check() error {
	if _, ok := bvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockedVods.created_at"`)}
	}
	return nil
}

func (bvc *BlockedVodsCreate) sqlSave(ctx context.Context) (*BlockedVods, error) {
	if err := bvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BlockedVods.ID type: %T", _spec.ID.Value)
		}
	}
	bvc.mutation.id = &_node.ID
	bvc.mutation.done = true
	return _node, nil
}

func (bvc *BlockedVodsCreate) createSpec() (*BlockedVods, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockedVods{config: bvc.config}
		_spec = sqlgraph.NewCreateSpec(blockedvods.Table, sqlgraph.NewFieldSpec(blockedvods.FieldID, field.TypeString))
	)
	_spec.OnConflict = bvc.conflict
	if id, ok := bvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bvc.mutation.CreatedAt(); ok {
		_spec.SetField(blockedvods.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockedVods.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockedVodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bvc *BlockedVodsCreate) OnConflict(opts ...sql.ConflictOption) *BlockedVodsUpsertOne {
	bvc.conflict = opts
	return &BlockedVodsUpsertOne{
		create: bvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bvc *BlockedVodsCreate) OnConflictColumns(columns ...string) *BlockedVodsUpsertOne {
	bvc.conflict = append(bvc.conflict, sql.ConflictColumns(columns...))
	return &BlockedVodsUpsertOne{
		create: bvc,
	}
}

type (
	// BlockedVodsUpsertOne is the builder for "upsert"-ing
	//  one BlockedVods node.
	BlockedVodsUpsertOne struct {
		create *BlockedVodsCreate
	}

	// BlockedVodsUpsert is the "OnConflict" setter.
	BlockedVodsUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockedvods.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockedVodsUpsertOne) UpdateNewValues() *BlockedVodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blockedvods.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockedvods.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockedVodsUpsertOne) Ignore() *BlockedVodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockedVodsUpsertOne) DoNothing() *BlockedVodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockedVodsCreate.OnConflict
// documentation for more info.
func (u *BlockedVodsUpsertOne) Update(set func(*BlockedVodsUpsert)) *BlockedVodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockedVodsUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BlockedVodsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockedVodsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockedVodsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockedVodsUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BlockedVodsUpsertOne.ID is not supported by MySQL driver. Use BlockedVodsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockedVodsUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockedVodsCreateBulk is the builder for creating many BlockedVods entities in bulk.
type BlockedVodsCreateBulk struct {
	config
	err      error
	builders []*BlockedVodsCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockedVods entities in the database.
func (bvcb *BlockedVodsCreateBulk) Save(ctx context.Context) ([]*BlockedVods, error) {
	if bvcb.err != nil {
		return nil, bvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bvcb.builders))
	nodes := make([]*BlockedVods, len(bvcb.builders))
	mutators := make([]Mutator, len(bvcb.builders))
	for i := range bvcb.builders {
		func(i int, root context.Context) {
			builder := bvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockedVodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bvcb *BlockedVodsCreateBulk) SaveX(ctx context.Context) []*BlockedVods {
	v, err := bvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bvcb *BlockedVodsCreateBulk) Exec(ctx context.Context) error {
	_, err := bvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bvcb *BlockedVodsCreateBulk) ExecX(ctx context.Context) {
	if err := bvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockedVods.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockedVodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bvcb *BlockedVodsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockedVodsUpsertBulk {
	bvcb.conflict = opts
	return &BlockedVodsUpsertBulk{
		create: bvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bvcb *BlockedVodsCreateBulk) OnConflictColumns(columns ...string) *BlockedVodsUpsertBulk {
	bvcb.conflict = append(bvcb.conflict, sql.ConflictColumns(columns...))
	return &BlockedVodsUpsertBulk{
		create: bvcb,
	}
}

// BlockedVodsUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockedVods nodes.
type BlockedVodsUpsertBulk struct {
	create *BlockedVodsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockedvods.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockedVodsUpsertBulk) UpdateNewValues() *BlockedVodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blockedvods.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockedvods.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockedVods.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockedVodsUpsertBulk) Ignore() *BlockedVodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockedVodsUpsertBulk) DoNothing() *BlockedVodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockedVodsCreateBulk.OnConflict
// documentation for more info.
func (u *BlockedVodsUpsertBulk) Update(set func(*BlockedVodsUpsert)) *BlockedVodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockedVodsUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BlockedVodsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockedVodsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockedVodsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockedVodsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
