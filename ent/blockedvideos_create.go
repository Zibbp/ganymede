// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/ganymede/ent/blockedvideos"
)

// BlockedVideosCreate is the builder for creating a BlockedVideos entity.
type BlockedVideosCreate struct {
	config
	mutation *BlockedVideosMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bvc *BlockedVideosCreate) SetCreatedAt(t time.Time) *BlockedVideosCreate {
	bvc.mutation.SetCreatedAt(t)
	return bvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bvc *BlockedVideosCreate) SetNillableCreatedAt(t *time.Time) *BlockedVideosCreate {
	if t != nil {
		bvc.SetCreatedAt(*t)
	}
	return bvc
}

// SetID sets the "id" field.
func (bvc *BlockedVideosCreate) SetID(s string) *BlockedVideosCreate {
	bvc.mutation.SetID(s)
	return bvc
}

// Mutation returns the BlockedVideosMutation object of the builder.
func (bvc *BlockedVideosCreate) Mutation() *BlockedVideosMutation {
	return bvc.mutation
}

// Save creates the BlockedVideos in the database.
func (bvc *BlockedVideosCreate) Save(ctx context.Context) (*BlockedVideos, error) {
	bvc.defaults()
	return withHooks(ctx, bvc.sqlSave, bvc.mutation, bvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bvc *BlockedVideosCreate) SaveX(ctx context.Context) *BlockedVideos {
	v, err := bvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bvc *BlockedVideosCreate) Exec(ctx context.Context) error {
	_, err := bvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bvc *BlockedVideosCreate) ExecX(ctx context.Context) {
	if err := bvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bvc *BlockedVideosCreate) defaults() {
	if _, ok := bvc.mutation.CreatedAt(); !ok {
		v := blockedvideos.DefaultCreatedAt()
		bvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bvc *BlockedVideosCreate) check() error {
	if _, ok := bvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockedVideos.created_at"`)}
	}
	return nil
}

func (bvc *BlockedVideosCreate) sqlSave(ctx context.Context) (*BlockedVideos, error) {
	if err := bvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BlockedVideos.ID type: %T", _spec.ID.Value)
		}
	}
	bvc.mutation.id = &_node.ID
	bvc.mutation.done = true
	return _node, nil
}

func (bvc *BlockedVideosCreate) createSpec() (*BlockedVideos, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockedVideos{config: bvc.config}
		_spec = sqlgraph.NewCreateSpec(blockedvideos.Table, sqlgraph.NewFieldSpec(blockedvideos.FieldID, field.TypeString))
	)
	_spec.OnConflict = bvc.conflict
	if id, ok := bvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bvc.mutation.CreatedAt(); ok {
		_spec.SetField(blockedvideos.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockedVideos.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockedVideosUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bvc *BlockedVideosCreate) OnConflict(opts ...sql.ConflictOption) *BlockedVideosUpsertOne {
	bvc.conflict = opts
	return &BlockedVideosUpsertOne{
		create: bvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bvc *BlockedVideosCreate) OnConflictColumns(columns ...string) *BlockedVideosUpsertOne {
	bvc.conflict = append(bvc.conflict, sql.ConflictColumns(columns...))
	return &BlockedVideosUpsertOne{
		create: bvc,
	}
}

type (
	// BlockedVideosUpsertOne is the builder for "upsert"-ing
	//  one BlockedVideos node.
	BlockedVideosUpsertOne struct {
		create *BlockedVideosCreate
	}

	// BlockedVideosUpsert is the "OnConflict" setter.
	BlockedVideosUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockedvideos.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockedVideosUpsertOne) UpdateNewValues() *BlockedVideosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blockedvideos.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockedvideos.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockedVideosUpsertOne) Ignore() *BlockedVideosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockedVideosUpsertOne) DoNothing() *BlockedVideosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockedVideosCreate.OnConflict
// documentation for more info.
func (u *BlockedVideosUpsertOne) Update(set func(*BlockedVideosUpsert)) *BlockedVideosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockedVideosUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BlockedVideosUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockedVideosCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockedVideosUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockedVideosUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BlockedVideosUpsertOne.ID is not supported by MySQL driver. Use BlockedVideosUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockedVideosUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockedVideosCreateBulk is the builder for creating many BlockedVideos entities in bulk.
type BlockedVideosCreateBulk struct {
	config
	err      error
	builders []*BlockedVideosCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockedVideos entities in the database.
func (bvcb *BlockedVideosCreateBulk) Save(ctx context.Context) ([]*BlockedVideos, error) {
	if bvcb.err != nil {
		return nil, bvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bvcb.builders))
	nodes := make([]*BlockedVideos, len(bvcb.builders))
	mutators := make([]Mutator, len(bvcb.builders))
	for i := range bvcb.builders {
		func(i int, root context.Context) {
			builder := bvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockedVideosMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bvcb *BlockedVideosCreateBulk) SaveX(ctx context.Context) []*BlockedVideos {
	v, err := bvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bvcb *BlockedVideosCreateBulk) Exec(ctx context.Context) error {
	_, err := bvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bvcb *BlockedVideosCreateBulk) ExecX(ctx context.Context) {
	if err := bvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockedVideos.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockedVideosUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bvcb *BlockedVideosCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockedVideosUpsertBulk {
	bvcb.conflict = opts
	return &BlockedVideosUpsertBulk{
		create: bvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bvcb *BlockedVideosCreateBulk) OnConflictColumns(columns ...string) *BlockedVideosUpsertBulk {
	bvcb.conflict = append(bvcb.conflict, sql.ConflictColumns(columns...))
	return &BlockedVideosUpsertBulk{
		create: bvcb,
	}
}

// BlockedVideosUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockedVideos nodes.
type BlockedVideosUpsertBulk struct {
	create *BlockedVideosCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockedvideos.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockedVideosUpsertBulk) UpdateNewValues() *BlockedVideosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blockedvideos.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockedvideos.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockedVideos.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockedVideosUpsertBulk) Ignore() *BlockedVideosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockedVideosUpsertBulk) DoNothing() *BlockedVideosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockedVideosCreateBulk.OnConflict
// documentation for more info.
func (u *BlockedVideosUpsertBulk) Update(set func(*BlockedVideosUpsert)) *BlockedVideosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockedVideosUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BlockedVideosUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockedVideosCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockedVideosCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockedVideosUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
