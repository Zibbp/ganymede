// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livetitleregex"
)

// LiveTitleRegex is the model entity for the LiveTitleRegex schema.
type LiveTitleRegex struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Negative match of the regex
	Negative bool `json:"negative"`
	// Title regex to match
	Regex string `json:"regex,omitempty"`
	// Apply regex to videos and vods
	ApplyToVideos bool `json:"apply_to_videos"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LiveTitleRegexQuery when eager-loading is set.
	Edges        LiveTitleRegexEdges `json:"edges"`
	live_id      *uuid.UUID
	selectValues sql.SelectValues
}

// LiveTitleRegexEdges holds the relations/edges for other nodes in the graph.
type LiveTitleRegexEdges struct {
	// Live holds the value of the live edge.
	Live *Live `json:"live,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LiveOrErr returns the Live value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LiveTitleRegexEdges) LiveOrErr() (*Live, error) {
	if e.loadedTypes[0] {
		if e.Live == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: live.Label}
		}
		return e.Live, nil
	}
	return nil, &NotLoadedError{edge: "live"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LiveTitleRegex) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case livetitleregex.FieldNegative, livetitleregex.FieldApplyToVideos:
			values[i] = new(sql.NullBool)
		case livetitleregex.FieldRegex:
			values[i] = new(sql.NullString)
		case livetitleregex.FieldID:
			values[i] = new(uuid.UUID)
		case livetitleregex.ForeignKeys[0]: // live_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LiveTitleRegex fields.
func (ltr *LiveTitleRegex) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case livetitleregex.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ltr.ID = *value
			}
		case livetitleregex.FieldNegative:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field negative", values[i])
			} else if value.Valid {
				ltr.Negative = value.Bool
			}
		case livetitleregex.FieldRegex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regex", values[i])
			} else if value.Valid {
				ltr.Regex = value.String
			}
		case livetitleregex.FieldApplyToVideos:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field apply_to_videos", values[i])
			} else if value.Valid {
				ltr.ApplyToVideos = value.Bool
			}
		case livetitleregex.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field live_id", values[i])
			} else if value.Valid {
				ltr.live_id = new(uuid.UUID)
				*ltr.live_id = *value.S.(*uuid.UUID)
			}
		default:
			ltr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LiveTitleRegex.
// This includes values selected through modifiers, order, etc.
func (ltr *LiveTitleRegex) Value(name string) (ent.Value, error) {
	return ltr.selectValues.Get(name)
}

// QueryLive queries the "live" edge of the LiveTitleRegex entity.
func (ltr *LiveTitleRegex) QueryLive() *LiveQuery {
	return NewLiveTitleRegexClient(ltr.config).QueryLive(ltr)
}

// Update returns a builder for updating this LiveTitleRegex.
// Note that you need to call LiveTitleRegex.Unwrap() before calling this method if this LiveTitleRegex
// was returned from a transaction, and the transaction was committed or rolled back.
func (ltr *LiveTitleRegex) Update() *LiveTitleRegexUpdateOne {
	return NewLiveTitleRegexClient(ltr.config).UpdateOne(ltr)
}

// Unwrap unwraps the LiveTitleRegex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ltr *LiveTitleRegex) Unwrap() *LiveTitleRegex {
	_tx, ok := ltr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LiveTitleRegex is not a transactional entity")
	}
	ltr.config.driver = _tx.drv
	return ltr
}

// String implements the fmt.Stringer.
func (ltr *LiveTitleRegex) String() string {
	var builder strings.Builder
	builder.WriteString("LiveTitleRegex(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ltr.ID))
	builder.WriteString("negative=")
	builder.WriteString(fmt.Sprintf("%v", ltr.Negative))
	builder.WriteString(", ")
	builder.WriteString("regex=")
	builder.WriteString(ltr.Regex)
	builder.WriteString(", ")
	builder.WriteString("apply_to_videos=")
	builder.WriteString(fmt.Sprintf("%v", ltr.ApplyToVideos))
	builder.WriteByte(')')
	return builder.String()
}

// LiveTitleRegexes is a parsable slice of LiveTitleRegex.
type LiveTitleRegexes []*LiveTitleRegex
