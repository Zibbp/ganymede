// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/multistreaminfo"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/vod"
)

// MultistreamInfo is the model entity for the MultistreamInfo schema.
type MultistreamInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DelayMs holds the value of the "delay_ms" field.
	DelayMs int `json:"delay_ms,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MultistreamInfoQuery when eager-loading is set.
	Edges                     MultistreamInfoEdges `json:"edges"`
	multistream_info_vod      *uuid.UUID
	playlist_multistream_info *uuid.UUID
	selectValues              sql.SelectValues
}

// MultistreamInfoEdges holds the relations/edges for other nodes in the graph.
type MultistreamInfoEdges struct {
	// Vod holds the value of the vod edge.
	Vod *Vod `json:"vod,omitempty"`
	// Playlist holds the value of the playlist edge.
	Playlist *Playlist `json:"playlist,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VodOrErr returns the Vod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MultistreamInfoEdges) VodOrErr() (*Vod, error) {
	if e.Vod != nil {
		return e.Vod, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vod.Label}
	}
	return nil, &NotLoadedError{edge: "vod"}
}

// PlaylistOrErr returns the Playlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MultistreamInfoEdges) PlaylistOrErr() (*Playlist, error) {
	if e.Playlist != nil {
		return e.Playlist, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: playlist.Label}
	}
	return nil, &NotLoadedError{edge: "playlist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MultistreamInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case multistreaminfo.FieldID, multistreaminfo.FieldDelayMs:
			values[i] = new(sql.NullInt64)
		case multistreaminfo.ForeignKeys[0]: // multistream_info_vod
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case multistreaminfo.ForeignKeys[1]: // playlist_multistream_info
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MultistreamInfo fields.
func (mi *MultistreamInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case multistreaminfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mi.ID = int(value.Int64)
		case multistreaminfo.FieldDelayMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delay_ms", values[i])
			} else if value.Valid {
				mi.DelayMs = int(value.Int64)
			}
		case multistreaminfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field multistream_info_vod", values[i])
			} else if value.Valid {
				mi.multistream_info_vod = new(uuid.UUID)
				*mi.multistream_info_vod = *value.S.(*uuid.UUID)
			}
		case multistreaminfo.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field playlist_multistream_info", values[i])
			} else if value.Valid {
				mi.playlist_multistream_info = new(uuid.UUID)
				*mi.playlist_multistream_info = *value.S.(*uuid.UUID)
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MultistreamInfo.
// This includes values selected through modifiers, order, etc.
func (mi *MultistreamInfo) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// QueryVod queries the "vod" edge of the MultistreamInfo entity.
func (mi *MultistreamInfo) QueryVod() *VodQuery {
	return NewMultistreamInfoClient(mi.config).QueryVod(mi)
}

// QueryPlaylist queries the "playlist" edge of the MultistreamInfo entity.
func (mi *MultistreamInfo) QueryPlaylist() *PlaylistQuery {
	return NewMultistreamInfoClient(mi.config).QueryPlaylist(mi)
}

// Update returns a builder for updating this MultistreamInfo.
// Note that you need to call MultistreamInfo.Unwrap() before calling this method if this MultistreamInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MultistreamInfo) Update() *MultistreamInfoUpdateOne {
	return NewMultistreamInfoClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the MultistreamInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MultistreamInfo) Unwrap() *MultistreamInfo {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MultistreamInfo is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MultistreamInfo) String() string {
	var builder strings.Builder
	builder.WriteString("MultistreamInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("delay_ms=")
	builder.WriteString(fmt.Sprintf("%v", mi.DelayMs))
	builder.WriteByte(')')
	return builder.String()
}

// MultistreamInfos is a parsable slice of MultistreamInfo.
type MultistreamInfos []*MultistreamInfo
