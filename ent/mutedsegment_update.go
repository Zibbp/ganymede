// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/mutedsegment"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/vod"
)

// MutedSegmentUpdate is the builder for updating MutedSegment entities.
type MutedSegmentUpdate struct {
	config
	hooks    []Hook
	mutation *MutedSegmentMutation
}

// Where appends a list predicates to the MutedSegmentUpdate builder.
func (msu *MutedSegmentUpdate) Where(ps ...predicate.MutedSegment) *MutedSegmentUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetStart sets the "start" field.
func (msu *MutedSegmentUpdate) SetStart(i int) *MutedSegmentUpdate {
	msu.mutation.ResetStart()
	msu.mutation.SetStart(i)
	return msu
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (msu *MutedSegmentUpdate) SetNillableStart(i *int) *MutedSegmentUpdate {
	if i != nil {
		msu.SetStart(*i)
	}
	return msu
}

// AddStart adds i to the "start" field.
func (msu *MutedSegmentUpdate) AddStart(i int) *MutedSegmentUpdate {
	msu.mutation.AddStart(i)
	return msu
}

// SetEnd sets the "end" field.
func (msu *MutedSegmentUpdate) SetEnd(i int) *MutedSegmentUpdate {
	msu.mutation.ResetEnd()
	msu.mutation.SetEnd(i)
	return msu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (msu *MutedSegmentUpdate) SetNillableEnd(i *int) *MutedSegmentUpdate {
	if i != nil {
		msu.SetEnd(*i)
	}
	return msu
}

// AddEnd adds i to the "end" field.
func (msu *MutedSegmentUpdate) AddEnd(i int) *MutedSegmentUpdate {
	msu.mutation.AddEnd(i)
	return msu
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (msu *MutedSegmentUpdate) SetVodID(id uuid.UUID) *MutedSegmentUpdate {
	msu.mutation.SetVodID(id)
	return msu
}

// SetVod sets the "vod" edge to the Vod entity.
func (msu *MutedSegmentUpdate) SetVod(v *Vod) *MutedSegmentUpdate {
	return msu.SetVodID(v.ID)
}

// Mutation returns the MutedSegmentMutation object of the builder.
func (msu *MutedSegmentUpdate) Mutation() *MutedSegmentMutation {
	return msu.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (msu *MutedSegmentUpdate) ClearVod() *MutedSegmentUpdate {
	msu.mutation.ClearVod()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MutedSegmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MutedSegmentUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MutedSegmentUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MutedSegmentUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MutedSegmentUpdate) check() error {
	if _, ok := msu.mutation.VodID(); msu.mutation.VodCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MutedSegment.vod"`)
	}
	return nil
}

func (msu *MutedSegmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mutedsegment.Table, mutedsegment.Columns, sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Start(); ok {
		_spec.SetField(mutedsegment.FieldStart, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedStart(); ok {
		_spec.AddField(mutedsegment.FieldStart, field.TypeInt, value)
	}
	if value, ok := msu.mutation.End(); ok {
		_spec.SetField(mutedsegment.FieldEnd, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedEnd(); ok {
		_spec.AddField(mutedsegment.FieldEnd, field.TypeInt, value)
	}
	if msu.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mutedsegment.VodTable,
			Columns: []string{mutedsegment.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mutedsegment.VodTable,
			Columns: []string{mutedsegment.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mutedsegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MutedSegmentUpdateOne is the builder for updating a single MutedSegment entity.
type MutedSegmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MutedSegmentMutation
}

// SetStart sets the "start" field.
func (msuo *MutedSegmentUpdateOne) SetStart(i int) *MutedSegmentUpdateOne {
	msuo.mutation.ResetStart()
	msuo.mutation.SetStart(i)
	return msuo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (msuo *MutedSegmentUpdateOne) SetNillableStart(i *int) *MutedSegmentUpdateOne {
	if i != nil {
		msuo.SetStart(*i)
	}
	return msuo
}

// AddStart adds i to the "start" field.
func (msuo *MutedSegmentUpdateOne) AddStart(i int) *MutedSegmentUpdateOne {
	msuo.mutation.AddStart(i)
	return msuo
}

// SetEnd sets the "end" field.
func (msuo *MutedSegmentUpdateOne) SetEnd(i int) *MutedSegmentUpdateOne {
	msuo.mutation.ResetEnd()
	msuo.mutation.SetEnd(i)
	return msuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (msuo *MutedSegmentUpdateOne) SetNillableEnd(i *int) *MutedSegmentUpdateOne {
	if i != nil {
		msuo.SetEnd(*i)
	}
	return msuo
}

// AddEnd adds i to the "end" field.
func (msuo *MutedSegmentUpdateOne) AddEnd(i int) *MutedSegmentUpdateOne {
	msuo.mutation.AddEnd(i)
	return msuo
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (msuo *MutedSegmentUpdateOne) SetVodID(id uuid.UUID) *MutedSegmentUpdateOne {
	msuo.mutation.SetVodID(id)
	return msuo
}

// SetVod sets the "vod" edge to the Vod entity.
func (msuo *MutedSegmentUpdateOne) SetVod(v *Vod) *MutedSegmentUpdateOne {
	return msuo.SetVodID(v.ID)
}

// Mutation returns the MutedSegmentMutation object of the builder.
func (msuo *MutedSegmentUpdateOne) Mutation() *MutedSegmentMutation {
	return msuo.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (msuo *MutedSegmentUpdateOne) ClearVod() *MutedSegmentUpdateOne {
	msuo.mutation.ClearVod()
	return msuo
}

// Where appends a list predicates to the MutedSegmentUpdate builder.
func (msuo *MutedSegmentUpdateOne) Where(ps ...predicate.MutedSegment) *MutedSegmentUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MutedSegmentUpdateOne) Select(field string, fields ...string) *MutedSegmentUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MutedSegment entity.
func (msuo *MutedSegmentUpdateOne) Save(ctx context.Context) (*MutedSegment, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MutedSegmentUpdateOne) SaveX(ctx context.Context) *MutedSegment {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MutedSegmentUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MutedSegmentUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MutedSegmentUpdateOne) check() error {
	if _, ok := msuo.mutation.VodID(); msuo.mutation.VodCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MutedSegment.vod"`)
	}
	return nil
}

func (msuo *MutedSegmentUpdateOne) sqlSave(ctx context.Context) (_node *MutedSegment, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mutedsegment.Table, mutedsegment.Columns, sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MutedSegment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mutedsegment.FieldID)
		for _, f := range fields {
			if !mutedsegment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mutedsegment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Start(); ok {
		_spec.SetField(mutedsegment.FieldStart, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedStart(); ok {
		_spec.AddField(mutedsegment.FieldStart, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.End(); ok {
		_spec.SetField(mutedsegment.FieldEnd, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedEnd(); ok {
		_spec.AddField(mutedsegment.FieldEnd, field.TypeInt, value)
	}
	if msuo.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mutedsegment.VodTable,
			Columns: []string{mutedsegment.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mutedsegment.VodTable,
			Columns: []string{mutedsegment.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MutedSegment{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mutedsegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
