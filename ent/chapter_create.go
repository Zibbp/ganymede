// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/chapter"
	"github.com/zibbp/ganymede/ent/vod"
)

// ChapterCreate is the builder for creating a Chapter entity.
type ChapterCreate struct {
	config
	mutation *ChapterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (cc *ChapterCreate) SetType(s string) *ChapterCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *ChapterCreate) SetNillableType(s *string) *ChapterCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetTitle sets the "title" field.
func (cc *ChapterCreate) SetTitle(s string) *ChapterCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cc *ChapterCreate) SetNillableTitle(s *string) *ChapterCreate {
	if s != nil {
		cc.SetTitle(*s)
	}
	return cc
}

// SetStart sets the "start" field.
func (cc *ChapterCreate) SetStart(i int) *ChapterCreate {
	cc.mutation.SetStart(i)
	return cc
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (cc *ChapterCreate) SetNillableStart(i *int) *ChapterCreate {
	if i != nil {
		cc.SetStart(*i)
	}
	return cc
}

// SetEnd sets the "end" field.
func (cc *ChapterCreate) SetEnd(i int) *ChapterCreate {
	cc.mutation.SetEnd(i)
	return cc
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (cc *ChapterCreate) SetNillableEnd(i *int) *ChapterCreate {
	if i != nil {
		cc.SetEnd(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChapterCreate) SetID(u uuid.UUID) *ChapterCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ChapterCreate) SetNillableID(u *uuid.UUID) *ChapterCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (cc *ChapterCreate) SetVodID(id uuid.UUID) *ChapterCreate {
	cc.mutation.SetVodID(id)
	return cc
}

// SetVod sets the "vod" edge to the Vod entity.
func (cc *ChapterCreate) SetVod(v *Vod) *ChapterCreate {
	return cc.SetVodID(v.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (cc *ChapterCreate) Mutation() *ChapterMutation {
	return cc.mutation
}

// Save creates the Chapter in the database.
func (cc *ChapterCreate) Save(ctx context.Context) (*Chapter, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChapterCreate) SaveX(ctx context.Context) *Chapter {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChapterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChapterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChapterCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := chapter.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChapterCreate) check() error {
	if len(cc.mutation.VodIDs()) == 0 {
		return &ValidationError{Name: "vod", err: errors.New(`ent: missing required edge "Chapter.vod"`)}
	}
	return nil
}

func (cc *ChapterCreate) sqlSave(ctx context.Context) (*Chapter, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChapterCreate) createSpec() (*Chapter, *sqlgraph.CreateSpec) {
	var (
		_node = &Chapter{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chapter.Table, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(chapter.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(chapter.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Start(); ok {
		_spec.SetField(chapter.FieldStart, field.TypeInt, value)
		_node.Start = value
	}
	if value, ok := cc.mutation.End(); ok {
		_spec.SetField(chapter.FieldEnd, field.TypeInt, value)
		_node.End = value
	}
	if nodes := cc.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.VodTable,
			Columns: []string{chapter.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vod_chapters = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chapter.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChapterUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (cc *ChapterCreate) OnConflict(opts ...sql.ConflictOption) *ChapterUpsertOne {
	cc.conflict = opts
	return &ChapterUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chapter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChapterCreate) OnConflictColumns(columns ...string) *ChapterUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChapterUpsertOne{
		create: cc,
	}
}

type (
	// ChapterUpsertOne is the builder for "upsert"-ing
	//  one Chapter node.
	ChapterUpsertOne struct {
		create *ChapterCreate
	}

	// ChapterUpsert is the "OnConflict" setter.
	ChapterUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *ChapterUpsert) SetType(v string) *ChapterUpsert {
	u.Set(chapter.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChapterUpsert) UpdateType() *ChapterUpsert {
	u.SetExcluded(chapter.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *ChapterUpsert) ClearType() *ChapterUpsert {
	u.SetNull(chapter.FieldType)
	return u
}

// SetTitle sets the "title" field.
func (u *ChapterUpsert) SetTitle(v string) *ChapterUpsert {
	u.Set(chapter.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChapterUpsert) UpdateTitle() *ChapterUpsert {
	u.SetExcluded(chapter.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ChapterUpsert) ClearTitle() *ChapterUpsert {
	u.SetNull(chapter.FieldTitle)
	return u
}

// SetStart sets the "start" field.
func (u *ChapterUpsert) SetStart(v int) *ChapterUpsert {
	u.Set(chapter.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChapterUpsert) UpdateStart() *ChapterUpsert {
	u.SetExcluded(chapter.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *ChapterUpsert) AddStart(v int) *ChapterUpsert {
	u.Add(chapter.FieldStart, v)
	return u
}

// ClearStart clears the value of the "start" field.
func (u *ChapterUpsert) ClearStart() *ChapterUpsert {
	u.SetNull(chapter.FieldStart)
	return u
}

// SetEnd sets the "end" field.
func (u *ChapterUpsert) SetEnd(v int) *ChapterUpsert {
	u.Set(chapter.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ChapterUpsert) UpdateEnd() *ChapterUpsert {
	u.SetExcluded(chapter.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *ChapterUpsert) AddEnd(v int) *ChapterUpsert {
	u.Add(chapter.FieldEnd, v)
	return u
}

// ClearEnd clears the value of the "end" field.
func (u *ChapterUpsert) ClearEnd() *ChapterUpsert {
	u.SetNull(chapter.FieldEnd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Chapter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chapter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChapterUpsertOne) UpdateNewValues() *ChapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(chapter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chapter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChapterUpsertOne) Ignore() *ChapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChapterUpsertOne) DoNothing() *ChapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChapterCreate.OnConflict
// documentation for more info.
func (u *ChapterUpsertOne) Update(set func(*ChapterUpsert)) *ChapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChapterUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ChapterUpsertOne) SetType(v string) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChapterUpsertOne) UpdateType() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ChapterUpsertOne) ClearType() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearType()
	})
}

// SetTitle sets the "title" field.
func (u *ChapterUpsertOne) SetTitle(v string) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChapterUpsertOne) UpdateTitle() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChapterUpsertOne) ClearTitle() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearTitle()
	})
}

// SetStart sets the "start" field.
func (u *ChapterUpsertOne) SetStart(v int) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *ChapterUpsertOne) AddStart(v int) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChapterUpsertOne) UpdateStart() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateStart()
	})
}

// ClearStart clears the value of the "start" field.
func (u *ChapterUpsertOne) ClearStart() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearStart()
	})
}

// SetEnd sets the "end" field.
func (u *ChapterUpsertOne) SetEnd(v int) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *ChapterUpsertOne) AddEnd(v int) *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ChapterUpsertOne) UpdateEnd() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "end" field.
func (u *ChapterUpsertOne) ClearEnd() *ChapterUpsertOne {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearEnd()
	})
}

// Exec executes the query.
func (u *ChapterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChapterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChapterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChapterUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ChapterUpsertOne.ID is not supported by MySQL driver. Use ChapterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChapterUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChapterCreateBulk is the builder for creating many Chapter entities in bulk.
type ChapterCreateBulk struct {
	config
	err      error
	builders []*ChapterCreate
	conflict []sql.ConflictOption
}

// Save creates the Chapter entities in the database.
func (ccb *ChapterCreateBulk) Save(ctx context.Context) ([]*Chapter, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chapter, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChapterCreateBulk) SaveX(ctx context.Context) []*Chapter {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChapterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChapterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chapter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChapterUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChapterCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChapterUpsertBulk {
	ccb.conflict = opts
	return &ChapterUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chapter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChapterCreateBulk) OnConflictColumns(columns ...string) *ChapterUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChapterUpsertBulk{
		create: ccb,
	}
}

// ChapterUpsertBulk is the builder for "upsert"-ing
// a bulk of Chapter nodes.
type ChapterUpsertBulk struct {
	create *ChapterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Chapter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chapter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChapterUpsertBulk) UpdateNewValues() *ChapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(chapter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chapter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChapterUpsertBulk) Ignore() *ChapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChapterUpsertBulk) DoNothing() *ChapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChapterCreateBulk.OnConflict
// documentation for more info.
func (u *ChapterUpsertBulk) Update(set func(*ChapterUpsert)) *ChapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChapterUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ChapterUpsertBulk) SetType(v string) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChapterUpsertBulk) UpdateType() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ChapterUpsertBulk) ClearType() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearType()
	})
}

// SetTitle sets the "title" field.
func (u *ChapterUpsertBulk) SetTitle(v string) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChapterUpsertBulk) UpdateTitle() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChapterUpsertBulk) ClearTitle() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearTitle()
	})
}

// SetStart sets the "start" field.
func (u *ChapterUpsertBulk) SetStart(v int) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *ChapterUpsertBulk) AddStart(v int) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ChapterUpsertBulk) UpdateStart() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateStart()
	})
}

// ClearStart clears the value of the "start" field.
func (u *ChapterUpsertBulk) ClearStart() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearStart()
	})
}

// SetEnd sets the "end" field.
func (u *ChapterUpsertBulk) SetEnd(v int) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *ChapterUpsertBulk) AddEnd(v int) *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ChapterUpsertBulk) UpdateEnd() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "end" field.
func (u *ChapterUpsertBulk) ClearEnd() *ChapterUpsertBulk {
	return u.Update(func(s *ChapterUpsert) {
		s.ClearEnd()
	})
}

// Exec executes the query.
func (u *ChapterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChapterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChapterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChapterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
