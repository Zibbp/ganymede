// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/mutedsegment"
	"github.com/zibbp/ganymede/ent/vod"
)

// MutedSegment is the model entity for the MutedSegment schema.
type MutedSegment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The start time of the muted segment
	Start int `json:"start,omitempty"`
	// The end time of the muted segment
	End int `json:"end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MutedSegmentQuery when eager-loading is set.
	Edges              MutedSegmentEdges `json:"edges"`
	vod_muted_segments *uuid.UUID
	selectValues       sql.SelectValues
}

// MutedSegmentEdges holds the relations/edges for other nodes in the graph.
type MutedSegmentEdges struct {
	// Vod holds the value of the vod edge.
	Vod *Vod `json:"vod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VodOrErr returns the Vod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MutedSegmentEdges) VodOrErr() (*Vod, error) {
	if e.loadedTypes[0] {
		if e.Vod == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vod.Label}
		}
		return e.Vod, nil
	}
	return nil, &NotLoadedError{edge: "vod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MutedSegment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mutedsegment.FieldStart, mutedsegment.FieldEnd:
			values[i] = new(sql.NullInt64)
		case mutedsegment.FieldID:
			values[i] = new(uuid.UUID)
		case mutedsegment.ForeignKeys[0]: // vod_muted_segments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MutedSegment fields.
func (ms *MutedSegment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mutedsegment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ms.ID = *value
			}
		case mutedsegment.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				ms.Start = int(value.Int64)
			}
		case mutedsegment.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				ms.End = int(value.Int64)
			}
		case mutedsegment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field vod_muted_segments", values[i])
			} else if value.Valid {
				ms.vod_muted_segments = new(uuid.UUID)
				*ms.vod_muted_segments = *value.S.(*uuid.UUID)
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MutedSegment.
// This includes values selected through modifiers, order, etc.
func (ms *MutedSegment) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryVod queries the "vod" edge of the MutedSegment entity.
func (ms *MutedSegment) QueryVod() *VodQuery {
	return NewMutedSegmentClient(ms.config).QueryVod(ms)
}

// Update returns a builder for updating this MutedSegment.
// Note that you need to call MutedSegment.Unwrap() before calling this method if this MutedSegment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MutedSegment) Update() *MutedSegmentUpdateOne {
	return NewMutedSegmentClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MutedSegment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MutedSegment) Unwrap() *MutedSegment {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MutedSegment is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MutedSegment) String() string {
	var builder strings.Builder
	builder.WriteString("MutedSegment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", ms.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", ms.End))
	builder.WriteByte(')')
	return builder.String()
}

// MutedSegments is a parsable slice of MutedSegment.
type MutedSegments []*MutedSegment
