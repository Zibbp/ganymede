// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/chapter"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livecategory"
	"github.com/zibbp/ganymede/ent/livetitleregex"
	"github.com/zibbp/ganymede/ent/mutedsegment"
	"github.com/zibbp/ganymede/ent/playback"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/twitchcategory"
	"github.com/zibbp/ganymede/ent/user"
	"github.com/zibbp/ganymede/ent/vod"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// Chapter is the client for interacting with the Chapter builders.
	Chapter *ChapterClient
	// Live is the client for interacting with the Live builders.
	Live *LiveClient
	// LiveCategory is the client for interacting with the LiveCategory builders.
	LiveCategory *LiveCategoryClient
	// LiveTitleRegex is the client for interacting with the LiveTitleRegex builders.
	LiveTitleRegex *LiveTitleRegexClient
	// MutedSegment is the client for interacting with the MutedSegment builders.
	MutedSegment *MutedSegmentClient
	// Playback is the client for interacting with the Playback builders.
	Playback *PlaybackClient
	// Playlist is the client for interacting with the Playlist builders.
	Playlist *PlaylistClient
	// Queue is the client for interacting with the Queue builders.
	Queue *QueueClient
	// TwitchCategory is the client for interacting with the TwitchCategory builders.
	TwitchCategory *TwitchCategoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vod is the client for interacting with the Vod builders.
	Vod *VodClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Channel = NewChannelClient(c.config)
	c.Chapter = NewChapterClient(c.config)
	c.Live = NewLiveClient(c.config)
	c.LiveCategory = NewLiveCategoryClient(c.config)
	c.LiveTitleRegex = NewLiveTitleRegexClient(c.config)
	c.MutedSegment = NewMutedSegmentClient(c.config)
	c.Playback = NewPlaybackClient(c.config)
	c.Playlist = NewPlaylistClient(c.config)
	c.Queue = NewQueueClient(c.config)
	c.TwitchCategory = NewTwitchCategoryClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vod = NewVodClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Channel:        NewChannelClient(cfg),
		Chapter:        NewChapterClient(cfg),
		Live:           NewLiveClient(cfg),
		LiveCategory:   NewLiveCategoryClient(cfg),
		LiveTitleRegex: NewLiveTitleRegexClient(cfg),
		MutedSegment:   NewMutedSegmentClient(cfg),
		Playback:       NewPlaybackClient(cfg),
		Playlist:       NewPlaylistClient(cfg),
		Queue:          NewQueueClient(cfg),
		TwitchCategory: NewTwitchCategoryClient(cfg),
		User:           NewUserClient(cfg),
		Vod:            NewVodClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Channel:        NewChannelClient(cfg),
		Chapter:        NewChapterClient(cfg),
		Live:           NewLiveClient(cfg),
		LiveCategory:   NewLiveCategoryClient(cfg),
		LiveTitleRegex: NewLiveTitleRegexClient(cfg),
		MutedSegment:   NewMutedSegmentClient(cfg),
		Playback:       NewPlaybackClient(cfg),
		Playlist:       NewPlaylistClient(cfg),
		Queue:          NewQueueClient(cfg),
		TwitchCategory: NewTwitchCategoryClient(cfg),
		User:           NewUserClient(cfg),
		Vod:            NewVodClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Channel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Channel, c.Chapter, c.Live, c.LiveCategory, c.LiveTitleRegex, c.MutedSegment,
		c.Playback, c.Playlist, c.Queue, c.TwitchCategory, c.User, c.Vod,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Channel, c.Chapter, c.Live, c.LiveCategory, c.LiveTitleRegex, c.MutedSegment,
		c.Playback, c.Playlist, c.Queue, c.TwitchCategory, c.User, c.Vod,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChannelMutation:
		return c.Channel.mutate(ctx, m)
	case *ChapterMutation:
		return c.Chapter.mutate(ctx, m)
	case *LiveMutation:
		return c.Live.mutate(ctx, m)
	case *LiveCategoryMutation:
		return c.LiveCategory.mutate(ctx, m)
	case *LiveTitleRegexMutation:
		return c.LiveTitleRegex.mutate(ctx, m)
	case *MutedSegmentMutation:
		return c.MutedSegment.mutate(ctx, m)
	case *PlaybackMutation:
		return c.Playback.mutate(ctx, m)
	case *PlaylistMutation:
		return c.Playlist.mutate(ctx, m)
	case *QueueMutation:
		return c.Queue.mutate(ctx, m)
	case *TwitchCategoryMutation:
		return c.TwitchCategory.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VodMutation:
		return c.Vod.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channel.Intercept(f(g(h())))`.
func (c *ChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Channel = append(c.inters.Channel, interceptors...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChannelClient) MapCreateBulk(slice any, setFunc func(*ChannelCreate, int)) *ChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChannelCreateBulk{err: fmt.Errorf("calling to ChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id uuid.UUID) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id uuid.UUID) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id uuid.UUID) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id uuid.UUID) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVods queries the vods edge of a Channel.
func (c *ChannelClient) QueryVods(ch *Channel) *VodQuery {
	query := (&VodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.VodsTable, channel.VodsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLive queries the live edge of a Channel.
func (c *ChannelClient) QueryLive(ch *Channel) *LiveQuery {
	query := (&LiveClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(live.Table, live.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.LiveTable, channel.LiveColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// Interceptors returns the client interceptors.
func (c *ChannelClient) Interceptors() []Interceptor {
	return c.inters.Channel
}

func (c *ChannelClient) mutate(ctx context.Context, m *ChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Channel mutation op: %q", m.Op())
	}
}

// ChapterClient is a client for the Chapter schema.
type ChapterClient struct {
	config
}

// NewChapterClient returns a client for the Chapter from the given config.
func NewChapterClient(c config) *ChapterClient {
	return &ChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chapter.Hooks(f(g(h())))`.
func (c *ChapterClient) Use(hooks ...Hook) {
	c.hooks.Chapter = append(c.hooks.Chapter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chapter.Intercept(f(g(h())))`.
func (c *ChapterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chapter = append(c.inters.Chapter, interceptors...)
}

// Create returns a builder for creating a Chapter entity.
func (c *ChapterClient) Create() *ChapterCreate {
	mutation := newChapterMutation(c.config, OpCreate)
	return &ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chapter entities.
func (c *ChapterClient) CreateBulk(builders ...*ChapterCreate) *ChapterCreateBulk {
	return &ChapterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChapterClient) MapCreateBulk(slice any, setFunc func(*ChapterCreate, int)) *ChapterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChapterCreateBulk{err: fmt.Errorf("calling to ChapterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChapterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chapter.
func (c *ChapterClient) Update() *ChapterUpdate {
	mutation := newChapterMutation(c.config, OpUpdate)
	return &ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChapterClient) UpdateOne(ch *Chapter) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapter(ch))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChapterClient) UpdateOneID(id uuid.UUID) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapterID(id))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chapter.
func (c *ChapterClient) Delete() *ChapterDelete {
	mutation := newChapterMutation(c.config, OpDelete)
	return &ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChapterClient) DeleteOne(ch *Chapter) *ChapterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChapterClient) DeleteOneID(id uuid.UUID) *ChapterDeleteOne {
	builder := c.Delete().Where(chapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChapterDeleteOne{builder}
}

// Query returns a query builder for Chapter.
func (c *ChapterClient) Query() *ChapterQuery {
	return &ChapterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChapter},
		inters: c.Interceptors(),
	}
}

// Get returns a Chapter entity by its id.
func (c *ChapterClient) Get(ctx context.Context, id uuid.UUID) (*Chapter, error) {
	return c.Query().Where(chapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChapterClient) GetX(ctx context.Context, id uuid.UUID) *Chapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVod queries the vod edge of a Chapter.
func (c *ChapterClient) QueryVod(ch *Chapter) *VodQuery {
	query := (&VodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chapter.Table, chapter.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chapter.VodTable, chapter.VodColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChapterClient) Hooks() []Hook {
	return c.hooks.Chapter
}

// Interceptors returns the client interceptors.
func (c *ChapterClient) Interceptors() []Interceptor {
	return c.inters.Chapter
}

func (c *ChapterClient) mutate(ctx context.Context, m *ChapterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chapter mutation op: %q", m.Op())
	}
}

// LiveClient is a client for the Live schema.
type LiveClient struct {
	config
}

// NewLiveClient returns a client for the Live from the given config.
func NewLiveClient(c config) *LiveClient {
	return &LiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `live.Hooks(f(g(h())))`.
func (c *LiveClient) Use(hooks ...Hook) {
	c.hooks.Live = append(c.hooks.Live, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `live.Intercept(f(g(h())))`.
func (c *LiveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Live = append(c.inters.Live, interceptors...)
}

// Create returns a builder for creating a Live entity.
func (c *LiveClient) Create() *LiveCreate {
	mutation := newLiveMutation(c.config, OpCreate)
	return &LiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Live entities.
func (c *LiveClient) CreateBulk(builders ...*LiveCreate) *LiveCreateBulk {
	return &LiveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LiveClient) MapCreateBulk(slice any, setFunc func(*LiveCreate, int)) *LiveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LiveCreateBulk{err: fmt.Errorf("calling to LiveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LiveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Live.
func (c *LiveClient) Update() *LiveUpdate {
	mutation := newLiveMutation(c.config, OpUpdate)
	return &LiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LiveClient) UpdateOne(l *Live) *LiveUpdateOne {
	mutation := newLiveMutation(c.config, OpUpdateOne, withLive(l))
	return &LiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LiveClient) UpdateOneID(id uuid.UUID) *LiveUpdateOne {
	mutation := newLiveMutation(c.config, OpUpdateOne, withLiveID(id))
	return &LiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Live.
func (c *LiveClient) Delete() *LiveDelete {
	mutation := newLiveMutation(c.config, OpDelete)
	return &LiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LiveClient) DeleteOne(l *Live) *LiveDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LiveClient) DeleteOneID(id uuid.UUID) *LiveDeleteOne {
	builder := c.Delete().Where(live.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LiveDeleteOne{builder}
}

// Query returns a query builder for Live.
func (c *LiveClient) Query() *LiveQuery {
	return &LiveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLive},
		inters: c.Interceptors(),
	}
}

// Get returns a Live entity by its id.
func (c *LiveClient) Get(ctx context.Context, id uuid.UUID) (*Live, error) {
	return c.Query().Where(live.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LiveClient) GetX(ctx context.Context, id uuid.UUID) *Live {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannel queries the channel edge of a Live.
func (c *LiveClient) QueryChannel(l *Live) *ChannelQuery {
	query := (&ChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(live.Table, live.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, live.ChannelTable, live.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a Live.
func (c *LiveClient) QueryCategories(l *Live) *LiveCategoryQuery {
	query := (&LiveCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(live.Table, live.FieldID, id),
			sqlgraph.To(livecategory.Table, livecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, live.CategoriesTable, live.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTitleRegex queries the title_regex edge of a Live.
func (c *LiveClient) QueryTitleRegex(l *Live) *LiveTitleRegexQuery {
	query := (&LiveTitleRegexClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(live.Table, live.FieldID, id),
			sqlgraph.To(livetitleregex.Table, livetitleregex.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, live.TitleRegexTable, live.TitleRegexColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LiveClient) Hooks() []Hook {
	return c.hooks.Live
}

// Interceptors returns the client interceptors.
func (c *LiveClient) Interceptors() []Interceptor {
	return c.inters.Live
}

func (c *LiveClient) mutate(ctx context.Context, m *LiveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LiveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LiveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LiveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Live mutation op: %q", m.Op())
	}
}

// LiveCategoryClient is a client for the LiveCategory schema.
type LiveCategoryClient struct {
	config
}

// NewLiveCategoryClient returns a client for the LiveCategory from the given config.
func NewLiveCategoryClient(c config) *LiveCategoryClient {
	return &LiveCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `livecategory.Hooks(f(g(h())))`.
func (c *LiveCategoryClient) Use(hooks ...Hook) {
	c.hooks.LiveCategory = append(c.hooks.LiveCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `livecategory.Intercept(f(g(h())))`.
func (c *LiveCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.LiveCategory = append(c.inters.LiveCategory, interceptors...)
}

// Create returns a builder for creating a LiveCategory entity.
func (c *LiveCategoryClient) Create() *LiveCategoryCreate {
	mutation := newLiveCategoryMutation(c.config, OpCreate)
	return &LiveCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LiveCategory entities.
func (c *LiveCategoryClient) CreateBulk(builders ...*LiveCategoryCreate) *LiveCategoryCreateBulk {
	return &LiveCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LiveCategoryClient) MapCreateBulk(slice any, setFunc func(*LiveCategoryCreate, int)) *LiveCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LiveCategoryCreateBulk{err: fmt.Errorf("calling to LiveCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LiveCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LiveCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LiveCategory.
func (c *LiveCategoryClient) Update() *LiveCategoryUpdate {
	mutation := newLiveCategoryMutation(c.config, OpUpdate)
	return &LiveCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LiveCategoryClient) UpdateOne(lc *LiveCategory) *LiveCategoryUpdateOne {
	mutation := newLiveCategoryMutation(c.config, OpUpdateOne, withLiveCategory(lc))
	return &LiveCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LiveCategoryClient) UpdateOneID(id uuid.UUID) *LiveCategoryUpdateOne {
	mutation := newLiveCategoryMutation(c.config, OpUpdateOne, withLiveCategoryID(id))
	return &LiveCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LiveCategory.
func (c *LiveCategoryClient) Delete() *LiveCategoryDelete {
	mutation := newLiveCategoryMutation(c.config, OpDelete)
	return &LiveCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LiveCategoryClient) DeleteOne(lc *LiveCategory) *LiveCategoryDeleteOne {
	return c.DeleteOneID(lc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LiveCategoryClient) DeleteOneID(id uuid.UUID) *LiveCategoryDeleteOne {
	builder := c.Delete().Where(livecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LiveCategoryDeleteOne{builder}
}

// Query returns a query builder for LiveCategory.
func (c *LiveCategoryClient) Query() *LiveCategoryQuery {
	return &LiveCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLiveCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a LiveCategory entity by its id.
func (c *LiveCategoryClient) Get(ctx context.Context, id uuid.UUID) (*LiveCategory, error) {
	return c.Query().Where(livecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LiveCategoryClient) GetX(ctx context.Context, id uuid.UUID) *LiveCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLive queries the live edge of a LiveCategory.
func (c *LiveCategoryClient) QueryLive(lc *LiveCategory) *LiveQuery {
	query := (&LiveClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(livecategory.Table, livecategory.FieldID, id),
			sqlgraph.To(live.Table, live.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, livecategory.LiveTable, livecategory.LiveColumn),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LiveCategoryClient) Hooks() []Hook {
	return c.hooks.LiveCategory
}

// Interceptors returns the client interceptors.
func (c *LiveCategoryClient) Interceptors() []Interceptor {
	return c.inters.LiveCategory
}

func (c *LiveCategoryClient) mutate(ctx context.Context, m *LiveCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LiveCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LiveCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LiveCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LiveCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LiveCategory mutation op: %q", m.Op())
	}
}

// LiveTitleRegexClient is a client for the LiveTitleRegex schema.
type LiveTitleRegexClient struct {
	config
}

// NewLiveTitleRegexClient returns a client for the LiveTitleRegex from the given config.
func NewLiveTitleRegexClient(c config) *LiveTitleRegexClient {
	return &LiveTitleRegexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `livetitleregex.Hooks(f(g(h())))`.
func (c *LiveTitleRegexClient) Use(hooks ...Hook) {
	c.hooks.LiveTitleRegex = append(c.hooks.LiveTitleRegex, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `livetitleregex.Intercept(f(g(h())))`.
func (c *LiveTitleRegexClient) Intercept(interceptors ...Interceptor) {
	c.inters.LiveTitleRegex = append(c.inters.LiveTitleRegex, interceptors...)
}

// Create returns a builder for creating a LiveTitleRegex entity.
func (c *LiveTitleRegexClient) Create() *LiveTitleRegexCreate {
	mutation := newLiveTitleRegexMutation(c.config, OpCreate)
	return &LiveTitleRegexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LiveTitleRegex entities.
func (c *LiveTitleRegexClient) CreateBulk(builders ...*LiveTitleRegexCreate) *LiveTitleRegexCreateBulk {
	return &LiveTitleRegexCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LiveTitleRegexClient) MapCreateBulk(slice any, setFunc func(*LiveTitleRegexCreate, int)) *LiveTitleRegexCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LiveTitleRegexCreateBulk{err: fmt.Errorf("calling to LiveTitleRegexClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LiveTitleRegexCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LiveTitleRegexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LiveTitleRegex.
func (c *LiveTitleRegexClient) Update() *LiveTitleRegexUpdate {
	mutation := newLiveTitleRegexMutation(c.config, OpUpdate)
	return &LiveTitleRegexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LiveTitleRegexClient) UpdateOne(ltr *LiveTitleRegex) *LiveTitleRegexUpdateOne {
	mutation := newLiveTitleRegexMutation(c.config, OpUpdateOne, withLiveTitleRegex(ltr))
	return &LiveTitleRegexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LiveTitleRegexClient) UpdateOneID(id uuid.UUID) *LiveTitleRegexUpdateOne {
	mutation := newLiveTitleRegexMutation(c.config, OpUpdateOne, withLiveTitleRegexID(id))
	return &LiveTitleRegexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LiveTitleRegex.
func (c *LiveTitleRegexClient) Delete() *LiveTitleRegexDelete {
	mutation := newLiveTitleRegexMutation(c.config, OpDelete)
	return &LiveTitleRegexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LiveTitleRegexClient) DeleteOne(ltr *LiveTitleRegex) *LiveTitleRegexDeleteOne {
	return c.DeleteOneID(ltr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LiveTitleRegexClient) DeleteOneID(id uuid.UUID) *LiveTitleRegexDeleteOne {
	builder := c.Delete().Where(livetitleregex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LiveTitleRegexDeleteOne{builder}
}

// Query returns a query builder for LiveTitleRegex.
func (c *LiveTitleRegexClient) Query() *LiveTitleRegexQuery {
	return &LiveTitleRegexQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLiveTitleRegex},
		inters: c.Interceptors(),
	}
}

// Get returns a LiveTitleRegex entity by its id.
func (c *LiveTitleRegexClient) Get(ctx context.Context, id uuid.UUID) (*LiveTitleRegex, error) {
	return c.Query().Where(livetitleregex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LiveTitleRegexClient) GetX(ctx context.Context, id uuid.UUID) *LiveTitleRegex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLive queries the live edge of a LiveTitleRegex.
func (c *LiveTitleRegexClient) QueryLive(ltr *LiveTitleRegex) *LiveQuery {
	query := (&LiveClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ltr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(livetitleregex.Table, livetitleregex.FieldID, id),
			sqlgraph.To(live.Table, live.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, livetitleregex.LiveTable, livetitleregex.LiveColumn),
		)
		fromV = sqlgraph.Neighbors(ltr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LiveTitleRegexClient) Hooks() []Hook {
	return c.hooks.LiveTitleRegex
}

// Interceptors returns the client interceptors.
func (c *LiveTitleRegexClient) Interceptors() []Interceptor {
	return c.inters.LiveTitleRegex
}

func (c *LiveTitleRegexClient) mutate(ctx context.Context, m *LiveTitleRegexMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LiveTitleRegexCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LiveTitleRegexUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LiveTitleRegexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LiveTitleRegexDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LiveTitleRegex mutation op: %q", m.Op())
	}
}

// MutedSegmentClient is a client for the MutedSegment schema.
type MutedSegmentClient struct {
	config
}

// NewMutedSegmentClient returns a client for the MutedSegment from the given config.
func NewMutedSegmentClient(c config) *MutedSegmentClient {
	return &MutedSegmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mutedsegment.Hooks(f(g(h())))`.
func (c *MutedSegmentClient) Use(hooks ...Hook) {
	c.hooks.MutedSegment = append(c.hooks.MutedSegment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mutedsegment.Intercept(f(g(h())))`.
func (c *MutedSegmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.MutedSegment = append(c.inters.MutedSegment, interceptors...)
}

// Create returns a builder for creating a MutedSegment entity.
func (c *MutedSegmentClient) Create() *MutedSegmentCreate {
	mutation := newMutedSegmentMutation(c.config, OpCreate)
	return &MutedSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MutedSegment entities.
func (c *MutedSegmentClient) CreateBulk(builders ...*MutedSegmentCreate) *MutedSegmentCreateBulk {
	return &MutedSegmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MutedSegmentClient) MapCreateBulk(slice any, setFunc func(*MutedSegmentCreate, int)) *MutedSegmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MutedSegmentCreateBulk{err: fmt.Errorf("calling to MutedSegmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MutedSegmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MutedSegmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MutedSegment.
func (c *MutedSegmentClient) Update() *MutedSegmentUpdate {
	mutation := newMutedSegmentMutation(c.config, OpUpdate)
	return &MutedSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MutedSegmentClient) UpdateOne(ms *MutedSegment) *MutedSegmentUpdateOne {
	mutation := newMutedSegmentMutation(c.config, OpUpdateOne, withMutedSegment(ms))
	return &MutedSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MutedSegmentClient) UpdateOneID(id uuid.UUID) *MutedSegmentUpdateOne {
	mutation := newMutedSegmentMutation(c.config, OpUpdateOne, withMutedSegmentID(id))
	return &MutedSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MutedSegment.
func (c *MutedSegmentClient) Delete() *MutedSegmentDelete {
	mutation := newMutedSegmentMutation(c.config, OpDelete)
	return &MutedSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MutedSegmentClient) DeleteOne(ms *MutedSegment) *MutedSegmentDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MutedSegmentClient) DeleteOneID(id uuid.UUID) *MutedSegmentDeleteOne {
	builder := c.Delete().Where(mutedsegment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MutedSegmentDeleteOne{builder}
}

// Query returns a query builder for MutedSegment.
func (c *MutedSegmentClient) Query() *MutedSegmentQuery {
	return &MutedSegmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMutedSegment},
		inters: c.Interceptors(),
	}
}

// Get returns a MutedSegment entity by its id.
func (c *MutedSegmentClient) Get(ctx context.Context, id uuid.UUID) (*MutedSegment, error) {
	return c.Query().Where(mutedsegment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MutedSegmentClient) GetX(ctx context.Context, id uuid.UUID) *MutedSegment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVod queries the vod edge of a MutedSegment.
func (c *MutedSegmentClient) QueryVod(ms *MutedSegment) *VodQuery {
	query := (&VodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mutedsegment.Table, mutedsegment.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mutedsegment.VodTable, mutedsegment.VodColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MutedSegmentClient) Hooks() []Hook {
	return c.hooks.MutedSegment
}

// Interceptors returns the client interceptors.
func (c *MutedSegmentClient) Interceptors() []Interceptor {
	return c.inters.MutedSegment
}

func (c *MutedSegmentClient) mutate(ctx context.Context, m *MutedSegmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MutedSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MutedSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MutedSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MutedSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MutedSegment mutation op: %q", m.Op())
	}
}

// PlaybackClient is a client for the Playback schema.
type PlaybackClient struct {
	config
}

// NewPlaybackClient returns a client for the Playback from the given config.
func NewPlaybackClient(c config) *PlaybackClient {
	return &PlaybackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playback.Hooks(f(g(h())))`.
func (c *PlaybackClient) Use(hooks ...Hook) {
	c.hooks.Playback = append(c.hooks.Playback, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playback.Intercept(f(g(h())))`.
func (c *PlaybackClient) Intercept(interceptors ...Interceptor) {
	c.inters.Playback = append(c.inters.Playback, interceptors...)
}

// Create returns a builder for creating a Playback entity.
func (c *PlaybackClient) Create() *PlaybackCreate {
	mutation := newPlaybackMutation(c.config, OpCreate)
	return &PlaybackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Playback entities.
func (c *PlaybackClient) CreateBulk(builders ...*PlaybackCreate) *PlaybackCreateBulk {
	return &PlaybackCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlaybackClient) MapCreateBulk(slice any, setFunc func(*PlaybackCreate, int)) *PlaybackCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlaybackCreateBulk{err: fmt.Errorf("calling to PlaybackClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlaybackCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlaybackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Playback.
func (c *PlaybackClient) Update() *PlaybackUpdate {
	mutation := newPlaybackMutation(c.config, OpUpdate)
	return &PlaybackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaybackClient) UpdateOne(pl *Playback) *PlaybackUpdateOne {
	mutation := newPlaybackMutation(c.config, OpUpdateOne, withPlayback(pl))
	return &PlaybackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaybackClient) UpdateOneID(id uuid.UUID) *PlaybackUpdateOne {
	mutation := newPlaybackMutation(c.config, OpUpdateOne, withPlaybackID(id))
	return &PlaybackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Playback.
func (c *PlaybackClient) Delete() *PlaybackDelete {
	mutation := newPlaybackMutation(c.config, OpDelete)
	return &PlaybackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaybackClient) DeleteOne(pl *Playback) *PlaybackDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaybackClient) DeleteOneID(id uuid.UUID) *PlaybackDeleteOne {
	builder := c.Delete().Where(playback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaybackDeleteOne{builder}
}

// Query returns a query builder for Playback.
func (c *PlaybackClient) Query() *PlaybackQuery {
	return &PlaybackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayback},
		inters: c.Interceptors(),
	}
}

// Get returns a Playback entity by its id.
func (c *PlaybackClient) Get(ctx context.Context, id uuid.UUID) (*Playback, error) {
	return c.Query().Where(playback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaybackClient) GetX(ctx context.Context, id uuid.UUID) *Playback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlaybackClient) Hooks() []Hook {
	return c.hooks.Playback
}

// Interceptors returns the client interceptors.
func (c *PlaybackClient) Interceptors() []Interceptor {
	return c.inters.Playback
}

func (c *PlaybackClient) mutate(ctx context.Context, m *PlaybackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaybackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaybackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaybackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaybackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Playback mutation op: %q", m.Op())
	}
}

// PlaylistClient is a client for the Playlist schema.
type PlaylistClient struct {
	config
}

// NewPlaylistClient returns a client for the Playlist from the given config.
func NewPlaylistClient(c config) *PlaylistClient {
	return &PlaylistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playlist.Hooks(f(g(h())))`.
func (c *PlaylistClient) Use(hooks ...Hook) {
	c.hooks.Playlist = append(c.hooks.Playlist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playlist.Intercept(f(g(h())))`.
func (c *PlaylistClient) Intercept(interceptors ...Interceptor) {
	c.inters.Playlist = append(c.inters.Playlist, interceptors...)
}

// Create returns a builder for creating a Playlist entity.
func (c *PlaylistClient) Create() *PlaylistCreate {
	mutation := newPlaylistMutation(c.config, OpCreate)
	return &PlaylistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Playlist entities.
func (c *PlaylistClient) CreateBulk(builders ...*PlaylistCreate) *PlaylistCreateBulk {
	return &PlaylistCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlaylistClient) MapCreateBulk(slice any, setFunc func(*PlaylistCreate, int)) *PlaylistCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlaylistCreateBulk{err: fmt.Errorf("calling to PlaylistClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlaylistCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlaylistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Playlist.
func (c *PlaylistClient) Update() *PlaylistUpdate {
	mutation := newPlaylistMutation(c.config, OpUpdate)
	return &PlaylistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaylistClient) UpdateOne(pl *Playlist) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylist(pl))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaylistClient) UpdateOneID(id uuid.UUID) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylistID(id))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Playlist.
func (c *PlaylistClient) Delete() *PlaylistDelete {
	mutation := newPlaylistMutation(c.config, OpDelete)
	return &PlaylistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaylistClient) DeleteOne(pl *Playlist) *PlaylistDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaylistClient) DeleteOneID(id uuid.UUID) *PlaylistDeleteOne {
	builder := c.Delete().Where(playlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaylistDeleteOne{builder}
}

// Query returns a query builder for Playlist.
func (c *PlaylistClient) Query() *PlaylistQuery {
	return &PlaylistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaylist},
		inters: c.Interceptors(),
	}
}

// Get returns a Playlist entity by its id.
func (c *PlaylistClient) Get(ctx context.Context, id uuid.UUID) (*Playlist, error) {
	return c.Query().Where(playlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaylistClient) GetX(ctx context.Context, id uuid.UUID) *Playlist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVods queries the vods edge of a Playlist.
func (c *PlaylistClient) QueryVods(pl *Playlist) *VodQuery {
	query := (&VodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist.Table, playlist.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, playlist.VodsTable, playlist.VodsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaylistClient) Hooks() []Hook {
	return c.hooks.Playlist
}

// Interceptors returns the client interceptors.
func (c *PlaylistClient) Interceptors() []Interceptor {
	return c.inters.Playlist
}

func (c *PlaylistClient) mutate(ctx context.Context, m *PlaylistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaylistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaylistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaylistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Playlist mutation op: %q", m.Op())
	}
}

// QueueClient is a client for the Queue schema.
type QueueClient struct {
	config
}

// NewQueueClient returns a client for the Queue from the given config.
func NewQueueClient(c config) *QueueClient {
	return &QueueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `queue.Hooks(f(g(h())))`.
func (c *QueueClient) Use(hooks ...Hook) {
	c.hooks.Queue = append(c.hooks.Queue, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `queue.Intercept(f(g(h())))`.
func (c *QueueClient) Intercept(interceptors ...Interceptor) {
	c.inters.Queue = append(c.inters.Queue, interceptors...)
}

// Create returns a builder for creating a Queue entity.
func (c *QueueClient) Create() *QueueCreate {
	mutation := newQueueMutation(c.config, OpCreate)
	return &QueueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Queue entities.
func (c *QueueClient) CreateBulk(builders ...*QueueCreate) *QueueCreateBulk {
	return &QueueCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QueueClient) MapCreateBulk(slice any, setFunc func(*QueueCreate, int)) *QueueCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QueueCreateBulk{err: fmt.Errorf("calling to QueueClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QueueCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QueueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Queue.
func (c *QueueClient) Update() *QueueUpdate {
	mutation := newQueueMutation(c.config, OpUpdate)
	return &QueueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QueueClient) UpdateOne(q *Queue) *QueueUpdateOne {
	mutation := newQueueMutation(c.config, OpUpdateOne, withQueue(q))
	return &QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QueueClient) UpdateOneID(id uuid.UUID) *QueueUpdateOne {
	mutation := newQueueMutation(c.config, OpUpdateOne, withQueueID(id))
	return &QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Queue.
func (c *QueueClient) Delete() *QueueDelete {
	mutation := newQueueMutation(c.config, OpDelete)
	return &QueueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QueueClient) DeleteOne(q *Queue) *QueueDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QueueClient) DeleteOneID(id uuid.UUID) *QueueDeleteOne {
	builder := c.Delete().Where(queue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QueueDeleteOne{builder}
}

// Query returns a query builder for Queue.
func (c *QueueClient) Query() *QueueQuery {
	return &QueueQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQueue},
		inters: c.Interceptors(),
	}
}

// Get returns a Queue entity by its id.
func (c *QueueClient) Get(ctx context.Context, id uuid.UUID) (*Queue, error) {
	return c.Query().Where(queue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QueueClient) GetX(ctx context.Context, id uuid.UUID) *Queue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVod queries the vod edge of a Queue.
func (c *QueueClient) QueryVod(q *Queue) *VodQuery {
	query := (&VodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queue.Table, queue.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, queue.VodTable, queue.VodColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QueueClient) Hooks() []Hook {
	return c.hooks.Queue
}

// Interceptors returns the client interceptors.
func (c *QueueClient) Interceptors() []Interceptor {
	return c.inters.Queue
}

func (c *QueueClient) mutate(ctx context.Context, m *QueueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QueueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QueueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QueueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Queue mutation op: %q", m.Op())
	}
}

// TwitchCategoryClient is a client for the TwitchCategory schema.
type TwitchCategoryClient struct {
	config
}

// NewTwitchCategoryClient returns a client for the TwitchCategory from the given config.
func NewTwitchCategoryClient(c config) *TwitchCategoryClient {
	return &TwitchCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `twitchcategory.Hooks(f(g(h())))`.
func (c *TwitchCategoryClient) Use(hooks ...Hook) {
	c.hooks.TwitchCategory = append(c.hooks.TwitchCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `twitchcategory.Intercept(f(g(h())))`.
func (c *TwitchCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.TwitchCategory = append(c.inters.TwitchCategory, interceptors...)
}

// Create returns a builder for creating a TwitchCategory entity.
func (c *TwitchCategoryClient) Create() *TwitchCategoryCreate {
	mutation := newTwitchCategoryMutation(c.config, OpCreate)
	return &TwitchCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TwitchCategory entities.
func (c *TwitchCategoryClient) CreateBulk(builders ...*TwitchCategoryCreate) *TwitchCategoryCreateBulk {
	return &TwitchCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TwitchCategoryClient) MapCreateBulk(slice any, setFunc func(*TwitchCategoryCreate, int)) *TwitchCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TwitchCategoryCreateBulk{err: fmt.Errorf("calling to TwitchCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TwitchCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TwitchCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TwitchCategory.
func (c *TwitchCategoryClient) Update() *TwitchCategoryUpdate {
	mutation := newTwitchCategoryMutation(c.config, OpUpdate)
	return &TwitchCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TwitchCategoryClient) UpdateOne(tc *TwitchCategory) *TwitchCategoryUpdateOne {
	mutation := newTwitchCategoryMutation(c.config, OpUpdateOne, withTwitchCategory(tc))
	return &TwitchCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TwitchCategoryClient) UpdateOneID(id string) *TwitchCategoryUpdateOne {
	mutation := newTwitchCategoryMutation(c.config, OpUpdateOne, withTwitchCategoryID(id))
	return &TwitchCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TwitchCategory.
func (c *TwitchCategoryClient) Delete() *TwitchCategoryDelete {
	mutation := newTwitchCategoryMutation(c.config, OpDelete)
	return &TwitchCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TwitchCategoryClient) DeleteOne(tc *TwitchCategory) *TwitchCategoryDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TwitchCategoryClient) DeleteOneID(id string) *TwitchCategoryDeleteOne {
	builder := c.Delete().Where(twitchcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TwitchCategoryDeleteOne{builder}
}

// Query returns a query builder for TwitchCategory.
func (c *TwitchCategoryClient) Query() *TwitchCategoryQuery {
	return &TwitchCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTwitchCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a TwitchCategory entity by its id.
func (c *TwitchCategoryClient) Get(ctx context.Context, id string) (*TwitchCategory, error) {
	return c.Query().Where(twitchcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TwitchCategoryClient) GetX(ctx context.Context, id string) *TwitchCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TwitchCategoryClient) Hooks() []Hook {
	return c.hooks.TwitchCategory
}

// Interceptors returns the client interceptors.
func (c *TwitchCategoryClient) Interceptors() []Interceptor {
	return c.inters.TwitchCategory
}

func (c *TwitchCategoryClient) mutate(ctx context.Context, m *TwitchCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TwitchCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TwitchCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TwitchCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TwitchCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TwitchCategory mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VodClient is a client for the Vod schema.
type VodClient struct {
	config
}

// NewVodClient returns a client for the Vod from the given config.
func NewVodClient(c config) *VodClient {
	return &VodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vod.Hooks(f(g(h())))`.
func (c *VodClient) Use(hooks ...Hook) {
	c.hooks.Vod = append(c.hooks.Vod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vod.Intercept(f(g(h())))`.
func (c *VodClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vod = append(c.inters.Vod, interceptors...)
}

// Create returns a builder for creating a Vod entity.
func (c *VodClient) Create() *VodCreate {
	mutation := newVodMutation(c.config, OpCreate)
	return &VodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vod entities.
func (c *VodClient) CreateBulk(builders ...*VodCreate) *VodCreateBulk {
	return &VodCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VodClient) MapCreateBulk(slice any, setFunc func(*VodCreate, int)) *VodCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VodCreateBulk{err: fmt.Errorf("calling to VodClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VodCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vod.
func (c *VodClient) Update() *VodUpdate {
	mutation := newVodMutation(c.config, OpUpdate)
	return &VodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VodClient) UpdateOne(v *Vod) *VodUpdateOne {
	mutation := newVodMutation(c.config, OpUpdateOne, withVod(v))
	return &VodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VodClient) UpdateOneID(id uuid.UUID) *VodUpdateOne {
	mutation := newVodMutation(c.config, OpUpdateOne, withVodID(id))
	return &VodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vod.
func (c *VodClient) Delete() *VodDelete {
	mutation := newVodMutation(c.config, OpDelete)
	return &VodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VodClient) DeleteOne(v *Vod) *VodDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VodClient) DeleteOneID(id uuid.UUID) *VodDeleteOne {
	builder := c.Delete().Where(vod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VodDeleteOne{builder}
}

// Query returns a query builder for Vod.
func (c *VodClient) Query() *VodQuery {
	return &VodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVod},
		inters: c.Interceptors(),
	}
}

// Get returns a Vod entity by its id.
func (c *VodClient) Get(ctx context.Context, id uuid.UUID) (*Vod, error) {
	return c.Query().Where(vod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VodClient) GetX(ctx context.Context, id uuid.UUID) *Vod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannel queries the channel edge of a Vod.
func (c *VodClient) QueryChannel(v *Vod) *ChannelQuery {
	query := (&ChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vod.ChannelTable, vod.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueue queries the queue edge of a Vod.
func (c *VodClient) QueryQueue(v *Vod) *QueueQuery {
	query := (&QueueClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(queue.Table, queue.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, vod.QueueTable, vod.QueueColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlaylists queries the playlists edge of a Vod.
func (c *VodClient) QueryPlaylists(v *Vod) *PlaylistQuery {
	query := (&PlaylistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vod.PlaylistsTable, vod.PlaylistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChapters queries the chapters edge of a Vod.
func (c *VodClient) QueryChapters(v *Vod) *ChapterQuery {
	query := (&ChapterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(chapter.Table, chapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vod.ChaptersTable, vod.ChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMutedSegments queries the muted_segments edge of a Vod.
func (c *VodClient) QueryMutedSegments(v *Vod) *MutedSegmentQuery {
	query := (&MutedSegmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(mutedsegment.Table, mutedsegment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vod.MutedSegmentsTable, vod.MutedSegmentsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VodClient) Hooks() []Hook {
	return c.hooks.Vod
}

// Interceptors returns the client interceptors.
func (c *VodClient) Interceptors() []Interceptor {
	return c.inters.Vod
}

func (c *VodClient) mutate(ctx context.Context, m *VodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vod mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Channel, Chapter, Live, LiveCategory, LiveTitleRegex, MutedSegment, Playback,
		Playlist, Queue, TwitchCategory, User, Vod []ent.Hook
	}
	inters struct {
		Channel, Chapter, Live, LiveCategory, LiveTitleRegex, MutedSegment, Playback,
		Playlist, Queue, TwitchCategory, User, Vod []ent.Interceptor
	}
)
